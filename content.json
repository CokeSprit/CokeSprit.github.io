[{"title":"闭包基础","date":"2020-08-04T02:30:39.000Z","path":"/posts/3d615767/","text":"闭包的定义：当内部函数被返回到外部保存时,就一定会形成闭包。 闭包的优点: 避免全全局变量的污染; 私有成员的存在; 希望一个变量长期存储在内存中。 闭包的缺点: 闭包会产生原来的作用域链不释放。 过渡的闭包可能会导致内存泄漏或加载过慢,因为它常驻内存。 闭包的用途:可以用来做数据缓存。 闭包的三个特性: 函数嵌套函数。 函数内部可以引用外部的参数和变量。 参数和变量不会被垃圾回收机制回收。 栗子1234567891011121314function test1(){ function test2(){ var a = 3; console.log(x); } var x = 2; return test2;}var b = 4;var test3 = test1();test3(); // 2// 这就是一个简单闭包 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"闭包","slug":"闭包","permalink":"http://cokesprit.top/tags/%E9%97%AD%E5%8C%85/"}]},{"title":"作用域与作用域链图解","date":"2020-08-03T01:42:56.000Z","path":"/posts/ab6a816/","text":"作用域与作用域链 栗子一123456789function a(){ function b(){ var b = 2; } var a = 1; b();}var c = 3;a(); 图解当a函数被定义时 当a函数被执行时(前一刻) 当b函数被定义时 当b函数被执行时(前一刻) 当b函数被执行结束后 回归b函数被定义时的状态 当a函数被执行结束时 回归a函数被定义时的状态 以上这就是作用域和作用域链的最基本的一个形态 栗子二这个例子比较特殊涉及到闭包,有关闭包的在下一篇更新。 123456789101112function test1(){ function test2(){ var b = 2; console.log(a); } var a = 1; return test2;}var c = 3;var test3 = test1();test3(); 当test1函数被定义时 当test1函数被执行时(前一刻),函数test2被定义 当test1函数被执行结束时 这时test1的AO并没有被销毁只是把线剪断了,test1的AO本该是要被销毁的,但test2已经被返回到外部且死死的抓住test1的AO不放,所有test1的AO不能销毁。注意这里是重头戏,这时候就形成了闭包了！！！ test3执行 这时的 test3 === test2。a是在test1的AO里面的,为什么可以打印出来a? 就像之前讲的test2还死死的攥着test1的AO,当在自己的AO上没有查找到,则想test1的AO查找,实际操作的仍然是test1的AO。 补充 每个函数都有全局执行上下文GO。 函数自己的AO产生了,就会把自己AO排在作用域链的最顶端,其他AO和全局GO就会被挤下去。 函数被定义的时候它拿的是它上一级的作用域链。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js作用域作用域链","slug":"js作用域作用域链","permalink":"http://cokesprit.top/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"}]},{"title":"作用域之对象的隐式属性[[scope]]","date":"2020-08-02T13:13:15.000Z","path":"/posts/scope/","text":"对象 -&gt; 有些属性是我们无法访问的,JS引擎内部固有的隐式属性[[scope]]。 [[scope]] -&gt; 作用域 函数创建时,生成的一个JS内部的隐式属性。 函数存储作用域链的容器。Scope Chain -&gt; 作用域链 AO/GO AO, 函数的执行期上下文 GO, 全局的执行期上下文 作用域链其实就是把这些AO/GO形成链式从上到下排列起来,形成一个链式关系,这个链式关系其实就是作用域链。 作用域链也可以说是存储AO/GO的容器。 当函数执行完成以后,AO是要销毁的,也就是说AO是一个即时的存储容器;它不是长期保存的,它是根据函数的执行周期来保存。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js作用域作用域链","slug":"js作用域作用域链","permalink":"http://cokesprit.top/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"}]},{"title":"搬砖日记","date":"2020-07-27T04:54:14.000Z","path":"/posts/tote-bricks/","text":"前言为什么选择去工地搬砖,而不是去广东进厂?1.我大伯接了一个工程,挺赶的,人手不够。2.去广东的话车费来回要六百块,不划算。3.进厂一天十二个小时感觉有点吃不消,且一天没有多少学习时间。 第一天2020-07-27-14:00整就被家里人叫去工地帮忙。到哪要干的事很简单,只需要把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。晚上七点钟下班感觉身体有点吃不消,手脚都有点酸;可能是太久没干重体力活的原因,想想过几天适应了可能就好受点。晚上十点钟时就有一股深深的困意袭来,虽然很困,但还是把今天的任务完成。 第二天2020-07-28早上六点四十分起来时感觉全身酸痛,手还有点发抖。今天要上一整天的班,上班时间为上午7:00 - 12:00,下午14:00 - 19:00一共十个小时;相比于进厂的话要好一点,晚上还能有一些时间留给自己。 今天还是重复昨天的工作把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。对我来说沙子是最难弄的,要把沙子铲到斗车里面去。沙子有点湿再加上我左手腕有暗伤,打篮球的时候伤的时间有两个月了,我以为好了;谁知道当把沙子铲到铲里提起来时,左手直接软了提不起来,没办法只能一点点的铲了。晚上洗完澡躺倒床上,有点那种倒头就睡的冲动,今天要比昨天累很多。 第三天2020-07-29今天是我搬砖的第三天,天空很蓝,云朵很大,风很舒服,太阳很晒。今天的砖头比昨天格外的烫手,对面超市的冰镇可乐,依然是我不敢奢求的梦想,微分吹过我的脸庞,我很迷茫。 第四天2020-07-30中午下来一场雨,浸透了燥热的天空。让着原本燥热不堪看的气温竟夹带着一丝凉意,深深的呼吸新鲜空气,带着淡淡泥土的芬芳;让我这疲惫的身躯,重新焕发了一丝活力。下午的时候吊机出了一点问题,吊不起太多东西了,这使得我的工作轻松了许多,但无聊的时候,也是时间最漫长的时候,在这短暂而又漫长的时间里我会想着我昨天的代码和我的未来该何去何从~~~~ 第五天2020-07-31做了几天身体也渐渐适应了工作强度,手脚也不酸痛了。说说这几天的改变吧。最直观就是黑了很多就几天时间晒得跟包大人一样,我对着镜子又陷入了沉思,看来老天爷也不想让我白活一辈子。 身体素质上得到了小幅提升比如说手部力量和腿部力量,感觉比以前有力很多。不光这些连我的睡眠质量也得到了很大的改善,无论是晚上睡觉还是午休我都可以快速入睡,这是在学校时所没有的。这是几天搬砖最大的“收获”,有点困了今晚就这样了。 第六天2020-08-01今天是建军节。太阳出奇的大,气温是我从开始到现在最热的一天气温高达34度,感觉都要化了。不过还好今天不是很忙,今天楼上的砖差不多都砌完了,明天过后就会轻松很多。 第七天2020-08-02天气还可以不怎么热风很凉快,六点钟的时候下了场雨挺大的。无奈只能“暂停营业”,提前下班。 第八天2020-08-03今天建设局的人来检查,说违规建设未经允许私自加高楼层。听说这这个房子的主人只申请到了到了六层楼的文件建设许可,现在起到第八层局里的人说得拆掉两层,现在这栋房子的主人正在与局里的人沟通,估计明天也出不来结果。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"搬砖日记","slug":"搬砖日记","permalink":"http://cokesprit.top/tags/%E6%90%AC%E7%A0%96%E6%97%A5%E8%AE%B0/"}]},{"title":"GO和AO","date":"2020-07-25T13:43:05.000Z","path":"/posts/GO-AO/","text":"GO: global object 全局的执行期上下文AO：activation object 活跃对象,函数的执行期上下文 在说GO和AO之前我们先来了解javascript 在执行之前的几个步骤: 检查通篇的语法错误 预编译的过程(把代码中的变量和函数解析出来与AO和GO有关) 解释一行,执行一行 预编译代码演示 12345678910test(); // 2function test(){ console.log(2);}console.log(a); // undefinedvar a = 10; // var a = 1 ; // 是2个步骤 编译时找a并且赋值undefined -&gt; 执行时赋值 1 上面的演示中test();打印出来了2,而console.log(a);打印出来了undefined并没有报错,证明 js引擎在编译的时候,先去找函数声明,和变量声明,而变量赋值并不是在编译的时候做的,而是在编译完成后执行到那句时做的。 运行结果： 总结：函数声明是整体提示,变量只有声明提升,变量赋值不提升。 暗示全局变量暗示全局变量 -&gt; imply global variable 12345678910111213141516171819202122232425// 栗子一 var a = 1; b = 2; // 暗示全局变量 不使用 var console.log(window.a); console.log(window.b); // a = window.a // b = window.b // window = { // a:1 , // b:2 // }// 栗子二 function test(){ var x = y = 7; } test(); console.log(y); // 打印 7 , 未声明直接赋值,提升成全局变量 // window 本身是一个全局的域;所有的全局变量都归 window 所有 // 你也可以这么认为 全局变量是 window对象的属性,全局函数是 window对象的方法 运行结果： 暗示全局变量与GOGO:global object 全局的执行期上下文GO执行： 1. 找变量 2. 找函数声明 3. 执行 1234567891011121314// 栗子一 var a = 1; function a(){ console.log(2); } console.log(a); // 1 // 根据上面GO执行一步一步的来 // GO = { // a: undefined // a: function a(){} // a: 1 // } // 总结： GO === window,GO只关注全局变量的和全局函数声明但并不关注函数的内部; 1234567891011// 栗子二 console.log(c,d); // 打印 f c(){} undefined function c(){} var d = funciton(){} // GO 执行 // GO = { // d:undefined // 第一步 找变量 // function(){} // c:function c(){} // 第二步 找函数声明 // } 疑点解析：为什么打印d是undefined并不是 f c(){}?因为预编译的时候是去找变量声明和函数声明,当编译完后才解释一行,执行一行。 总结：在使用 GO 的时候要考虑执行顺序。 函数预编译与AOAO activation object 活跃对象,函数的执行期上下文AO执行： 寻找形参和变量声明 实参赋值给形参 找函数声明,赋值 执行 123456789101112131415161718192021// 栗子一 function test(a){ console.log(a); // ƒ a(){} var a = 1; console.log(a); // 1 function a(){} // 1 var b = function(){} console.log(b); // ƒ (){} funciton d(){} } test(2); // AO = { // a: undefined // 2 // function a(){} // 1 // b: undefined // function (){} // d: function d(){} // } 运行结果： 123456789101112131415161718192021222324252627// 栗子二 function test(a,b){ console.log(a); // 1 c = 0; var c; a = 5; b = 6; console.log(b); // 6 function b(){} function d(){} console.log(b); // 6 因为 b = 6; 把函数式 function b(){} 给覆盖了 } test(1); // AO = { // a: undefined // 1 // 5 // b: undefined // function b(){} // 6 // c: undefined // 0 // d:function d(){} // } 运行结果： 练习题写出练习例子的GO和AO 练习一12345678function test(){ return a; a = 1; function a(){} var a = 2; }console.log(test()); // ƒ a(){} 练习二1234567console.log(test()); //2function test(){ a = 1; function a(){} var a = 2; return a;} 练习三123456789101112131415161718192021 a = 1 ;function test(e){ function e(){} arguments[0] = 2; console.log(e); if(a){ var b = 3; } var c ; a = 4; var a; console.log(b); f = 5; console.log(c); console.log(a);}var a;test(1);console.log(a); //1console.log(f); //5 补充预编译是不看 if的,看见有声明就挂上去。if只有在在执行的时候才去看 if 。但是if 内部的变量声明还是在的。 为啥了解AO和GO为了解决js作用域作用域链相关所产生的一切问题 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"面试/笔试","slug":"面试-笔试","permalink":"http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"}]},{"title":"callee-caller","date":"2020-07-24T10:45:47.000Z","path":"/posts/callee-caller/","text":"calleecallee是arguments的属性,代表当前函数的引用(名字),在函数内部使用，主要用来配合立即执行函数。接下来让我们来认识 callee 12345678910function test(a,b,c){ console.log(arguments.callee); //打印的是这个函数本身 // 这两组是一样的 console.log(test.length);// 打印形参的长度 console.log(arguments.callee.length);//打印形参的长度 console.log(arguments.length);// 打印实参的长度}test(1,2); 运行结果： callee 配合立即执行函数 12345678// 使用递归求 n-1 的累加和 var sum = (function(n){ if(n &lt;= 1){ return 1; } return n + arguments.callee(n-1);}(10));console.log(sum); 运行结果： caller返回当前被调用的函数的引用。这听起来有点绕,让我们使用代码来更好的理解 1234567891011function test1(){ test2();}function test2(){ console.log(test2.caller); //这里打印的是 test1,因为test1()调用了test2并且test1执行了。 // 在被调用函数里面打印被调用函数的caller 它可以打印出谁在调用它。 // 注意一定是要被真正执行才能打印出来！！！}test1(); 运行结果： 注意在严格模式下 callee 和 caller 会报错!!! document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"面试/笔试","slug":"面试-笔试","permalink":"http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"}]},{"title":"call/apply方法","date":"2020-07-24T04:20:37.000Z","path":"/posts/call-apply/","text":"作用：call() 和 apply() 都是用来更改 this 指向;call()：call(this指向的对象, 参数1, 参数2, 参数n);apply()：apply(this指向的对象, []);不同之处：apply() 第二个参数是数组,实际开发中用的比较多的是apply(); 栗子栗子一让 newCar1和newCar2 拥有Car构造函数的的所有属性以及方法 1234567891011121314151617181920// Car function Car(brand,color){ this.brand = brand; this.color = color; this.run = function(){ console.log(this.color+\"的\"+this.brand+\"正在行驶\"); }} var newCar1 = { pdiliang:'3.0' }; var newCar2 = { pdiliang:'2.0' }; Car.call(newCar1,\"奔驰\",\"白色\"); console.log(newCar1); Car.apply(newCar2,\"五菱宏光\",\"米色\"); console.log(newCar2); 运行结果：可以看到 newCar1 和 newCar2 拥有了Car的属性和方法 栗子一讲解：12345678910// 当使用 newCar1/newCar2 的时候 Car 变成内部的情况是这样的function Car(){ newCar1.brand = brand; newCar1.color = color;}function Car(){ newCar2.brand = brand; newCar2.color = color;}// 因为 call/apply更改了 this 的指向 栗子二买车案例 1234567891011121314151617181920212223242526272829// 买车案例function Car(brand,color,displacement){ this.brand = brand; this.color = color; this.displacement = displacement; this.info = function(){ return '排量为'+ this.displacement + '的' + this.color + this.brand; }}function Preson(opt){ // 借用 Car 的属性和方法 Car.apply(this,[opt.brand,opt.color,opt.displacement]); this.name = opt.name; this.age = opt.age; this.say = function(){ console.log( '年龄'+ this.age + '岁姓名为'+this.name+'买了一辆'+this.info() ); }}var pt = new Preson({ brand:'法拉利', color:'红色', displacement:'3.5', name:'黄某', age:'20'});pt.say(); 运行结果： call() 和 apply()的使用场景 以前写了一个功能不太完整，这时候可以写一个新的功能来补充完整，这个时候呢就可以使用 call() 和apply() 这两个方法去借用，以前功能相对应的方法和函数。 在工作的过程中很多人一起写个大功能，这个时候可以分组来写，最终统一去调用,一起协同作战。 分类：比如写一个东西，它有几种不同的类型，我们就可以分开写最后汇总。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"面试/笔试","slug":"面试-笔试","permalink":"http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"}]},{"title":"立即执行函数","date":"2020-07-22T13:13:45.000Z","path":"/posts/iife/","text":"立即执行函数：解释：自动执行，执行完成立即释放（销毁） 英文：Immediately - Invoked Function Expression 简称：IIFE 作用：创建一个独立的作用域 好处：可以避免函数内的变量暴露在全局环境下，避免全局变量的污染。写法123456789// 写法一(function(){ })(); // 常用写法// 写法二(function(){}()); // w3C建议 演示错误声明12345678910 // 错误声明function test(){ console.log(\"这样是错误的声明\")}(); // 因为解析的时候是 ↓ function test(){ } (); //括号里面是空的会报错,当有值的时候会解析成一个表达式。 正确声明1234// 正确声明 var ts = function (){ // 这个匿名函数赋值给了 ts 这是一个赋值的过程 console.log(\"这样可以执行！\"); }(); 证明立即执行函数完就销毁1234567// 证明立即执行函数的销毁var testone = function(){ console.log(\"%c 1\",\"color:red;background:pink;\"); }(); // 这是一个赋值的过程 并不是执行所以可以这样写console.log(testone);//打印 undefined // 打印 undefined 证明 testone 在执行完之后就被销毁了 例子1234567891011// 例子一 (function(a,b){//这两个是形参 console.log(a+b); 6 }(2,4));//这两个是实参 // 例子二 var sum = (function(a,b){ return a + b; }(3,4)); console.log(sum); // 7 总结1.括号括起来的都是表达式,不管里面是什么;2.只有表达式才能被执行符号(括号)执行;3.把函数声明变成表达式，那么你的函数名就会被自动的忽略; 扩展函数声明变成表达式的方法函数声明变成表达式的方法在 function前面加 + 、- 、！、||(前面得加 0)、&amp;&amp;(前面得加 1) 12345678+function(){ console.log(\"我前面加了 + 号变成表达式了,所以可以立即执行\");}();0||function(){ console.log(\"我前面加了 0|| 运算符,我也变成表达式了,我也可以立即执行了。\");}(); 逗号运算符12345// 逗号运算符 // 逗号运算符只返回,所有逗号的最后一个值 // 例子： console.log((6-7,8+9,5+5)); // 10 console.log((4,5,7)); // 7 面试题1234567891011// 面试题function tst(a){ // console.log(\"不报错，也不运行\");}(6);// 解析流程 // 因为解析的时候是解析成两部分的 function tst(){ } //解析这是一个函数 (6); //这个(6),解析成一个表达式 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"递归","date":"2020-07-21T08:23:14.000Z","path":"/posts/digui/","text":"什么是递归？递归说白了就是，函数自己调用自己。 递归主要的两个部分1.找到计算的规律!2.找到一个出口,让它结束掉! 栗子栗子一求 n 的阶乘 -&gt; 不能使用 for 循环 12345678910111213141516171819202122232425262728// fact(n);// 规律：n = n * fact(n-1)// 出口：n === 1 function fact(n){ //出口 if(n === 1){ return 1; } // 规律 return n * fact(n - 1); } console.log(fact(5));// 解析 // 当 n = 5; // 120 = fact(5) = 5 * fact(4); -&gt; 5 * 4 * 6; // 24 = fact(4) = 4 * fact(3); -&gt; 4 * 3 * 2; // 6 = fact(3) = 3 * fact(2); -&gt; 3 * 2 * 1; // 2 = fact(2) = 2 * fact(1); -&gt; 2 * 1 * 1; ↑ // 当程序走到出口1的时候又往上执行， // 因为上面还有一大堆队列都没有实际的运算结果，但是一到 1 // fact(1) = 1 然后 // 2 * 1 等于 2； fact(2) 等于 2; // 3 * 2 等于 6; fact(3) 等于 6; // 4 * 6 等于 24; fact(4) 等于 24; // 5 * 24 等于 120; fact(5) 等于 120; 栗子二斐波拉契数列 123456789101112131415161718192021222324252627//规律: n3 = n2 + n1;//出口：n &lt;= 0 n &lt;= 2; function fb(n){ // 两个出口 if(n &lt;= 0){ return 0; } if(n &lt;= 2){ return 1; } // 规律 return fb(n-1) + fb(n-2); } console.log(fb(6)); // 解析: // 斐波拉契数列： 0,1,1,2,3,5,8,13.... 像这种规律的。 // 规律：n3 = n2 + n1 // 出口：n &lt;= 0 n &lt;= 2 // n = 6; // 8 = fb(6) = fb(5) + fb(4); -&gt; 5 + 3 // 5 = fb(5) = fb(4) + fb(3); -&gt; 3 + 2 // 3 = fb(4) = fb(3) + fb(2); -&gt; 2 + 1 // 2 = fb(3) = fb(2) + fb(1); -&gt; 1 + 1 ↑ 总结递归它总是走到出口的时候,再向上一步一步的赋值计算后返回结果. 注意递归会涉及到性能的问题,return 的值一直出不去,要等执行到出口的时候。递归处理一些,小逻辑还是可以的,但是JavaScript里慎用。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"js中的 ||运算 和 &&运算","date":"2020-07-19T13:54:30.000Z","path":"/posts/js-huo-bingqie/","text":"js中的 || 运算只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真是假都返回。 js中的 &amp;&amp; 运算只要 &amp;&amp; 前面为 false 的话,那么就返回 &amp;&amp; 前面的值，不管你后面有多少个true。 补充在javasript中 undefined,null,NaN,“ “,0,false 这些都是为false即假。 举个栗子写一个函数如果有传入姓名则 return 出去，否则 return 您没有输入姓名 1234567funciton test(name){ return name || '您没有输入姓名';}// 无参 -&gt; 等于空 -&gt; 既 假console.log(test()); //输出-&gt; 您没有输入姓名// 有参 -&gt; 不等于上面那几个假值 既真console.log(test('晓明')); //输出-&gt; 晓明 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"js实参求乘积","date":"2020-07-19T07:25:53.000Z","path":"/posts/js-shican-qiu-chengji/","text":"在解题之前我们先搞懂什么是js中的形参和实参？ js中的形参和实参12345678 // 形式参数 形参function test(形参1,形参2){ // 里面的就是形参 console.log(test.length); // 形参长度 console.log(arguments.length);// 实参长度}// 实际参数 实参test(实参1,实参2,实参3);补充 形参和实参数量可以不相等。 arguments 是一个对应于传递给函数的参数的类数组对象里面包含所有的实参!!! 实参里面传了值的可以在函数内部修改实参的值，如果实参里面并没有传入值，也给形参赋值了，这样是没有用的。 js实参求乘积了解了什么实参和形参接下来就可以愉快的码代码了 123456789function sum(){var a = 1;for(var i = 0; i &lt; arguments.length;i++){ a *= arguments[i];}console.log(a);}sum(1,2,3,4); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js面试题","slug":"js面试题","permalink":"http://cokesprit.top/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"ASCII码 和 UNICODE码","date":"2020-07-19T02:18:33.000Z","path":"/posts/504aee57/","text":"ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。 练习 写一个函数，接收任意一个字符串，算出字符串的总字节数。 1234567891011function getBytes(str){ var sth = str.length; for(var i = 0; i &lt; str.length; i++){ var stc = str.charCodeAt(i); if(stc &gt; 255){ sth++; } } return sth;}console.log(getBytes('Hello js，我们做好朋友吧！')); 实现思路先获取到字符串的长度,将其存入一个变量 sth ,然后利用循环判断编码是否大于 255 ,如果大于 sth++ 。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"hexo博客发布踩坑","date":"2020-07-18T02:29:37.000Z","path":"/posts/ffafe98e/","text":"hexo博客 Username for ‘https://github.com 验证问题这时候 输入你的github邮箱账号 （不是你的github名！！！） 之后会弹出一个提示框 然后输入邮箱登录密码即可。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cokesprit.top/tags/hexo/"}]},{"title":"hexo 博客文章发布部署","date":"2020-06-19T11:56:52.930Z","path":"/posts/c3259ce2/","text":"创建新帖子1$ hexo new \"My New Post\" 运行服务器1$ hexo server 生成静态文件1$ hexo generate 部署到远程站点$ hexo deploy 作者：可乐精链接：CokeSprit著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cokesprit.top/tags/hexo/"}]}]