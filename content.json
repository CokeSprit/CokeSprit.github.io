[{"title":"立即执行函数","date":"2020-07-22T13:13:45.000Z","path":"/posts/iife/","text":"立即执行函数：解释：自动执行，执行完成立即释放（销毁） 英文：Immediately - Invoked Function Expression 简称：IIFE 作用：创建一个独立的作用域 好处：可以避免函数内的变量暴露在全局环境下，避免全局变量的污染。写法123456789// 写法一(function(){ })(); // 常用写法// 写法二(function(){}()); // w3C建议 演示错误声明12345678910 // 错误声明function test(){ console.log(\"这样是错误的声明\")}(); // 因为解析的时候是 ↓ function test(){ } (); //括号里面是空的会报错,当有值的时候会解析成一个表达式。 正确声明1234// 正确声明 var ts = function (){ // 这个匿名函数赋值给了 ts 这是一个赋值的过程 console.log(\"这样可以执行！\"); }(); 证明立即执行函数完就销毁1234567// 证明立即执行函数的销毁var testone = function(){ console.log(\"%c 1\",\"color:red;background:pink;\"); }(); // 这是一个赋值的过程 并不是执行所以可以这样写console.log(testone);//打印 undefined // 打印 undefined 证明 testone 在执行完之后就被销毁了 例子1234567891011// 例子一 (function(a,b){//这两个是形参 console.log(a+b); 6 }(2,4));//这两个是实参 // 例子二 var sum = (function(a,b){ return a + b; }(3,4)); console.log(sum); // 7 总结1.括号括起来的都是表达式,不管里面是什么;2.只有表达式才能被执行符号(括号)执行;3.把函数声明变成表达式，那么你的函数名就会被自动的忽略; 扩展函数声明变成表达式的方法函数声明变成表达式的方法在 function前面加 + 、- 、！、||(前面得加 0)、&amp;&amp;(前面得加 1) 12345678+function(){ console.log(\"我前面加了 + 号变成表达式了,所以可以立即执行\");}();0||function(){ console.log(\"我前面加了 0|| 运算符,我也变成表达式了,我也可以立即执行了。\");}(); 逗号运算符12345// 逗号运算符 // 逗号运算符只返回,所有逗号的最后一个值 // 例子： console.log((6-7,8+9,5+5)); // 10 console.log((4,5,7)); // 7 面试题1234567891011// 面试题function tst(a){ // console.log(\"不报错，也不运行\");}(6);// 解析流程 // 因为解析的时候是解析成两部分的 function tst(){ } //解析这是一个函数 (6); //这个(6),解析成一个表达式 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"递归","date":"2020-07-21T08:23:14.000Z","path":"/posts/digui/","text":"什么是递归？递归说白了就是，函数自己调用自己。 递归主要的两个部分1.找到计算的规律!2.找到一个出口,让它结束掉! 栗子栗子一求 n 的阶乘 -&gt; 不能使用 for 循环 12345678910111213141516171819202122232425262728// fact(n);// 规律：n = n * fact(n-1)// 出口：n === 1 function fact(n){ //出口 if(n === 1){ return 1; } // 规律 return n * fact(n - 1); } console.log(fact(5));// 解析 // 当 n = 5; // 120 = fact(5) = 5 * fact(4); -&gt; 5 * 4 * 6; // 24 = fact(4) = 4 * fact(3); -&gt; 4 * 3 * 2; // 6 = fact(3) = 3 * fact(2); -&gt; 3 * 2 * 1; // 2 = fact(2) = 2 * fact(1); -&gt; 2 * 1 * 1; ↑ // 当程序走到出口1的时候又往上执行， // 因为上面还有一大堆队列都没有实际的运算结果，但是一到 1 // fact(1) = 1 然后 // 2 * 1 等于 2； fact(2) 等于 2; // 3 * 2 等于 6; fact(3) 等于 6; // 4 * 6 等于 24; fact(4) 等于 24; // 5 * 24 等于 120; fact(5) 等于 120; 栗子二斐波拉契数列 123456789101112131415161718192021222324252627//规律: n3 = n2 + n1;//出口：n &lt;= 0 n &lt;= 2; function fb(n){ // 两个出口 if(n &lt;= 0){ return 0; } if(n &lt;= 2){ return 1; } // 规律 return fb(n-1) + fb(n-2); } console.log(fb(6)); // 解析: // 斐波拉契数列： 0,1,1,2,3,5,8,13.... 像这种规律的。 // 规律：n3 = n2 + n1 // 出口：n &lt;= 0 n &lt;= 2 // n = 6; // 8 = fb(6) = fb(5) + fb(4); -&gt; 5 + 3 // 5 = fb(5) = fb(4) + fb(3); -&gt; 3 + 2 // 3 = fb(4) = fb(3) + fb(2); -&gt; 2 + 1 // 2 = fb(3) = fb(2) + fb(1); -&gt; 1 + 1 ↑ 总结递归它总是走到出口的时候,再向上一步一步的赋值计算后返回结果. 注意递归会涉及到性能的问题,return 的值一直出不去,要等执行到出口的时候。递归处理一些,小逻辑还是可以的,但是JavaScript里慎用。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"js中的 ||运算 和 &&运算","date":"2020-07-19T13:54:30.000Z","path":"/posts/js-huo-bingqie/","text":"js中的 || 运算只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真是假都返回。 js中的 &amp;&amp; 运算只要 &amp;&amp; 前面为 false 的话,那么就返回 &amp;&amp; 前面的值，不管你后面有多少个true。 补充在javasript中 undefined,null,NaN,“ “,0,false 这些都是为false即假。 举个栗子写一个函数如果有传入姓名则 return 出去，否则 return 您没有输入姓名 1234567funciton test(name){ return name || '您没有输入姓名';}// 无参 -&gt; 等于空 -&gt; 既 假console.log(test()); //输出-&gt; 您没有输入姓名// 有参 -&gt; 不等于上面那几个假值 既真console.log(test('晓明')); //输出-&gt; 晓明 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"js实参求乘积","date":"2020-07-19T07:25:53.000Z","path":"/posts/js-shican-qiu-chengji/","text":"在解题之前我们先搞懂什么是js中的形参和实参？ js中的形参和实参12345678 // 形式参数 形参function test(形参1,形参2){ // 里面的就是形参 console.log(test.length); // 形参长度 console.log(arguments.length);// 实参长度}// 实际参数 实参test(实参1,实参2,实参3);补充 形参和实参数量可以不相等。 arguments 是一个对应于传递给函数的参数的类数组对象里面包含所有的实参!!! 实参里面传了值的可以在函数内部修改实参的值，如果实参里面并没有传入值，也给形参赋值了，这样是没有用的。 js实参求乘积了解了什么实参和形参接下来就可以愉快的码代码了 123456789function sum(){var a = 1;for(var i = 0; i &lt; arguments.length;i++){ a *= arguments[i];}console.log(a);}sum(1,2,3,4); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js面试题","slug":"js面试题","permalink":"http://cokesprit.top/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"ASCII码 和 UNICODE码","date":"2020-07-19T02:18:33.000Z","path":"/posts/504aee57/","text":"ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。 练习 写一个函数，接收任意一个字符串，算出字符串的总字节数。 1234567891011function getBytes(str){ var sth = str.length; for(var i = 0; i &lt; str.length; i++){ var stc = str.charCodeAt(i); if(stc &gt; 255){ sth++; } } return sth;}console.log(getBytes('Hello js，我们做好朋友吧！')); 实现思路先获取到字符串的长度,将其存入一个变量 sth ,然后利用循环判断编码是否大于 255 ,如果大于 sth++ 。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"js笔记","slug":"js笔记","permalink":"http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"}]},{"title":"hexo博客发布踩坑","date":"2020-07-18T02:29:37.000Z","path":"/posts/ffafe98e/","text":"hexo博客 Username for ‘https://github.com 验证问题这时候 输入你的github邮箱账号 （不是你的github名！！！） 之后会弹出一个提示框 然后输入邮箱登录密码即可。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cokesprit.top/tags/hexo/"}]},{"title":"hexo 博客文章发布部署","date":"2020-06-19T11:56:52.930Z","path":"/posts/c3259ce2/","text":"创建新帖子1$ hexo new \"My New Post\" 运行服务器1$ hexo server 生成静态文件1$ hexo generate 部署到远程站点$ hexo deploy 作者：可乐精链接：CokeSprit著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"hexo","slug":"hexo","permalink":"http://cokesprit.top/tags/hexo/"}]}]