<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CokeSprit</title>
  <icon>https://www.gravatar.com/avatar/b765c05225fbf501f68a98a1395ba44b</icon>
  <subtitle>爱生活,爱编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cokesprit.top/"/>
  <updated>2020-08-01T13:14:10.809Z</updated>
  <id>http://cokesprit.top/</id>
  
  <author>
    <name>可乐精</name>
    <email>2665281140@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搬砖日记</title>
    <link href="http://cokesprit.top/posts/tote-bricks/"/>
    <id>http://cokesprit.top/posts/tote-bricks/</id>
    <published>2020-07-27T04:54:14.000Z</published>
    <updated>2020-08-01T13:14:10.809Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>为什么选择去工地搬砖,而不是去广东进厂?<br>1.我大伯接了一个工程,挺赶的,人手不够。<br>2.去广东的话车费来回要六百块,不划算。<br>3.进厂一天十二个小时感觉有点吃不消,且一天没有多少学习时间。</p><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><p class="txt-indent">2020-07-27-14:00整就被家里人叫去工地帮忙。到哪要干的事很简单,只需要把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。晚上七点钟下班感觉身体有点吃不消,手脚都有点酸;可能是太久没干重体力活的原因,想想过几天适应了可能就好受点。晚上十点钟时就有一股深深的困意袭来,虽然很困,但还是把今天的任务完成。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/bd.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p class="txt-indent">2020-07-28早上六点四十分起来时感觉全身酸痛,手还有点发抖。今天要上一整天的班,上班时间为上午7:00 - 12:00,下午14:00 - 19:00一共十个小时;相比于进厂的话要好一点,晚上还能有一些时间留给自己。</p><p class="txt-indent">    今天还是重复昨天的工作把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。对我来说沙子是最难弄的,要把沙子铲到斗车里面去。沙子有点湿再加上我左手腕有暗伤,打篮球的时候伤的时间有两个月了,我以为好了;谁知道当把沙子铲到铲里提起来时,左手直接软了提不起来,没办法只能一点点的铲了。晚上洗完澡躺倒床上,有点那种倒头就睡的冲动,今天要比昨天累很多。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shoudou.gif" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h4><p class="txt-indent">2020-07-29今天是我搬砖的第三天,天空很蓝,云朵很大,风很舒服,太阳很晒。今天的砖头比昨天格外的烫手,对面超市的冰镇可乐,依然是我不敢奢求的梦想,微分吹过我的脸庞,我很迷茫。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/fupo.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h4><p class="txt-indent">2020-07-30中午下来一场雨,浸透了燥热的天空。让着原本燥热不堪看的气温竟夹带着一丝凉意,深深的呼吸新鲜空气,带着淡淡泥土的芬芳;让我这疲惫的身躯,重新焕发了一丝活力。下午的时候吊机出了一点问题,吊不起太多东西了,这使得我的工作轻松了许多,但无聊的时候,也是时间最漫长的时候,在这短暂而又漫长的时间里我会想着我昨天的代码和我的未来该何去何从~~~~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/csone.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/cs.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h4><p class="txt-indent">2020-07-31做了几天身体也渐渐适应了工作强度,手脚也不酸痛了。说说这几天的改变吧。最直观就是黑了很多就几天时间晒得跟包大人一样,我对着镜子又陷入了沉思,看来老天爷也不想让我白活一辈子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/baihuo.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">身体素质上得到了小幅提升比如说手部力量和腿部力量,感觉比以前有力很多。不光这些连我的睡眠质量也得到了很大的改善,无论是晚上睡觉还是午休我都可以快速入睡,这是在学校时所没有的。这是几天搬砖最大的“收获”,有点困了今晚就这样了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shuijiao.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h4><p>2020-08-01今天是建军节。太阳出奇的大,气温是我从开始到现在最热的一天气温高达34度,感觉都要化了。不过还好今天不是很忙,今天楼上的砖差不多都砌完了,明天过后就会轻松很多。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;为什么选择去工地搬砖,而不是去广东进厂?&lt;br&gt;1.我大伯接了一个工程,挺赶的,人手不够。&lt;br&gt;2.去广东的话车费来回要六百块,不划算。&lt;
      
    
    </summary>
    
    
    
      <category term="搬砖日记" scheme="http://cokesprit.top/tags/%E6%90%AC%E7%A0%96%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GO和AO</title>
    <link href="http://cokesprit.top/posts/GO-AO/"/>
    <id>http://cokesprit.top/posts/GO-AO/</id>
    <published>2020-07-25T13:43:05.000Z</published>
    <updated>2020-07-28T14:32:59.953Z</updated>
    
    <content type="html"><![CDATA[<p>GO: global object 全局的执行期上下文<br>AO：activation object 活跃对象,函数的执行期上下文   </p><p>在说GO和AO之前我们先来了解javascript 在执行之前的几个步骤:  </p><ol><li>检查通篇的语法错误</li><li>预编译的过程(把代码中的变量和函数解析出来与AO和GO有关)</li><li>解释一行,执行一行</li></ol><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>代码演示</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// var a =  1 ; // 是2个步骤 编译时找a并且赋值undefined -&gt; 执行时赋值 1</span></span><br></pre></td></tr></tbody></table></figure><p style=" text-indent: 2rem;">上面的演示中test();打印出来了2,而console.log(a);打印出来了undefined并没有报错,证明 js引擎在编译的时候,先去找函数声明,和变量声明,而变量赋值并不是在编译的时候做的,而是在编译完成后执行到那句时做的。</p>  运行结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><mark color="red">总结：函数声明是整体提示,变量只有声明提升,变量赋值不提升。</mark><hr><h4 id="暗示全局变量"><a href="#暗示全局变量" class="headerlink" title="暗示全局变量"></a>暗示全局变量</h4><p>暗示全局变量 -&gt; imply global variable</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        b = <span class="number">2</span>; <span class="comment">// 暗示全局变量 不使用 var</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a = window.a</span></span><br><span class="line">    <span class="comment">// b = window.b</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// window = {</span></span><br><span class="line">        <span class="comment">//     a:1 ,</span></span><br><span class="line">        <span class="comment">//     b:2</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> x = y = <span class="number">7</span>;</span><br><span class="line">    }</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">console</span>.log(y); <span class="comment">// 打印 7 , 未声明直接赋值,提升成全局变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// window 本身是一个全局的域;所有的全局变量都归 window 所有</span></span><br><span class="line">    <span class="comment">// 你也可以这么认为 全局变量是 window对象的属性,全局函数是 window对象的方法</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="暗示全局变量与GO"><a href="#暗示全局变量与GO" class="headerlink" title="暗示全局变量与GO"></a>暗示全局变量与GO</h4><p>GO:global object 全局的执行期上下文<br>GO执行：<br>    1. 找变量<br>    2. 找函数声明<br>    3. 执行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据上面GO执行一步一步的来</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//     a: function a(){}</span></span><br><span class="line">    <span class="comment">//     a: 1</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// 总结： GO === window,GO只关注全局变量的和全局函数声明但并不关注函数的内部;</span></span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="built_in">console</span>.log(c,d); <span class="comment">// 打印 f c(){} undefined</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> d = funciton(){}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GO 执行</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     d:undefined  // 第一步 找变量</span></span><br><span class="line">    <span class="comment">//       function(){}</span></span><br><span class="line">    <span class="comment">//     c:function c(){} // 第二步 找函数声明</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>疑点解析：为什么打印d是undefined并不是 f c(){}?因为预编译的时候是去找变量声明和函数声明,当编译完后才解释一行,执行一行。</p><p><mark>总结：在使用 GO 的时候要考虑执行顺序。</mark></p><hr><h4 id="函数预编译与AO"><a href="#函数预编译与AO" class="headerlink" title="函数预编译与AO"></a>函数预编译与AO</h4><p>AO activation object 活跃对象,函数的执行期上下文<br>AO执行：</p><ol><li>寻找形参和变量声明</li><li>实参赋值给形参</li><li>找函数声明,赋值</li><li>执行</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// ƒ a(){}</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}  <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// ƒ (){}</span></span><br><span class="line">        funciton d(){}</span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//        2</span></span><br><span class="line">    <span class="comment">//        function a(){}</span></span><br><span class="line">    <span class="comment">//        1</span></span><br><span class="line">    <span class="comment">//     b: undefined</span></span><br><span class="line">    <span class="comment">//        function (){}</span></span><br><span class="line">    <span class="comment">//     d: function d(){}</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        a = <span class="number">5</span>;</span><br><span class="line">        b = <span class="number">6</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6  因为 b = 6; 把函数式 function b(){} 给覆盖了</span></span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//        1</span></span><br><span class="line">    <span class="comment">//        5</span></span><br><span class="line">    <span class="comment">//     b: undefined</span></span><br><span class="line">    <span class="comment">//         function b(){}</span></span><br><span class="line">    <span class="comment">//         6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     c: undefined</span></span><br><span class="line">    <span class="comment">//         0</span></span><br><span class="line">    <span class="comment">//     d:function d(){}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>写出练习例子的GO和AO</p><h5 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// ƒ a(){}</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">if</span>(a){</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> c ;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    f = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>预编译是不看 if的,看见有声明就挂上去。if只有在在执行的时候才去看 if 。但是if 内部的变量声明还是在的。</p><hr><h4 id="为啥了解AO和GO"><a href="#为啥了解AO和GO" class="headerlink" title="为啥了解AO和GO"></a>为啥了解AO和GO</h4><p>为了解决js作用域作用域链相关所产生的一切问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GO: global object 全局的执行期上下文&lt;br&gt;AO：activation object 活跃对象,函数的执行期上下文   &lt;/p&gt;
&lt;p&gt;在说GO和AO之前我们先来了解javascript 在执行之前的几个步骤:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查通篇的语法
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>callee-caller</title>
    <link href="http://cokesprit.top/posts/callee-caller/"/>
    <id>http://cokesprit.top/posts/callee-caller/</id>
    <published>2020-07-24T10:45:47.000Z</published>
    <updated>2020-07-24T14:10:30.193Z</updated>
    
    <content type="html"><![CDATA[<h4 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h4><p>callee是arguments的属性,<mark>代表当前函数的引用(名字)</mark>,在函数内部使用，主要用来配合立即执行函数。<br>接下来让我们来认识 callee</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">//打印的是这个函数本身</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这两组是一样的</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length);<span class="comment">// 打印形参的长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.length);<span class="comment">//打印形参的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 打印实参的长度</span></span><br><span class="line">}</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><mark>callee 配合立即执行函数</mark></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归求 n-1 的累加和 </span></span><br><span class="line"><span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line">}(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h4><p><mark>返回当前被调用的函数的引用</mark>。<br>这听起来有点绕,让我们使用代码来更好的理解</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    test2();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(test2.caller); </span><br><span class="line">    <span class="comment">//这里打印的是 test1,因为test1()调用了test2并且test1执行了。</span></span><br><span class="line">    <span class="comment">// 在被调用函数里面打印被调用函数的caller 它可以打印出谁在调用它。</span></span><br><span class="line">    <span class="comment">// 注意一定是要被真正执行才能打印出来！！！</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">test1();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在严格模式下 callee 和 caller 会报错!!!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;callee&quot;&gt;&lt;a href=&quot;#callee&quot; class=&quot;headerlink&quot; title=&quot;callee&quot;&gt;&lt;/a&gt;callee&lt;/h4&gt;&lt;p&gt;callee是arguments的属性,&lt;mark&gt;代表当前函数的引用(名字)&lt;/mark&gt;,在函数内部使用
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>call/apply方法</title>
    <link href="http://cokesprit.top/posts/call-apply/"/>
    <id>http://cokesprit.top/posts/call-apply/</id>
    <published>2020-07-24T04:20:37.000Z</published>
    <updated>2020-07-24T10:18:08.682Z</updated>
    
    <content type="html"><![CDATA[<p>作用：call() 和 apply() 都是用来更改 this 指向;<br>call()：call(this指向的对象, 参数1, 参数2, 参数n);<br>apply()：apply(this指向的对象, []);<br>不同之处：apply() 第二个参数是数组,实际开发中用的比较多的是apply();</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>让 newCar1和newCar2 拥有Car构造函数的的所有属性以及方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.color+<span class="string">"的"</span>+<span class="keyword">this</span>.brand+<span class="string">"正在行驶"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">var</span> newCar1 = {</span><br><span class="line">        pdiliang:<span class="string">'3.0'</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">var</span> newCar2 = {</span><br><span class="line">        pdiliang:<span class="string">'2.0'</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    Car.call(newCar1,<span class="string">"奔驰"</span>,<span class="string">"白色"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar1);</span><br><span class="line"></span><br><span class="line">    Car.apply(newCar2,<span class="string">"五菱宏光"</span>,<span class="string">"米色"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：<br>可以看到 newCar1 和 newCar2 拥有了Car的属性和方法<br><img src="/posts/call-apply/1.png" alt=""></p><h5 id="栗子一讲解："><a href="#栗子一讲解：" class="headerlink" title="栗子一讲解："></a>栗子一讲解：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当使用 newCar1/newCar2 的时候 Car 变成内部的情况是这样的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar1.brand = brand;</span><br><span class="line">    newCar1.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar2.brand = brand;</span><br><span class="line">    newCar2.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 因为 call/apply更改了 this 的指向</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>买车案例</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 买车案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color,displacement</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.displacement = displacement;</span><br><span class="line">    <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'排量为'</span>+ <span class="keyword">this</span>.displacement + <span class="string">'的'</span> + <span class="keyword">this</span>.color + <span class="keyword">this</span>.brand;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Preson</span>(<span class="params">opt</span>)</span>{</span><br><span class="line">    <span class="comment">// 借用 Car 的属性和方法</span></span><br><span class="line">    Car.apply(<span class="keyword">this</span>,[opt.brand,opt.color,opt.displacement]);</span><br><span class="line">    <span class="keyword">this</span>.name = opt.name;</span><br><span class="line">    <span class="keyword">this</span>.age  = opt.age;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">'年龄'</span>+ <span class="keyword">this</span>.age + <span class="string">'岁姓名为'</span>+<span class="keyword">this</span>.name+<span class="string">'买了一辆'</span>+<span class="keyword">this</span>.info()</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> pt = <span class="keyword">new</span> Preson({</span><br><span class="line">    brand:<span class="string">'法拉利'</span>,</span><br><span class="line">    color:<span class="string">'红色'</span>,</span><br><span class="line">    displacement:<span class="string">'3.5'</span>,</span><br><span class="line">    name:<span class="string">'黄某'</span>,</span><br><span class="line">    age:<span class="string">'20'</span></span><br><span class="line">});</span><br><span class="line">pt.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/call-apply/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="call-和-apply-的使用场景"><a href="#call-和-apply-的使用场景" class="headerlink" title="call() 和 apply()的使用场景"></a>call() 和 apply()的使用场景</h4><ol><li>以前写了一个功能不太完整，这时候可以写一个新的功能来补充完整，这个时候呢就可以使用 call() 和apply() 这两个方法去借用，以前功能相对应的方法和函数。</li><li>在工作的过程中很多人一起写个大功能，这个时候可以分组来写，最终统一去调用,一起协同作战。</li><li>分类：比如写一个东西，它有几种不同的类型，我们就可以分开写最后汇总。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用：call() 和 apply() 都是用来更改 this 指向;&lt;br&gt;call()：call(this指向的对象, 参数1, 参数2, 参数n);&lt;br&gt;apply()：apply(this指向的对象, []);&lt;br&gt;不同之处：apply() 第二个参数是数组,实
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>立即执行函数</title>
    <link href="http://cokesprit.top/posts/iife/"/>
    <id>http://cokesprit.top/posts/iife/</id>
    <published>2020-07-22T13:13:45.000Z</published>
    <updated>2020-07-22T14:21:54.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h4><pre><code>解释：自动执行，执行完成立即释放（销毁）英文：Immediately - Invoked Function Expression简称：IIFE 作用：创建一个独立的作用域好处：可以避免函数内的变量暴露在全局环境下，避免全局变量的污染。</code></pre><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    </span><br><span class="line">})(); <span class="comment">// 常用写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}()); <span class="comment">// w3C建议</span></span><br></pre></td></tr></tbody></table></figure><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><h5 id="错误声明"><a href="#错误声明" class="headerlink" title="错误声明"></a>错误声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 错误声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样是错误的声明"</span>)</span><br><span class="line">}(); </span><br><span class="line">    <span class="comment">// 因为解析的时候是 ↓ </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    (); <span class="comment">//括号里面是空的会报错,当有值的时候会解析成一个表达式。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="正确声明"><a href="#正确声明" class="headerlink" title="正确声明"></a>正确声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确声明</span></span><br><span class="line">    <span class="keyword">var</span> ts =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{ <span class="comment">// 这个匿名函数赋值给了 ts 这是一个赋值的过程</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样可以执行！"</span>);</span><br><span class="line">    }();</span><br></pre></td></tr></tbody></table></figure><h5 id="证明立即执行函数完就销毁"><a href="#证明立即执行函数完就销毁" class="headerlink" title="证明立即执行函数完就销毁"></a>证明立即执行函数完就销毁</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明立即执行函数的销毁</span></span><br><span class="line"><span class="keyword">var</span> testone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%c 1"</span>,<span class="string">"color:red;background:pink;"</span>);</span><br><span class="line">    }(); <span class="comment">// 这是一个赋值的过程 并不是执行所以可以这样写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testone);<span class="comment">//打印 undefined </span></span><br><span class="line"><span class="comment">// 打印 undefined 证明 testone 在执行完之后就被销毁了</span></span><br></pre></td></tr></tbody></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{<span class="comment">//这两个是形参</span></span><br><span class="line">        <span class="built_in">console</span>.log(a+b);  <span class="number">6</span></span><br><span class="line">    }(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//这两个是实参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例子二</span></span><br><span class="line">    <span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.括号括起来的都是表达式,不管里面是什么;<br>2.只有表达式才能被执行符号(括号)执行;<br>3.把函数声明变成表达式，那么你的函数名就会被自动的忽略;</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="函数声明变成表达式的方法"><a href="#函数声明变成表达式的方法" class="headerlink" title="函数声明变成表达式的方法"></a>函数声明变成表达式的方法</h5><p>函数声明变成表达式的方法在 function前面加 + 、- 、！、||(前面得加 0)、&amp;&amp;(前面得加 1)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 + 号变成表达式了,所以可以立即执行"</span>);</span><br><span class="line">}();</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 0|| 运算符,我也变成表达式了,我也可以立即执行了。"</span>);</span><br><span class="line">}();</span><br></pre></td></tr></tbody></table></figure><h5 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号运算符</span></span><br><span class="line">    <span class="comment">// 逗号运算符只返回,所有逗号的最后一个值</span></span><br><span class="line">    <span class="comment">// 例子：</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">6</span><span class="number">-7</span>,<span class="number">8</span>+<span class="number">9</span>,<span class="number">5</span>+<span class="number">5</span>)); <span class="comment">//  10</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)); <span class="comment">//  7</span></span><br></pre></td></tr></tbody></table></figure><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params">a</span>)</span>{</span><br><span class="line">    <span class="comment">// console.log("不报错，也不运行");</span></span><br><span class="line">}(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析流程</span></span><br><span class="line">    <span class="comment">// 因为解析的时候是解析成两部分的</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    } <span class="comment">//解析这是一个函数</span></span><br><span class="line">   (<span class="number">6</span>); <span class="comment">//这个(6),解析成一个表达式</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;立即执行函数：&quot;&gt;&lt;a href=&quot;#立即执行函数：&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数：&quot;&gt;&lt;/a&gt;立即执行函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;解释：自动执行，执行完成立即释放（销毁）
英文：Immediately - Invo
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://cokesprit.top/posts/digui/"/>
    <id>http://cokesprit.top/posts/digui/</id>
    <published>2020-07-21T08:23:14.000Z</published>
    <updated>2020-07-21T09:37:59.390Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h4><p>递归说白了就是，函数自己调用自己。</p><h4 id="递归主要的两个部分"><a href="#递归主要的两个部分" class="headerlink" title="递归主要的两个部分"></a>递归主要的两个部分</h4><p>1.找到计算的规律!<br>2.找到一个出口,让它结束掉!</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>求 n 的阶乘 -&gt; 不能使用 for 循环 </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fact(n);</span></span><br><span class="line"><span class="comment">// 规律：n = n * fact(n-1)</span></span><br><span class="line"><span class="comment">// 出口：n === 1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">//出口</span></span><br><span class="line">        <span class="keyword">if</span>(n === <span class="number">1</span>){ </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>); </span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fact(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line">    <span class="comment">// 当 n = 5;</span></span><br><span class="line">    <span class="comment">// 120 = fact(5) = 5 * fact(4);  -&gt;   5 * 4 * 6;</span></span><br><span class="line">    <span class="comment">// 24 = fact(4) = 4 * fact(3);  -&gt;   4 * 3 * 2;</span></span><br><span class="line">    <span class="comment">// 6 =  fact(3) = 3 * fact(2);  -&gt;   3 * 2 * 1;</span></span><br><span class="line">    <span class="comment">// 2 = fact(2) = 2 * fact(1);  -&gt;   2 * 1 * 1; ↑ </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  当程序走到出口1的时候又往上执行，</span></span><br><span class="line">    <span class="comment">//  因为上面还有一大堆队列都没有实际的运算结果，但是一到 1 </span></span><br><span class="line">    <span class="comment">//  fact(1) = 1 然后</span></span><br><span class="line">    <span class="comment">//  2 * 1 等于 2； fact(2) 等于 2; </span></span><br><span class="line">    <span class="comment">//  3 * 2 等于 6;  fact(3) 等于 6;</span></span><br><span class="line">    <span class="comment">//  4 * 6 等于 24; fact(4) 等于 24;</span></span><br><span class="line">    <span class="comment">//  5 * 24 等于 120; fact(5) 等于 120;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>斐波拉契数列</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规律: n3 = n2 + n1;</span></span><br><span class="line"><span class="comment">//出口：n &lt;= 0  n &lt;= 2;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">// 两个出口</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> fb(n<span class="number">-1</span>) + fb(n<span class="number">-2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fb(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析:</span></span><br><span class="line">        <span class="comment">//  斐波拉契数列： 0,1,1,2,3,5,8,13.... 像这种规律的。</span></span><br><span class="line">        <span class="comment">//  规律：n3 = n2 + n1</span></span><br><span class="line">        <span class="comment">//  出口：n &lt;= 0 n &lt;= 2 </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// n = 6;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8 = fb(6) = fb(5) + fb(4);  -&gt;  5 + 3</span></span><br><span class="line">            <span class="comment">// 5 = fb(5) = fb(4) + fb(3);  -&gt;  3 + 2</span></span><br><span class="line">            <span class="comment">// 3 = fb(4) = fb(3) + fb(2);  -&gt;  2 + 1</span></span><br><span class="line">            <span class="comment">// 2 = fb(3) = fb(2) + fb(1);  -&gt;  1 + 1   ↑</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>递归它总是走到出口的时候,再向上一步一步的赋值计算后返回结果.</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>递归会涉及到性能的问题,return 的值一直出不去,要等执行到出口的时候。递归处理一些,小逻辑还是可以的,但是JavaScript里慎用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是递归？&quot;&gt;&lt;a href=&quot;#什么是递归？&quot; class=&quot;headerlink&quot; title=&quot;什么是递归？&quot;&gt;&lt;/a&gt;什么是递归？&lt;/h4&gt;&lt;p&gt;递归说白了就是，函数自己调用自己。&lt;/p&gt;
&lt;h4 id=&quot;递归主要的两个部分&quot;&gt;&lt;a href=&quot;#递归主
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js中的 ||运算 和 &amp;&amp;运算</title>
    <link href="http://cokesprit.top/posts/js-huo-bingqie/"/>
    <id>http://cokesprit.top/posts/js-huo-bingqie/</id>
    <published>2020-07-19T13:54:30.000Z</published>
    <updated>2020-07-20T14:32:25.111Z</updated>
    
    <content type="html"><![CDATA[<h5 id="js中的-运算"><a href="#js中的-运算" class="headerlink" title="js中的 || 运算"></a>js中的 || 运算</h5><p>只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真是假都返回。</p><hr><h5 id="js中的-amp-amp-运算"><a href="#js中的-amp-amp-运算" class="headerlink" title="js中的 &amp;&amp; 运算"></a>js中的 &amp;&amp; 运算</h5><p>只要 &amp;&amp; 前面为 false 的话,那么就返回 &amp;&amp; 前面的值，不管你后面有多少个true。</p><hr><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>在javasript中 <mark>undefined</mark>,<mark>null</mark>,<mark>NaN</mark>,<mark>“ “</mark>,<mark>0</mark>,<mark>false</mark> 这些都是为false即假。</p><hr><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><p>写一个函数如果有传入姓名则 return  出去，否则 return 您没有输入姓名</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funciton test(name){</span><br><span class="line">    <span class="keyword">return</span> name || <span class="string">'您没有输入姓名'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 无参 -&gt; 等于空 -&gt; 既 假</span></span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">//输出-&gt; 您没有输入姓名</span></span><br><span class="line"><span class="comment">// 有参 -&gt; 不等于上面那几个假值 既真</span></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="string">'晓明'</span>)); <span class="comment">//输出-&gt; 晓明</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;js中的-运算&quot;&gt;&lt;a href=&quot;#js中的-运算&quot; class=&quot;headerlink&quot; title=&quot;js中的 || 运算&quot;&gt;&lt;/a&gt;js中的 || 运算&lt;/h5&gt;&lt;p&gt;只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js实参求乘积</title>
    <link href="http://cokesprit.top/posts/js-shican-qiu-chengji/"/>
    <id>http://cokesprit.top/posts/js-shican-qiu-chengji/</id>
    <published>2020-07-19T07:25:53.000Z</published>
    <updated>2020-07-19T09:23:03.349Z</updated>
    
    <content type="html"><![CDATA[<p> 在解题之前我们先搞懂什么是js中的形参和实参？  </p><h5 id="js中的形参和实参"><a href="#js中的形参和实参" class="headerlink" title="js中的形参和实参"></a>js中的形参和实参</h5><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 形式参数 形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span></span>)</span>{ <span class="comment">// 里面的就是形参</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length); <span class="comment">// 形参长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 实参长度</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//   实际参数 实参</span></span><br><span class="line">test(实参<span class="number">1</span>,实参<span class="number">2</span>,实参<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><blockquote><ol><li>形参和实参数量可以不相等。  </li><li><span style="color:#f5871f;">arguments</span> 是一个对应于传递给函数的参数的<span style="color:#f5871f;">类数组对象</span>里面包含所有的实参!!!  </li><li>实参里面传了值的可以在函数内部修改实参的值，如果实参里面并没有传入值，也给形参赋值了，这样是没有用的。</li></ol></blockquote><h5 id="js实参求乘积"><a href="#js实参求乘积" class="headerlink" title="js实参求乘积"></a>js实参求乘积</h5><p>了解了什么实参和形参接下来就可以愉快的码代码了  </p><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i++){</span><br><span class="line">    a *= <span class="built_in">arguments</span>[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在解题之前我们先搞懂什么是js中的形参和实参？  &lt;/p&gt;
&lt;h5 id=&quot;js中的形参和实参&quot;&gt;&lt;a href=&quot;#js中的形参和实参&quot; class=&quot;headerlink&quot; title=&quot;js中的形参和实参&quot;&gt;&lt;/a&gt;js中的形参和实参&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
    
      <category term="js面试题" scheme="http://cokesprit.top/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码 和 UNICODE码</title>
    <link href="http://cokesprit.top/posts/504aee57/"/>
    <id>http://cokesprit.top/posts/504aee57/</id>
    <published>2020-07-19T02:18:33.000Z</published>
    <updated>2020-07-20T14:21:24.055Z</updated>
    
    <content type="html"><![CDATA[<p>ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  </p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p> 写一个函数，接收任意一个字符串，算出字符串的总字节数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBytes</span>(<span class="params">str</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> sth = str.length; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++){</span><br><span class="line">        <span class="keyword">var</span> stc = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span>(stc &gt; <span class="number">255</span>){ </span><br><span class="line">            sth++; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(getBytes(<span class="string">'Hello js，我们做好朋友吧！'</span>));</span><br></pre></td></tr></tbody></table></figure><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><p style="text-indent:2em;">先获取到字符串的长度,将其存入一个变量 sth ,然后利用循环判断编码是否大于 255 ,如果大于 sth++ 。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  &lt;/p&gt;
&lt;h4 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h4&gt;&lt;p&gt; 写一个
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客发布踩坑</title>
    <link href="http://cokesprit.top/posts/ffafe98e/"/>
    <id>http://cokesprit.top/posts/ffafe98e/</id>
    <published>2020-07-18T02:29:37.000Z</published>
    <updated>2020-07-18T05:22:43.353Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客 <strong>Username for ‘<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></strong> 验证问题<br>这时候 输入你的github邮箱账号 <span style="color:red;">（不是你的github名！！！）</span> 之后会弹出一个提示框 然后输入邮箱登录密码即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      hexo博客 **Username for &#39;https://github.com** 验证问题
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://cokesprit.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客文章发布部署</title>
    <link href="http://cokesprit.top/posts/c3259ce2/"/>
    <id>http://cokesprit.top/posts/c3259ce2/</id>
    <published>2020-06-19T11:56:52.930Z</published>
    <updated>2020-07-18T04:33:12.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre><code class="bash">$ hexo deploy</code></pre><p>作者：可乐精<br>链接：<a href="http://cokesprit.top/">CokeSprit</a><br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建新帖子&quot;&gt;&lt;a href=&quot;#创建新帖子&quot; class=&quot;headerlink&quot; title=&quot;创建新帖子&quot;&gt;&lt;/a&gt;创建新帖子&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://cokesprit.top/tags/hexo/"/>
    
  </entry>
  
</feed>
