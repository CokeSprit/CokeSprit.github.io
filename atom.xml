<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CokeSprit</title>
  <icon>https://www.gravatar.com/avatar/b765c05225fbf501f68a98a1395ba44b</icon>
  <subtitle>爱生活,爱编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cokesprit.top/"/>
  <updated>2020-08-21T08:26:31.638Z</updated>
  <id>http://cokesprit.top/</id>
  
  <author>
    <name>可乐精</name>
    <email>2665281140@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看似牛掰的对象拷贝</title>
    <link href="http://cokesprit.top/posts/c8cf727d/"/>
    <id>http://cokesprit.top/posts/c8cf727d/</id>
    <published>2020-08-21T01:30:01.000Z</published>
    <updated>2020-08-21T08:26:31.638Z</updated>
    
    <content type="html"><![CDATA[<p>对象拷贝分为浅拷贝和深拷贝也叫做克隆,拷贝对象的时候总会设计到引用值的问题，声明了一个新对象赋值了原来已有的对象,这个时候它们是指向同一个地址的。如果新对象变老对象也会变,老对象变新对象也会跟着变，这就造成了拷贝对象的一个困惑不仅仅是对象数组也是一样的。例如下面的例子:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = {</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = person1;</span><br><span class="line">person2.name = <span class="string">'李四'</span>;</span><br><span class="line">person2.sex = <span class="string">'male'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1,person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>知道问题之后我们接下来就来解决它</p><hr><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>对象的拷贝其实就是对引用值的拷贝/复制/克隆,最好的方法就是循环的添加到另一对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Object</span>.prototype.num = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> person1 = {</span><br><span class="line">     name:<span class="string">'张三'</span>,</span><br><span class="line">     age: <span class="number">18</span>,</span><br><span class="line">     sex: <span class="string">'male'</span>,</span><br><span class="line">     son:{</span><br><span class="line">         fitst:<span class="string">'Jenney'</span>,</span><br><span class="line">         second:<span class="string">'Lucy'</span>,</span><br><span class="line">         third:<span class="string">'Jone'</span></span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 这就是浅拷贝的方法使用 for in 来实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> target = target || {}</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin){</span><br><span class="line">         <span class="comment">//hasOwsProperty 如果对象具有指定名称的属性,则返回true，否则false。</span></span><br><span class="line">        <span class="keyword">if</span>(origin.hasOwnProperty(key)){ <span class="comment">//剔除原型上的属性</span></span><br><span class="line">            target[key] = origin[key]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = clone(person1);</span><br><span class="line">person2.name = <span class="string">'李沐子'</span>;</span><br><span class="line">person2.sex = <span class="string">'female'</span>;</span><br><span class="line">person2.son.forth = <span class="string">'Juck'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从运行结果看name和sex更改成功且不会影响到老对象但当增加son对象时,老对象还是会受到影响。<br><span class="s_red">总结:</span> 浅拷贝处理不了对象里面的引用值</p><hr><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>使用Object.prototype.toString.call 和 typeof进行深拷贝</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">// 深拷贝</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin,target</span>)</span>{</span><br><span class="line">     <span class="keyword">var</span> target = target || {},</span><br><span class="line">         toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">         arrType = <span class="string">'[object Array]'</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin){</span><br><span class="line">         <span class="comment">// 判断key到底是不是origin本身的或是原型上的属性</span></span><br><span class="line">         <span class="keyword">if</span>(origin.hasOwnProperty(key)){</span><br><span class="line">              <span class="comment">// 判断是不是引用值，并且不等于 null</span></span><br><span class="line">             <span class="keyword">if</span>(<span class="keyword">typeof</span>(origin[key]) === <span class="string">'object'</span> &amp;&amp; origin[key] !== <span class="literal">null</span>){</span><br><span class="line">                 <span class="comment">// 判断是对象还是数组</span></span><br><span class="line">                 <span class="keyword">if</span>(toStr.call(origin[key]) === arrType){</span><br><span class="line">                     target[key] = [];</span><br><span class="line">                 }<span class="keyword">else</span>{</span><br><span class="line">                     target[key] = {};</span><br><span class="line">                 }</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 然后递归</span></span><br><span class="line">                 deepClone(origin[key],target[key]);</span><br><span class="line"></span><br><span class="line">             }<span class="keyword">else</span>{</span><br><span class="line">                 <span class="comment">// 如果是原始值就直接赋值</span></span><br><span class="line">                 target[key] = origin[key];</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> target; <span class="comment">// 把新的target 返回出去</span></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.prototype.num = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> person1 = {</span><br><span class="line">     name:<span class="string">'张三'</span>,</span><br><span class="line">     age: <span class="number">18</span>,</span><br><span class="line">     sex: <span class="string">'male'</span>,</span><br><span class="line">     son:{</span><br><span class="line">         fitst:<span class="string">'Jenney'</span>,</span><br><span class="line">         second:<span class="string">'Lucy'</span>,</span><br><span class="line">         third:<span class="string">'Jone'</span></span><br><span class="line">     },</span><br><span class="line">     car:[<span class="string">'Benz'</span>,<span class="string">'Ferrari'</span>]</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = deepClone(person1);</span><br><span class="line">person2.name = <span class="string">'李四'</span>;</span><br><span class="line">person2.sex = <span class="string">'female'</span>;</span><br><span class="line">person2.son.forth = <span class="string">'Juck'</span>;</span><br><span class="line">person2.car.push(<span class="string">'Mazda'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">实现过程：</span></p><ol><li>使用for循环遍历剔除prototype上的自定义的属性/方法</li><li>在循环里面判断哪个是引用值和原始值并且不能是null</li><li>不是引用值就直接赋值，如果是引用值再使用Object.prototype.toString.call判断是对象或是数组。</li><li>如果是对象则target赋值一个空对象，否则就赋值一个空数组</li><li>然后使用递归 deepClone(origin[key],target[key])</li><li>最后把新的 target 返回出去</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象拷贝分为浅拷贝和深拷贝也叫做克隆,拷贝对象的时候总会设计到引用值的问题，声明了一个新对象赋值了原来已有的对象,这个时候它们是指向同一个地址的。如果新对象变老对象也会变,老对象变新对象也会跟着变，这就造成了拷贝对象的一个困惑不仅仅是对象数组也是一样的。例如下面的例子:&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>利用原型深度封装typeof方法</title>
    <link href="http://cokesprit.top/posts/1dce70fc/"/>
    <id>http://cokesprit.top/posts/1dce70fc/</id>
    <published>2020-08-19T10:02:10.000Z</published>
    <updated>2020-08-19T11:12:58.444Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中有时候我们需要判断属性的具体类型,而系统给的typeof不足以去判断属性的具体类型，我们需要利用原型来对typeof进行深度封装。<br>typeof返回值有：number string boolean object function undefined 以字符串的形式返回。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTypeof</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> type = <span class="keyword">typeof</span>(val); <span class="comment">// 使用typeof判断val的类型</span></span><br><span class="line">    <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="comment">// 存入结果集</span></span><br><span class="line">    <span class="keyword">var</span> res = {</span><br><span class="line">        <span class="string">'[object Array]'</span>:<span class="string">'array'</span>,</span><br><span class="line">        <span class="string">'[object Object]'</span>:<span class="string">'object'</span>,</span><br><span class="line">        <span class="string">'[object Number]'</span>:<span class="string">'object number'</span>,</span><br><span class="line">        <span class="string">'[object String]'</span>:<span class="string">'object string'</span>,</span><br><span class="line">        <span class="string">'[object Boolean]'</span>:<span class="string">'object boolean'</span>,</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(val === <span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'null'</span>;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'object'</span>){</span><br><span class="line">        <span class="comment">// 返回引用值的具体类型</span></span><br><span class="line">        <span class="keyword">var</span> ret = toStr.call(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res[ret];</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="string">'s'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="literal">true</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof({}));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof([]));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}));</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1dce70fc/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中有时候我们需要判断属性的具体类型,而系统给的typeof不足以去判断属性的具体类型，我们需要利用原型来对typeof进行深度封装。&lt;br&gt;typeof返回值有：number string boolean object function undefined 以字符串的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>烧脑的this指向问题</title>
    <link href="http://cokesprit.top/posts/2198d04d/"/>
    <id>http://cokesprit.top/posts/2198d04d/</id>
    <published>2020-08-19T03:11:39.000Z</published>
    <updated>2020-08-19T09:59:46.657Z</updated>
    
    <content type="html"><![CDATA[<p>对于很多的初学者this指向确实是一个让人比较头痛的问题，一般this指向分为几种情况:<br>1.在全局的时候<br>2.普通函数里面<br>3.构造函数的this指向<br>4.apply/call<br>下面我们就来举例说明以上情况的的this指向问题</p><hr><h4 id="在全局的时候"><a href="#在全局的时候" class="headerlink" title="在全局的时候"></a>在全局的时候</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.d); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.d);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从上面的运行结果可以看出二者输出的结果是相同的这样说明<span class="s_red">全局下的this -&gt; window</span></p><hr><h4 id="预编译函数-普通函数"><a href="#预编译函数-普通函数" class="headerlink" title="预编译函数(普通函数)"></a>预编译函数(普通函数)</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">b</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.d = <span class="number">8</span>; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">test(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.d);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.d);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>查看运行结果发现它们的结果是一样的这就说明,<span class="s_red">在普通函数的内部只要没有实例化这个函数的this是默认指向window的。</span></p><hr><h4 id="构造函数内部"><a href="#构造函数内部" class="headerlink" title="构造函数内部"></a>构造函数内部</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'niming'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 预编译期的过程</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     Test:function test(){...}</span></span><br><span class="line">    <span class="comment">//     test:{}</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     // 前面我们说了普通函数没new之前 this -&gt; window</span></span><br><span class="line">    <span class="comment">//     this: window,</span></span><br><span class="line">    <span class="comment">//          当 new 的时候之前的 this 被覆盖</span></span><br><span class="line">    <span class="comment">//          this:{</span></span><br><span class="line">    <span class="comment">//              name:'123',</span></span><br><span class="line">    <span class="comment">//              __proto__:Test.prototype</span></span><br><span class="line">    <span class="comment">//          } </span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>当预编译的时候 this -&gt; window,当 new 之前GO就已经把保存了 Test:function test(){…} 然后再保存 test:{},但是 new（AO开始） 的时候 Test构造函数内部隐式的 var 了一个</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> = {</span><br><span class="line">    name:<span class="string">'123'</span>,</span><br><span class="line">    \_\_proto\_\_:Test.prototype</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并且覆盖了之前指向window的this,最后系统隐式的把这个新的this返回了出去被全局下的test接收到,从这里我没可以总结出来<span class="s_red">构造函数的this指向实例化对象</span></p><hr><h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call/apply的作用是this指向</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// Person使用了apply, 当Programmer实例化之后Personn内部属性变成</span></span><br><span class="line">            <span class="comment">// p.name = "张三";</span></span><br><span class="line">            <span class="comment">// p.age = 18;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line">        Person.apply(<span class="keyword">this</span>,[name,age]);</span><br><span class="line">        <span class="keyword">this</span>.work = <span class="string">'Programming'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Programmer(<span class="string">'张三'</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p)</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为Person使用了apply把自身构造函数内部的指this指向变成Programmer的实例化对象 p，所以打印p的时候 p 也有Person构造函数的属性。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>全局this -&gt; window<br>预编译函数（普通函数）this -&gt; window<br>构造函数的this指向实例化对象<br>apply/call改变this指向</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于很多的初学者this指向确实是一个让人比较头痛的问题，一般this指向分为几种情况:&lt;br&gt;1.在全局的时候&lt;br&gt;2.普通函数里面&lt;br&gt;3.构造函数的this指向&lt;br&gt;4.apply/call&lt;br&gt;下面我们就来举例说明以上情况的的this指向问题&lt;/p&gt;
&lt;hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>英语语法上</title>
    <link href="http://cokesprit.top/posts/9416cc31/"/>
    <id>http://cokesprit.top/posts/9416cc31/</id>
    <published>2020-08-18T13:41:25.000Z</published>
    <updated>2020-08-18T13:45:40.692Z</updated>
    
    <content type="html"><![CDATA[<p>课程设置<br>    #### 一、简单句<br>    #### 二、并列句<br>    #### 三、从句<br>    ##### 名词性从句<br>    ##### 定语和定语从句<br>    ##### 状语和状语从句</p><h4 id="一、简单句"><a href="#一、简单句" class="headerlink" title="一、简单句"></a>一、简单句</h4><h5 id="what-is-简单句？"><a href="#what-is-简单句？" class="headerlink" title="what is 简单句？"></a>what is 简单句？</h5><p>英语的句子必须具备主谓结构,并且主语一定是谓语动作的发出者如果有宾语的话宾语一定是谓语动作的承受者。</p><p><span class="s_green">试译：</span>我的英语说的很好;<br>主：我<br>谓：说<br>宾：英语<br>I speak English every well.</p><!-- 先找到谓语 !!! --><p><span class="s_green">试译：</span>我家住在玉林<br>谓：住<br>主：我<br>I live in Yuli <!-- 英语不一定要字字对应 --></p><p><span class="s_green">试译</span>：我要去剪头<br>主：一个理发师<br>谓：剪<br>宾：我的头发</p><!-- 动作谁发出谁充当主语 --><p>A barber will cut my hair.<br>解析:这句话中我不能充当，因为动作的发出者不是我，动作的发出者是理发师所以理发师是主语</p><hr><h5 id="简单句的分类"><a href="#简单句的分类" class="headerlink" title="简单句的分类"></a>简单句的分类</h5><p>1.主谓<br>2.主谓宾<br>3.主谓表<br>4.主谓双宾<br>5.主谓宾宾补</p><h6 id="主谓结构"><a href="#主谓结构" class="headerlink" title="主谓结构"></a>主谓结构</h6><p>He died.    We laugh(ed).</p><h6 id="主谓宾"><a href="#主谓宾" class="headerlink" title="主谓宾"></a>主谓宾</h6><p><span class="s_green">谓语：</span>实意动词</p><h6 id="主系表"><a href="#主系表" class="headerlink" title="主系表"></a>主系表</h6><p><span class="s_green">谓语：</span>系动词<br>1.be<br>2.感官动词：look smell sound taste feel;<br>3.变化: become get<br>4.保持: keep stay remain  </p><p>上面所出现的都是主谓表结构，以外的都是主谓宾结构。</p><h6 id="主谓双宾"><a href="#主谓双宾" class="headerlink" title="主谓双宾"></a>主谓双宾</h6><p>I bought <span class="s_red">him</span> a <span class="s_red">dog</span><br><span calss="s_red">说明：双宾就是两个宾语你是你我是我</span></p><p>主谓双宾和主谓宾宾补的区别就在于：需要在两</p><h6 id="主谓宾宾补"><a href="#主谓宾宾补" class="headerlink" title="主谓宾宾补"></a>主谓宾宾补</h6><p><span calss="s_red">说明：</span>宾补就是后面的那个单词对前面的那个单词的补充说明</p><p><mark>主谓双宾和主谓宾宾补的区别:</mark>只需要在两个宾语之间加一个be动词，如果读起来意思是不对的就是主谓双宾，如果读起来意思是对的就是主谓宾宾补。</p><p><span class="s_green">练习:</span><br>We elect him our monitor.<br><span class="s_green">解题：</span>在 him 和 our monitor之间加上be动词 变成 –&gt; We elect him is our monitor. 意思是对的所以是主谓宾宾补</p><h5 id="句子的成分"><a href="#句子的成分" class="headerlink" title="句子的成分"></a>句子的成分</h5><h4 id="二、并列句"><a href="#二、并列句" class="headerlink" title="二、并列句"></a>二、并列句</h4><h4 id="三、从句"><a href="#三、从句" class="headerlink" title="三、从句"></a>三、从句</h4><h5 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h5><h5 id="定语和定语从句"><a href="#定语和定语从句" class="headerlink" title="定语和定语从句"></a>定语和定语从句</h5><h5 id="状语和状语从句"><a href="#状语和状语从句" class="headerlink" title="状语和状语从句"></a>状语和状语从句</h5><!--    听完课之后达到的水平,从此以后写作文不会烦再一个单词的错误,    从今以后写作文不会烦一个语法的错误,一句话想写多长就写多长,    想写多短就写多短。 --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;课程设置&lt;br&gt;    #### 一、简单句&lt;br&gt;    #### 二、并列句&lt;br&gt;    #### 三、从句&lt;br&gt;    ##### 名词性从句&lt;br&gt;    ##### 定语和定语从句&lt;br&gt;    ##### 状语和状语从句&lt;/p&gt;
&lt;h4 id=&quot;一、简单句&quot;
      
    
    </summary>
    
    
    
      <category term="英语" scheme="http://cokesprit.top/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Object.prototype.toString</title>
    <link href="http://cokesprit.top/posts/dc56b3a9/"/>
    <id>http://cokesprit.top/posts/dc56b3a9/</id>
    <published>2020-08-18T10:10:59.000Z</published>
    <updated>2020-08-18T10:14:15.064Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时都是toString()但打印出来的东西是不一样</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call({<span class="attr">name</span>:<span class="string">'张三'</span>}));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>.prototype.toString.call(<span class="number">1</span>));</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/dc56b3a9/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>判断是否是数组的三种方法</title>
    <link href="http://cokesprit.top/posts/7a59e1cc/"/>
    <id>http://cokesprit.top/posts/7a59e1cc/</id>
    <published>2020-08-18T09:13:23.000Z</published>
    <updated>2020-08-18T12:43:53.717Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中后端传过来的数据有可能是 null、对象、Array,有时候我们需要判断传回来是不是数组。</p><hr><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>使用 constructor</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="built_in">console</span>.log(a.constructor); <span class="comment">//ƒ Array() { [native code] }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>使用 instanceof 判断该对象是否是该构造函数构造出来的,是返回ture，否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello word"</span>; </span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><p>使用call和Object原型下的toString方法来进行判断。推荐使用这种！！！</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 Object原型下的toString方法赋给 str</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> trueTip = <span class="string">'[object Array]'</span>;</span><br><span class="line"><span class="comment">// 然后利用call指向a</span></span><br><span class="line"><span class="keyword">if</span>(str.call(a) === trueTip){</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'是数组'</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不是数组'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行分析</span></span><br><span class="line">    <span class="comment">// Object.prototype = {</span></span><br><span class="line">    <span class="comment">//     toString:function(){</span></span><br><span class="line">    <span class="comment">//         // 没call 之前</span></span><br><span class="line">    <span class="comment">//             this.toString();</span></span><br><span class="line">    <span class="comment">//         // call 以后更改 this 指向 -&gt; a</span></span><br><span class="line">    <span class="comment">//             a.toString();</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中后端传过来的数据有可能是 null、对象、Array,有时候我们需要判断传回来是不是数组。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;第一种&quot;&gt;&lt;a href=&quot;#第一种&quot; class=&quot;headerlink&quot; title=&quot;第一种&quot;&gt;&lt;/a&gt;第一种&lt;/h4&gt;&lt;p&gt;使用 c
      
    
    </summary>
    
    
    
      <category term="数组" scheme="http://cokesprit.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>企业模块化开发</title>
    <link href="http://cokesprit.top/posts/adbaaf4/"/>
    <id>http://cokesprit.top/posts/adbaaf4/</id>
    <published>2020-08-18T08:23:21.000Z</published>
    <updated>2020-08-18T12:44:18.392Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的时候往往需要写很多功能模块,为了更好的协作开发需要采用模块化开发的方式,把这些功能分一个一个的分开来写最后汇总到一个大模块里。</p><hr><h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三步</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">    initCompute();</span><br><span class="line">    initFunctions();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">    <span class="comment">// 功能一</span></span><br><span class="line">initCompute = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>,</span><br><span class="line">        b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a - b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a * b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a / b);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        add();</span><br><span class="line">        minus();</span><br><span class="line">        mul();</span><br><span class="line">        div();</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">    <span class="comment">// 功能二 </span></span><br><span class="line"><span class="keyword">var</span> initFunctions = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>把功能全部封装到各自的自启动函数里面，然后分别赋给initCompute 和 initFunctions，再把他们放到一个总的init里面,最后再放到window.onload里面执行。</p><hr><h4 id="模块化练习"><a href="#模块化练习" class="headerlink" title="模块化练习"></a>模块化练习</h4><p>使用模块化开发的实现两个功能:<br>1.求n的斐波拉契数列<br>2.输入一个数n求有打印那些可以被3获被5获被7获整除的数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把每个模块放到init里面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(initFb(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(initDiv(<span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 斐波拉契数列</span></span><br><span class="line"><span class="keyword">var</span> initFb = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> fb(n<span class="number">-1</span>) + fb(n<span class="number">-2</span>); </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fb;</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被3或被5或被7或整除</span></span><br><span class="line"><span class="keyword">var</span> initDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= n; i++){</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">5</span> === <span class="number">0</span> || i % <span class="number">7</span> === <span class="number">0</span>){</span><br><span class="line">                arr.push(i);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> div; </span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/adbaaf4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发的时候往往需要写很多功能模块,为了更好的协作开发需要采用模块化开发的方式,把这些功能分一个一个的分开来写最后汇总到一个大模块里。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;模块化开发&quot;&gt;&lt;a href=&quot;#模块化开发&quot; class=&quot;headerlink&quot; title=&quot;模块
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型继承之圣杯模式</title>
    <link href="http://cokesprit.top/posts/98829262/"/>
    <id>http://cokesprit.top/posts/98829262/</id>
    <published>2020-08-17T11:27:04.000Z</published>
    <updated>2020-08-18T04:15:33.780Z</updated>
    
    <content type="html"><![CDATA[<p>之前的那几种方案都不太尽人意,在解决继承,有专门的企业即解决方案圣杯模式。</p><hr><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Li'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Teacher.prototype = {</span><br><span class="line">    pSkill: <span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Wang'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓冲区介于 Teacher 和 Student之间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Buffer</span>(<span class="params"></span>)</span>{}</span><br><span class="line">Buffer.prototype = Teacher.prototype;</span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line"><span class="comment">// Buffer 实例化出来之后没有属性和方法,</span></span><br><span class="line"><span class="comment">// 但是它有Teacher.prototype</span></span><br><span class="line"><span class="comment">// 然后把实例化对象buffer赋给Student.prototype</span></span><br><span class="line"></span><br><span class="line">Student.prototype = buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样Student实例化出来的对象就能访问Buffer.prototype</span></span><br><span class="line"><span class="comment">// 也能访问到Teacher.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是圣杯模式完美解决了继承和隔离的问题。</span></span><br><span class="line">Student.prototype.age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/98829262/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="圣杯模式封装"><a href="#圣杯模式封装" class="headerlink" title="圣杯模式封装"></a>圣杯模式封装</h4><p>为了方便使用我们把它封装起来,这样我们需要的时候直接调用就行了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圣杯模式之封装</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Buffer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>{</span><br><span class="line">        Buffer.prototype =  Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> Buffer();</span><br><span class="line">        <span class="comment">// 为了还原构造器,把Target构造器重新指向 Student</span></span><br><span class="line">        Target.prototype.constructor  = Target;</span><br><span class="line">        <span class="comment">// 继承源</span></span><br><span class="line">        Target.prototype.super_class = Origin; </span><br><span class="line">    }</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>企业级的解决方案  -&gt; 这是雅虎当年在 YUI3 里面封装的一个方法,虽然 YUI3 已经不在了但是这个方法被留存了下来。</p><hr><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>写一个程序员的构造函数，然后再写各写一个前端程序员和后端程序员的构造函数,并且这两个构造函数继承程序员这个构造函数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 实现继承的方法</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Buffer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{};</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>{</span><br><span class="line">        Buffer.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> Buffer();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.super_class = Origin;</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 采用模块化开发方式</span></span><br><span class="line"><span class="keyword">var</span> initProgrammer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Programmer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把一些很少更改的属性和方法写到原型上</span></span><br><span class="line">    Programmer.prototype = {</span><br><span class="line">        name:<span class="string">'程序员'</span>,</span><br><span class="line">        tool:<span class="string">'计算机'</span>,</span><br><span class="line">        work:<span class="string">'编写应用程序'</span>,</span><br><span class="line">        duration:<span class="string">'10个小时'</span>,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我是一名'</span> + <span class="keyword">this</span>.myName + <span class="keyword">this</span>.name + </span><br><span class="line">            <span class="string">"我的工作用到"</span> + <span class="keyword">this</span>.tool + <span class="keyword">this</span>.work +</span><br><span class="line">             <span class="string">",我每天工作"</span> + <span class="keyword">this</span>.duration + </span><br><span class="line">             <span class="string">" ，我的工作需要用到："</span> + <span class="keyword">this</span>.lang.toString() + <span class="string">"。"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FrondEnd</span>(<span class="params"></span>)</span>{} <span class="comment">// 前端工程师</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BackEnd</span>(<span class="params"></span>)</span>{} <span class="comment">// 后端工程师</span></span><br><span class="line"></span><br><span class="line">    inherit(FrondEnd,Programmer); <span class="comment">// 使用 inherit 实现继承</span></span><br><span class="line">    inherit(BackEnd,Programmer); </span><br><span class="line"></span><br><span class="line">    FrondEnd.prototype.lang = [<span class="string">'HTML'</span>,<span class="string">'CSS'</span>,<span class="string">'JavaScript'</span>];</span><br><span class="line">    FrondEnd.prototype.myName = <span class="string">'前端'</span>;</span><br><span class="line">    </span><br><span class="line">    BackEnd.prototype.lang = [<span class="string">'Node'</span>,<span class="string">'Java'</span>,<span class="string">'SQL'</span>];</span><br><span class="line">    BackEnd.prototype.myName = <span class="string">'后端'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把它们写在一个对象里面返回出去</span></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        FrondEnd:FrondEnd,</span><br><span class="line">        BackEnd:BackEnd</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line">    <span class="keyword">var</span> frondEnd = <span class="keyword">new</span> initProgrammer.FrondEnd();</span><br><span class="line">    <span class="keyword">var</span> backEnd = <span class="keyword">new</span> initProgrammer.BackEnd();</span><br><span class="line">    frondEnd.say();</span><br><span class="line">    backEnd.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/98829262/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的那几种方案都不太尽人意,在解决继承,有专门的企业即解决方案圣杯模式。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;圣杯模式&quot;&gt;&lt;a href=&quot;#圣杯模式&quot; class=&quot;headerlink&quot; title=&quot;圣杯模式&quot;&gt;&lt;/a&gt;圣杯模式&lt;/h4&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>公共原型继承</title>
    <link href="http://cokesprit.top/posts/8f490e5b/"/>
    <id>http://cokesprit.top/posts/8f490e5b/</id>
    <published>2020-08-17T10:15:36.000Z</published>
    <updated>2020-08-17T11:27:13.435Z</updated>
    
    <content type="html"><![CDATA[<p>使用call/apply这种方法也不尽人意,我在想我这样写行不行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name =<span class="string">'Mr. Li'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Teacher.prototype = {</span><br><span class="line">    pSkill:<span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Wang'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> Student.prototype = Teacher.prototype; </span><br><span class="line"> Student.prototype.age = <span class="number">18</span>;</span><br><span class="line"> <span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(s);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8f490e5b/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">把 Teacher 的原型赋给 Student 的原型，这样的话 Stduent 下的属性也可以拥有而且还可以拥有 Teacher 原型的下属性,并且没有继承Teahcer下的一些属性我们不需要的属性。</p><p>问题：这种方式也有一点不好的就是如果向 Student.prototype 增加属性和方法的时候也会添加的 Teacher.prototype 里面。因为它们两个指向同一个地址。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用call/apply这种方法也不尽人意,我在想我这样写行不行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>借助call或apply实现继承</title>
    <link href="http://cokesprit.top/posts/18be6742/"/>
    <id>http://cokesprit.top/posts/18be6742/</id>
    <published>2020-08-17T09:50:13.000Z</published>
    <updated>2020-08-17T10:14:03.026Z</updated>
    
    <content type="html"><![CDATA[<p>上篇使用原型链的方式来继承并不是很科学,像老鼠的名字就没有必要继承。这次我们使用call/apply实现继承。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call/apply</span></span><br><span class="line">Teacher.prototype.wife = <span class="string">'Ms. Min'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.mSkill = mSkill;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,mSkill,age,major</span>)</span>{</span><br><span class="line">    Teacher.apply(<span class="keyword">this</span>,[name,mSkill]);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.major = major;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Mr. Li'</span>,<span class="string">'JS/JQ/'</span>,<span class="number">18</span>,<span class="string">'Computer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br><span class="line"><span class="built_in">console</span>.log(student.wife); <span class="comment">// 访问不到Teacher.prototype下的属性</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/18be6742/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>问题：这种方式不太像继承,叫借用更加贴切,而且这种方式访问不到Teacher.prototype,这种方式也不太理想。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇使用原型链的方式来继承并不是很科学,像老鼠的名字就没有必要继承。这次我们使用call/apply实现继承。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型链继承</title>
    <link href="http://cokesprit.top/posts/31601a23/"/>
    <id>http://cokesprit.top/posts/31601a23/</id>
    <published>2020-08-17T09:05:42.000Z</published>
    <updated>2020-08-17T09:52:05.759Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    Professor.prototype = {</span><br><span class="line">        name:<span class="string">'Mr. Li'</span>,</span><br><span class="line">        tSkill:<span class="string">'JAVA'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Professor</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> professor = <span class="keyword">new</span> Professor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------分割线-----------------</span></span><br><span class="line">    <span class="comment">// 把professor实例对象赋给 Teacher.prototype </span></span><br><span class="line">    Teacher.prototype = professor;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Mr. Mi'</span>;</span><br><span class="line">        <span class="keyword">this</span>.mSkill = <span class="string">'JS/Jq'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------分割线-----------------</span></span><br><span class="line">    <span class="comment">// 把 teacher实例对象赋给Student.prototype</span></span><br><span class="line">    Student.prototype = teacher; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Mr. Xiao'</span>;</span><br><span class="line">        <span class="keyword">this</span>.pSkill = <span class="string">'HTML/CSS'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="built_in">console</span>.log(student);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/31601a23/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">student 现在这个对象继承了 Teacher 上所有属性和 Teacher 原型上的属性,也继承了 Professor 原型上的属性。</p>总结：最下面的对象继承了上面原型链上的所有属性，这就是原型链继承。<p>问题：学生身上是否需要继承Teacher 和 Professor 上所有的属性或者原型上的属性?不需要,所以继承方案还不是特别理想。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>插件化编程开发初探</title>
    <link href="http://cokesprit.top/posts/e0979614/"/>
    <id>http://cokesprit.top/posts/e0979614/</id>
    <published>2020-08-15T08:35:01.000Z</published>
    <updated>2020-08-15T08:48:19.721Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS插件的写法"><a href="#JS插件的写法" class="headerlink" title="JS插件的写法"></a>JS插件的写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS 插件的写法</span></span><br><span class="line">    <span class="comment">// 立即执行函数 -&gt; 防止变量污染 -&gt; 为了隔离全局作用域</span></span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开发中方法基本上都是写在原型上的</span></span><br><span class="line">        <span class="comment">// 很少更改的东西也可以写到原型上</span></span><br><span class="line">        Test.prototype = {</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.Test = Test; <span class="comment">// 挂到window上</span></span><br><span class="line">    })();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">new</span> Test();</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传两个数字实现加减乘除的插件</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Compute = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Compute.prototype = {</span><br><span class="line">        plus:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        },</span><br><span class="line">        minus:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        },</span><br><span class="line">        mul:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        },</span><br><span class="line">        div:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a / b;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Comput = Compute;</span><br><span class="line">    </span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comput = <span class="keyword">new</span> Comput();</span><br><span class="line"><span class="keyword">var</span> res = comput.div(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS插件的写法&quot;&gt;&lt;a href=&quot;#JS插件的写法&quot; class=&quot;headerlink&quot; title=&quot;JS插件的写法&quot;&gt;&lt;/a&gt;JS插件的写法&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Object.create</title>
    <link href="http://cokesprit.top/posts/3837d091/"/>
    <id>http://cokesprit.top/posts/3837d091/</id>
    <published>2020-08-15T07:25:21.000Z</published>
    <updated>2020-08-15T08:28:18.824Z</updated>
    
    <content type="html"><![CDATA[<p>Obcet.create():创建对象,提供一个自定义原型的功能,参数是对象或者null。</p><hr><h4 id="参数是null时"><a href="#参数是null时" class="headerlink" title="参数是null时"></a>参数是null时</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = Objcet.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// {}</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3837d091/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结:Object.create(null);创建的对象是没有原型的。</p><hr><h4 id="参数是对象时"><a href="#参数是对象时" class="headerlink" title="参数是对象时"></a>参数是对象时</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = {</span><br><span class="line">    num:<span class="number">2</span>,</span><br><span class="line">    say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'今天天气真好'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">Obj.prototype.num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Obj();</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Object.create自定义原型</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(test); </span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line">obj2.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3837d091/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结：Object.create 可以把其他的对象作为原型,形成一个祖先与后代的关系。使用Object.create()实现继承会更优雅一些。</p><hr><h4 id="面试-笔试"><a href="#面试-笔试" class="headerlink" title="面试/笔试"></a>面试/笔试</h4><p>不是所有的对象都继承于Object.prototype:<br><mark>Object.create(null)</mark>创建出来的对象没有原型所以<mark>不继承</mark>于Object.prototype</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Obcet.create():创建对象,提供一个自定义原型的功能,参数是对象或者null。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;参数是null时&quot;&gt;&lt;a href=&quot;#参数是null时&quot; class=&quot;headerlink&quot; title=&quot;参数是null时&quot;&gt;&lt;/a&gt;参数是n
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="http://cokesprit.top/posts/bf8cf30/"/>
    <id>http://cokesprit.top/posts/bf8cf30/</id>
    <published>2020-08-14T09:15:54.000Z</published>
    <updated>2020-08-15T07:24:15.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><mark>原型链：</mark>沿着__proto__去找原型里的属性,一层一层的去继承原型的属性所形成的链条,我们我做原型链。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Professor.prototype.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Professor</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> professor = <span class="keyword">new</span> Professor();</span><br><span class="line"></span><br><span class="line">Teacher.prototype = professor;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.mSkill = <span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">Student.prototype = teacher;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.pSkill = <span class="string">'HTML/CSS'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/bf8cf30/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>我没有的属性我到我的原型上找,如果没有就一直往上找,这样就形成了一条链条。</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>所有的对象都有原型,包括原型的本身<br>原型的顶端是<mark>Object.prototype</mark>!!!<br>原型链上面的增删改只能是它自己本身!!!<br>原型的原型是由系统自带的Object构造出来的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;原型链：&lt;/mark&gt;沿着__proto__去找原型里的属性,一层一层的去继承原型的属性所形成的链条,我们我做原型链。&lt;
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型</title>
    <link href="http://cokesprit.top/posts/263f3be4/"/>
    <id>http://cokesprit.top/posts/263f3be4/</id>
    <published>2020-08-14T01:49:21.000Z</published>
    <updated>2020-08-14T09:56:28.190Z</updated>
    
    <content type="html"><![CDATA[<p>原型涉及到构造函数和实例化对象,原型是在构造函数之上的,它也是构造函数的一个属性。</p><h4 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a>prototype和__proto__</h4><p><mark>prototype:</mark>原型构造函数上的一个属性,只不过这个属性是一个对象而已</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Handphone.prototype.rom = <span class="string">'64'</span>;</span><br><span class="line">Handphone.prototype.ram = <span class="string">'6G'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hp1 = <span class="keyword">new</span> Handphone(<span class="string">'黑色'</span>,<span class="string">'小米'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Handphone.prototype); <span class="comment">// 打印出来是一个对象</span></span><br><span class="line"><span class="comment">// 原型prototype其实是function对象的一个属性</span></span><br><span class="line"><span class="comment">// 这个prototype是构造函数构造出来的每一个对象的公共祖先</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hp1.rom); <span class="comment">// 64</span></span><br><span class="line"><span class="comment">// 所有被构造函数构造出来的对象都可以继承原型上的属性和方法</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><mark>constructor</mark></h5><p>prototype原型的一个属性,指向构造函数本身</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand,system</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(Handphone.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>既然 constructor 指向的构造函数本身那我们来尝试一下让它指向其他的构造函数看可不可以</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Telephone</span>(<span class="params">color,brand,system</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.brand = brnad;</span><br><span class="line">    <span class="keyword">this</span>.system = system;</span><br><span class="line">}</span><br><span class="line">Handphone.prototype = {</span><br><span class="line">    <span class="comment">// 让constructor指向另一个构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>:Telephone</span><br><span class="line">}</span><br><span class="line">console.log(Handphone.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果: constructor可以指向其他构造函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h4><p><mark>__proto__:</mark> 每一个实例化对象的原型容器,它就是装prototype的</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Car.prototype = {</span><br><span class="line">    color:<span class="string">'白色'</span>,</span><br><span class="line">    brand:<span class="string">'benz'</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 当构造函数实例化的时候</span></span><br><span class="line">        <span class="comment">// 隐式的进行</span></span><br><span class="line">        <span class="comment">// var this = {</span></span><br><span class="line">        <span class="comment">//     __proto__: Car.prototype = {</span></span><br><span class="line">        <span class="comment">//         color:'白色',</span></span><br><span class="line">        <span class="comment">//         brand:'benz'</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="built_in">console</span>.log(car.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(Car.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>1.通过实例化对象更改自己的祖先是不行的<br>2.所有被该构造函数构造出的对象都可以继承原型上的属性和方法<br>3.prototype里面的constructor可以修改<br>4.constructor 保存的是实例化之前的东西</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型涉及到构造函数和实例化对象,原型是在构造函数之上的,它也是构造函数的一个属性。&lt;/p&gt;
&lt;h4 id=&quot;prototype和-proto&quot;&gt;&lt;a href=&quot;#prototype和-proto&quot; class=&quot;headerlink&quot; title=&quot;prototype和_
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="http://cokesprit.top/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>instanceof</title>
    <link href="http://cokesprit.top/posts/instanceof/"/>
    <id>http://cokesprit.top/posts/instanceof/</id>
    <published>2020-08-11T09:12:18.000Z</published>
    <updated>2020-08-18T10:15:34.668Z</updated>
    
    <content type="html"><![CDATA[<p><mark>instanceof </mark> 判断该对象是否是该构造函数构造出来的,是返回true不是返回false。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{}</span><br><span class="line"> <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>{}</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Car); <span class="comment">// false</span></span><br><span class="line"> <span class="built_in">console</span>.log(car <span class="keyword">instanceof</span> Car); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(car <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> Aarry); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">     <span class="built_in">console</span>.log({} <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">      <span class="built_in">console</span>.log({} <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p>总结：A对象的原型到底有没有B的原型,有的话就是 true,没有就是false。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;mark&gt;instanceof &lt;/mark&gt; 判断该对象是否是该构造函数构造出来的,是返回true不是返回false。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>in</title>
    <link href="http://cokesprit.top/posts/5fec8e4e/"/>
    <id>http://cokesprit.top/posts/5fec8e4e/</id>
    <published>2020-08-11T08:58:35.000Z</published>
    <updated>2020-08-11T09:25:31.396Z</updated>
    
    <content type="html"><![CDATA[<p><makr>in</makr> 判断属性是否存在对象里。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Benz'</span>,</span><br><span class="line">    color:<span class="string">'white'</span></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// car对象不存在 displacement</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'displacement'</span> <span class="keyword">in</span>  car); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><hr><p>in 不排除原型上自定义的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Benz'</span>,</span><br><span class="line">    color:<span class="string">'white'</span></span><br><span class="line">}</span><br><span class="line">Car.prototype = {</span><br><span class="line">    displacement: <span class="string">'3.5'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'displacement'</span> <span class="keyword">in</span> car); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;makr&gt;in&lt;/makr&gt; 判断属性是否存在对象里。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hasOwnProperty</title>
    <link href="http://cokesprit.top/posts/hasOwnProperty/"/>
    <id>http://cokesprit.top/posts/hasOwnProperty/</id>
    <published>2020-08-11T02:02:08.000Z</published>
    <updated>2020-08-11T09:26:15.495Z</updated>
    
    <content type="html"><![CDATA[<p><mark>hasOwnProperty()</mark>如果对象具有指定名称的属性，则返回turn否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = <span class="string">'farrari'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'red'</span>;</span><br><span class="line">    <span class="keyword">this</span>.displacement = <span class="string">'6.0'</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> Car.prototype = {</span><br><span class="line">     lang:<span class="number">5</span>,</span><br><span class="line">     width:<span class="number">2.5</span></span><br><span class="line"> }</span><br><span class="line"> <span class="built_in">Object</span>.prototype.name = <span class="string">'Object'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'第一次打印'</span>)</span><br><span class="line"> <span class="comment">// 连Car.prototype 和 Object.prototype 上自定义的属性都打印出来了 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line">     <span class="built_in">console</span>.log(key + <span class="string">' : '</span>+car[key]);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'使用了hasOwnProperty()方法之后'</span>)</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line">        <span class="keyword">if</span>(car.hasOwnProperty(key)){ </span><br><span class="line">             <span class="built_in">console</span>.log(car[key]);</span><br><span class="line">        }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/hasOwnProperty/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结：hasOwnproperty()主要用来找对象自身的属性,排除原型上自定义的属性</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;mark&gt;hasOwnProperty()&lt;/mark&gt;如果对象具有指定名称的属性，则返回turn否则返回false&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="http://cokesprit.top/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>对象枚举</title>
    <link href="http://cokesprit.top/posts/1313d393/"/>
    <id>http://cokesprit.top/posts/1313d393/</id>
    <published>2020-08-11T01:39:31.000Z</published>
    <updated>2020-08-11T01:59:53.632Z</updated>
    
    <content type="html"><![CDATA[<p>其实JavaScript并没有真正意义上的枚举,在 JavaScript 中有遍历就是有枚举。</p><hr><p>对象的遍历使用 for…in</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 for...in </span></span><br><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Ferrari'</span>,</span><br><span class="line">    color:<span class="string">'red'</span>,</span><br><span class="line">    displacement:<span class="string">'6.0'</span>,</span><br><span class="line">    lang:<span class="string">'5.5'</span>,</span><br><span class="line">    width:<span class="string">'2.5'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  重点！！！</span></span><br><span class="line">    <span class="comment">// console.log(car.key);  // 为什么打印 undefined？</span></span><br><span class="line">    <span class="comment">// 因为 js 处理的时候是：car.key -&gt; car['key'] -&gt; undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + car[key]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1313d393/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><p>数组是特殊的对象它也可以使用for…in来遍历</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr){</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1313d393/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实JavaScript并没有真正意义上的枚举,在 JavaScript 中有遍历就是有枚举。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对象的遍历使用 for…in&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="http://cokesprit.top/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>包装类</title>
    <link href="http://cokesprit.top/posts/52c58cb2/"/>
    <id>http://cokesprit.top/posts/52c58cb2/</id>
    <published>2020-08-10T00:40:22.000Z</published>
    <updated>2020-08-10T01:58:50.519Z</updated>
    
    <content type="html"><![CDATA[<p>原始值没有自己的方法和属性！！！<br>原始类型：Number、String、Boolean、Undefined、Null<br>引用类型：Object、Function、Aarry、Date、RegExp</p><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a.len = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//a.len的时候系统转化成 ↓ </span></span><br><span class="line">    <span class="comment">// new Number(1).len = 3; new 前面没有东西接收,</span></span><br><span class="line">    <span class="comment">// 只能 delete 掉,所有打印 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a.len); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候我们就用到了包装类 </span></span><br><span class="line"><span class="comment">// 变成实例化数字对象就可以有自己的属性和方法了</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</span><br><span class="line">aa.len = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.len); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过 new Number 包装了之后再参与运算又会返回原始值</span></span><br><span class="line"><span class="keyword">var</span> d = aa + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 像这种经过包装了之后再返回原始值的有三种</span></span><br><span class="line">    <span class="comment">// new Number   new String    new Boolean</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/52c58cb2/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>上面我们说了原始值是没有方法和属性的那下面这个又是怎么回事呢？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这又是怎么回事呢？</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统帮我做了如下的包装 ↓</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">String</span>(str).length; </span><br><span class="line">    <span class="comment">// String 是有length这个属性的,所以可以通过这样的包装来访问到String里面独有的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其实系统打印的是</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(str).length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 面试如果别人问你字符串有没有 length 属性？</span></span><br><span class="line">    <span class="comment">//记住字符串没有 length 属性 中间是经过了一层包装类</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/52c58cb2/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原始值没有自己的方法和属性！！！&lt;br&gt;原始类型：Number、String、Boolean、Undefined、Null&lt;br&gt;引用类型：Object、Function、Aarry、Date、RegExp&lt;/p&gt;
&lt;h4 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; c
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="http://cokesprit.top/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>构造函数实例化的原理</title>
    <link href="http://cokesprit.top/posts/constructor/"/>
    <id>http://cokesprit.top/posts/constructor/</id>
    <published>2020-08-06T03:10:47.000Z</published>
    <updated>2020-08-06T08:46:34.419Z</updated>
    
    <content type="html"><![CDATA[<p>下面是构造函数实现实例化的原理,涉及到预编译、AO、GO、对象等知识</p><h4 id="构造函数实例化的原理"><a href="#构造函数实例化的原理" class="headerlink" title="构造函数实例化的原理"></a>构造函数实例化的原理</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">        <span class="comment">// 第一步：系统会保存一个空的this对象 </span></span><br><span class="line">            <span class="comment">// this = {}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：系统将属性和方法写到 this 对象里面</span></span><br><span class="line">            <span class="comment">// this = {</span></span><br><span class="line">            <span class="comment">//     color:color,</span></span><br><span class="line">            <span class="comment">//     brand:brand</span></span><br><span class="line">            <span class="comment">// }   和下面的一样</span></span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三步：系统隐式的在后面加了 return this; 这一步很重要！！！</span></span><br><span class="line">            <span class="comment">// return this;</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// new 负责把this造出来和把原本指向window的this,转向实例化的对象</span></span><br><span class="line">    <span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">'黑色'</span>,<span class="string">'兰博基尼'</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(car1.color,car1.brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// GO 和 AO</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     Car:(function),</span></span><br><span class="line">    <span class="comment">//     car1:{        </span></span><br><span class="line">    <span class="comment">//         color:'黑色',</span></span><br><span class="line">    <span class="comment">//         brand:'兰博基尼'</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AO = { </span></span><br><span class="line">    <span class="comment">//     this:{</span></span><br><span class="line">    <span class="comment">//         color:color,</span></span><br><span class="line">    <span class="comment">//         brand:brand</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>图一</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="自己实现构造函数的功能"><a href="#自己实现构造函数的功能" class="headerlink" title="自己实现构造函数的功能"></a>自己实现构造函数的功能</h4><p>既然我们知道 new 仅仅是帮我们把 this 造出来和改变this的指向,那我们是不是可以不用 new 和 不使用 this 实现构造函数的功能?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照上面实例化的原理步骤我们来尝试一下是否可行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">    <span class="comment">// 第一步保存一个空对象 obj</span></span><br><span class="line">    <span class="keyword">var</span> obj = {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步将属性和方法写到 obj 对象里面</span></span><br><span class="line">    obj.color = color;</span><br><span class="line">    obj.brand = brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步  return obj</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = Car(<span class="string">'红色'</span>,<span class="string">'法拉利'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.color,car.brand);</span><br></pre></td></tr></tbody></table></figure><p>图二</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>从图一和图二看出它们两者并没有什么不同,我们是可以自己实现构造函数实例化的功能的。</p><hr><h4 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h4><p>如果我们在最后return 的时候改变为其他值呢?最后的结果会发生什么变化?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 逐一尝试 return 不同的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line"> <span class="comment">//    return 123;</span></span><br><span class="line"> <span class="comment">//    return {};</span></span><br><span class="line"> <span class="comment">//    return function(){}</span></span><br><span class="line"> <span class="comment">//    return []</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'白色'</span>,<span class="string">'宝马'</span>);</span><br><span class="line"><span class="built_in">console</span>.log()</span><br></pre></td></tr></tbody></table></figure><p>图三</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>图四</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><mark>总结:</mark>构造函数 return 出来原本是隐式的this,如果我们故意 return 了引用值那么它就是引用值,原始值的话是不受还是this。</p><p><mark> 引用值:</mark>Object、Function、Array、Date、RegExp</p><p><mark> 原始值:</mark> Undefined、Null、Boolean、Number 和 String</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面是构造函数实现实例化的原理,涉及到预编译、AO、GO、对象等知识&lt;/p&gt;
&lt;h4 id=&quot;构造函数实例化的原理&quot;&gt;&lt;a href=&quot;#构造函数实例化的原理&quot; class=&quot;headerlink&quot; title=&quot;构造函数实例化的原理&quot;&gt;&lt;/a&gt;构造函数实例化的原理&lt;/h4
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="http://cokesprit.top/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>window.xxx=xxx 与 return xxx的区别</title>
    <link href="http://cokesprit.top/posts/8b19ee89/"/>
    <id>http://cokesprit.top/posts/8b19ee89/</id>
    <published>2020-08-05T02:40:50.000Z</published>
    <updated>2020-08-05T03:13:54.640Z</updated>
    
    <content type="html"><![CDATA[<p>区别:</p><ol><li>使用 return 出去后需要把执行函数赋值给一个全局变量,然后再执行这个全局变量的函数</li><li>使用 window 直接将函数保存到GO。既把函数保存到 window 上的一个变量,然后再执行 window 上变量所对应的函数。 </li></ol><hr><p>下面来举例说明</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用return xxx</span></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">         a++;</span><br><span class="line">         <span class="built_in">console</span>.log(a);</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> add;  <span class="comment">// 把内部的add函数返回给全局变量add</span></span><br><span class="line">})();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8b19ee89/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用window.xxx = xxx</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">window</span>.add = add; <span class="comment">// 把内部的add函数保存到window.add上</span></span><br><span class="line">})();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8b19ee89/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>从上面的例子可以看出window.xxx = xxx 和 return xxx 二者是结果是一样,使用<mark>window.xxx = xxx 也是可以形成闭包</mark>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区别:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 return 出去后需要把执行函数赋值给一个全局变量,然后再执行这个全局变量的函数&lt;/li&gt;
&lt;li&gt;使用 window 直接将函数保存到GO。既把函数保存到 window 上的一个变量,然后再执行 window 上变量所对应的函数。
      
    
    </summary>
    
    
    
      <category term="闭包" scheme="http://cokesprit.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>闭包基础</title>
    <link href="http://cokesprit.top/posts/3d615767/"/>
    <id>http://cokesprit.top/posts/3d615767/</id>
    <published>2020-08-04T02:30:39.000Z</published>
    <updated>2020-08-04T09:10:05.509Z</updated>
    
    <content type="html"><![CDATA[<p>闭包的定义：当内部函数被返回到外部并保存时,就一定会形成闭包。</p><hr><p>闭包的优点:</p><ol><li>避免全全局变量的污染;</li><li>私有成员的存在;</li><li>希望一个变量长期存储在内存中。</li></ol><hr><p>闭包的缺点:</p><ol><li>闭包会产生原来的作用域链不释放。</li><li>过渡的闭包<mark>可能</mark>会导致内存泄漏或加载过慢,因为它常驻内存。</li></ol><hr><p>闭包的用途:可以用来做数据缓存。</p><hr><p>闭包的三个特性:</p><ol><li>函数嵌套函数。</li><li>函数内部可以引用外部的参数和变量。</li><li>参数和变量不会被垃圾回收机制回收。</li></ol><hr><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> test2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> test3 = test1();</span><br><span class="line"></span><br><span class="line">test3(); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 这就是一个简单闭包</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><mark>面包管理器</mark></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">breadMgr</span>(<span class="params">num</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> breadNum = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params"></span>)</span>{</span><br><span class="line">        breadNum += <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(breadNum);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sale</span>(<span class="params"></span>)</span>{</span><br><span class="line">        breadNum--;</span><br><span class="line">        <span class="built_in">console</span>.log(breadNum);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [supply,sale];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> breadMgr = breadMgr(<span class="number">60</span>);</span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">0</span>](); <span class="comment">// 补给</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3d615767/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>星期天计划管理器</mark></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sunSched</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> sunSched = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> operation = {</span><br><span class="line">        setSched: <span class="function"><span class="keyword">function</span>(<span class="params">thing</span>)</span>{</span><br><span class="line">            sunSched = thing;</span><br><span class="line">        },</span><br><span class="line">        showSched: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"My schedule on sunday is "</span> + sunSched);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> operation; <span class="comment">// 把对象返回出去</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> sunSched = sunSched(); <span class="comment">//执行返回 operation</span></span><br><span class="line"></span><br><span class="line">sunSched.setSched(<span class="string">'studying'</span>);</span><br><span class="line">sunSched.showSched();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3d615767/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闭包的定义：当内部函数被返回到外部并保存时,就一定会形成闭包。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;闭包的优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免全全局变量的污染;&lt;/li&gt;
&lt;li&gt;私有成员的存在;&lt;/li&gt;
&lt;li&gt;希望一个变量长期存储在内存中。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="闭包" scheme="http://cokesprit.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>作用域与作用域链图解</title>
    <link href="http://cokesprit.top/posts/ab6a816/"/>
    <id>http://cokesprit.top/posts/ab6a816/</id>
    <published>2020-08-03T01:42:56.000Z</published>
    <updated>2020-08-04T02:30:42.466Z</updated>
    
    <content type="html"><![CDATA[<p>作用域与作用域链</p><h4 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    b();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">a();</span><br></pre></td></tr></tbody></table></figure><h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><p><mark>当a函数被定义时</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当a函数被执行时(前一刻)</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当b函数被定义时</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当b函数被执行时(前一刻)</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当b函数被执行结束后</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>回归b函数被定义时的状态</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当a函数被执行结束时</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>回归a函数被定义时的状态</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>以上这就是作用域和作用域链的最基本的一个形态</p><hr><h4 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h4><p>这个例子比较特殊涉及到闭包,有关闭包的在下一篇更新。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> test2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> test3 = test1();</span><br><span class="line">test3();</span><br></pre></td></tr></tbody></table></figure><p><mark>当test1函数被定义时</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当test1函数被执行时(前一刻),函数test2被定义</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/10.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><mark>当test1函数被执行结束时</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/11.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时test1的AO并没有被销毁只是把线剪断了,test1的AO本该是要被销毁的,但test2已经被返回到外部且死死的抓住test1的AO不放,所有test1的AO不能销毁。<br>注意这里是重头戏,这时候就形成了闭包了！！！</p><hr><p><mark>test3执行</mark></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/12.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时的 test3 === test2。<br>a是在test1的AO里面的,为什么可以打印出来a? 就像之前讲的test2还死死的攥着test1的AO,当在自己的AO上没有查找到,则想test1的AO查找,实际操作的仍然是test1的AO。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ol><li>每个函数都有全局执行上下文GO。</li><li>函数自己的AO产生了,就会把自己AO排在作用域链的最顶端,其他AO和全局GO就会被挤下去。</li><li>函数被定义的时候它拿的是它上一级的作用域链。<!-- <div class="loading">     <div></div>     <div></div>     <div></div>     <div></div>     <div></div>     <p>正在更新~~~~</p> </div> --></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用域与作用域链&lt;/p&gt;
&lt;h4 id=&quot;栗子一&quot;&gt;&lt;a href=&quot;#栗子一&quot; class=&quot;headerlink&quot; title=&quot;栗子一&quot;&gt;&lt;/a&gt;栗子一&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="http://cokesprit.top/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>作用域之对象的隐式属性[[scope]]</title>
    <link href="http://cokesprit.top/posts/scope/"/>
    <id>http://cokesprit.top/posts/scope/</id>
    <published>2020-08-02T13:13:15.000Z</published>
    <updated>2020-08-02T13:38:21.991Z</updated>
    
    <content type="html"><![CDATA[<p>对象 -&gt; 有些属性是我们无法访问的,JS引擎内部固有的隐式属性[[scope]]。</p><h3 id="scope-gt-作用域"><a href="#scope-gt-作用域" class="headerlink" title="[[scope]] -> 作用域"></a>[[scope]] -&gt; 作用域</h3><ol><li>函数创建时,生成的一个JS内部的隐式属性。</li><li>函数<mark>存储</mark>作用域链<mark>的容器</mark>。<h4 id="Scope-Chain-gt-作用域链"><a href="#Scope-Chain-gt-作用域链" class="headerlink" title="Scope Chain -> 作用域链"></a>Scope Chain -&gt; 作用域链</h4> AO/GO<br> AO, 函数的执行期上下文<br> GO, 全局的执行期上下文<br> <mark>作用域链其实就是把这些AO/GO形成链式从上到下排列起来,形成一个链式关系,这个链式关系其实就是作用域链。</mark><br> <mark>作用域链也可以说是存储AO/GO的容器。</mark><br> 当函数执行完成以后,AO是要销毁的,也就是说AO是一个即时的存储容器;它不是长期保存的,它是根据函数的执行周期来保存。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象 -&amp;gt; 有些属性是我们无法访问的,JS引擎内部固有的隐式属性[[scope]]。&lt;/p&gt;
&lt;h3 id=&quot;scope-gt-作用域&quot;&gt;&lt;a href=&quot;#scope-gt-作用域&quot; class=&quot;headerlink&quot; title=&quot;[[scope]] -&gt; 作用
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="http://cokesprit.top/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>搬砖日记</title>
    <link href="http://cokesprit.top/posts/tote-bricks/"/>
    <id>http://cokesprit.top/posts/tote-bricks/</id>
    <published>2020-07-27T04:54:14.000Z</published>
    <updated>2020-08-03T14:15:39.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>为什么选择去工地搬砖,而不是去广东进厂?<br>1.我大伯接了一个工程,挺赶的,人手不够。<br>2.去广东的话车费来回要六百块,不划算。<br>3.进厂一天十二个小时感觉有点吃不消,且一天没有多少学习时间。</p><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><p class="txt-indent">2020-07-27-14:00整就被家里人叫去工地帮忙。到哪要干的事很简单,只需要把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。晚上七点钟下班感觉身体有点吃不消,手脚都有点酸;可能是太久没干重体力活的原因,想想过几天适应了可能就好受点。晚上十点钟时就有一股深深的困意袭来,虽然很困,但还是把今天的任务完成。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/bd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p class="txt-indent">2020-07-28早上六点四十分起来时感觉全身酸痛,手还有点发抖。今天要上一整天的班,上班时间为上午7:00 - 12:00,下午14:00 - 19:00一共十个小时;相比于进厂的话要好一点,晚上还能有一些时间留给自己。</p><p class="txt-indent">    今天还是重复昨天的工作把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。对我来说沙子是最难弄的,要把沙子铲到斗车里面去。沙子有点湿再加上我左手腕有暗伤,打篮球的时候伤的时间有两个月了,我以为好了;谁知道当把沙子铲到铲里提起来时,左手直接软了提不起来,没办法只能一点点的铲了。晚上洗完澡躺倒床上,有点那种倒头就睡的冲动,今天要比昨天累很多。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shoudou.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h4><p class="txt-indent">2020-07-29今天是我搬砖的第三天,天空很蓝,云朵很大,风很舒服,太阳很晒。今天的砖头比昨天格外的烫手,对面超市的冰镇可乐,依然是我不敢奢求的梦想,微分吹过我的脸庞,我很迷茫。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/fupo.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h4><p class="txt-indent">2020-07-30中午下来一场雨,浸透了燥热的天空。让着原本燥热不堪看的气温竟夹带着一丝凉意,深深的呼吸新鲜空气,带着淡淡泥土的芬芳;让我这疲惫的身躯,重新焕发了一丝活力。下午的时候吊机出了一点问题,吊不起太多东西了,这使得我的工作轻松了许多,但无聊的时候,也是时间最漫长的时候,在这短暂而又漫长的时间里我会想着我昨天的代码和我的未来该何去何从~~~~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/csone.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/cs.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h4><p class="txt-indent">2020-07-31做了几天身体也渐渐适应了工作强度,手脚也不酸痛了。说说这几天的改变吧。最直观就是黑了很多就几天时间晒得跟包大人一样,我对着镜子又陷入了沉思,看来老天爷也不想让我白活一辈子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/baihuo.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">身体素质上得到了小幅提升比如说手部力量和腿部力量,感觉比以前有力很多。不光这些连我的睡眠质量也得到了很大的改善,无论是晚上睡觉还是午休我都可以快速入睡,这是在学校时所没有的。这是几天搬砖最大的“收获”,有点困了今晚就这样了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shuijiao.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h4><p class="txt-indent">2020-08-01今天是建军节。太阳出奇的大,气温是我从开始到现在最热的一天气温高达34度,感觉都要化了。不过还好今天不是很忙,今天楼上的砖差不多都砌完了,明天过后就会轻松很多。</p><h4 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h4><p class="txt-indent">2020-08-02天气还可以不怎么热风很凉快,六点钟的时候下了场雨挺大的。无奈只能“暂停营业”,提前下班。</p><h4 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h4><p class="txt-indent">2020-08-03今天建设局的人来检查,说违规建设未经允许私自加高楼层。听说这这个房子的主人只申请到了到了六层楼的文件建设许可,现在起到第八层局里的人说得拆掉两层,现在这栋房子的主人正在与局里的人沟通,估计明天也出不来结果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;为什么选择去工地搬砖,而不是去广东进厂?&lt;br&gt;1.我大伯接了一个工程,挺赶的,人手不够。&lt;br&gt;2.去广东的话车费来回要六百块,不划算。&lt;
      
    
    </summary>
    
    
    
      <category term="搬砖日记" scheme="http://cokesprit.top/tags/%E6%90%AC%E7%A0%96%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GO和AO</title>
    <link href="http://cokesprit.top/posts/GO-AO/"/>
    <id>http://cokesprit.top/posts/GO-AO/</id>
    <published>2020-07-25T13:43:05.000Z</published>
    <updated>2020-07-28T14:32:59.953Z</updated>
    
    <content type="html"><![CDATA[<p>GO: global object 全局的执行期上下文<br>AO：activation object 活跃对象,函数的执行期上下文   </p><p>在说GO和AO之前我们先来了解javascript 在执行之前的几个步骤:  </p><ol><li>检查通篇的语法错误</li><li>预编译的过程(把代码中的变量和函数解析出来与AO和GO有关)</li><li>解释一行,执行一行</li></ol><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>代码演示</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// var a =  1 ; // 是2个步骤 编译时找a并且赋值undefined -&gt; 执行时赋值 1</span></span><br></pre></td></tr></tbody></table></figure><p style=" text-indent: 2rem;">上面的演示中test();打印出来了2,而console.log(a);打印出来了undefined并没有报错,证明 js引擎在编译的时候,先去找函数声明,和变量声明,而变量赋值并不是在编译的时候做的,而是在编译完成后执行到那句时做的。</p>  运行结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><mark color="red">总结：函数声明是整体提示,变量只有声明提升,变量赋值不提升。</mark><hr><h4 id="暗示全局变量"><a href="#暗示全局变量" class="headerlink" title="暗示全局变量"></a>暗示全局变量</h4><p>暗示全局变量 -&gt; imply global variable</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        b = <span class="number">2</span>; <span class="comment">// 暗示全局变量 不使用 var</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a = window.a</span></span><br><span class="line">    <span class="comment">// b = window.b</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// window = {</span></span><br><span class="line">        <span class="comment">//     a:1 ,</span></span><br><span class="line">        <span class="comment">//     b:2</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> x = y = <span class="number">7</span>;</span><br><span class="line">    }</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">console</span>.log(y); <span class="comment">// 打印 7 , 未声明直接赋值,提升成全局变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// window 本身是一个全局的域;所有的全局变量都归 window 所有</span></span><br><span class="line">    <span class="comment">// 你也可以这么认为 全局变量是 window对象的属性,全局函数是 window对象的方法</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="暗示全局变量与GO"><a href="#暗示全局变量与GO" class="headerlink" title="暗示全局变量与GO"></a>暗示全局变量与GO</h4><p>GO:global object 全局的执行期上下文<br>GO执行：<br>    1. 找变量<br>    2. 找函数声明<br>    3. 执行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据上面GO执行一步一步的来</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//     a: function a(){}</span></span><br><span class="line">    <span class="comment">//     a: 1</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// 总结： GO === window,GO只关注全局变量的和全局函数声明但并不关注函数的内部;</span></span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="built_in">console</span>.log(c,d); <span class="comment">// 打印 f c(){} undefined</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> d = funciton(){}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GO 执行</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     d:undefined  // 第一步 找变量</span></span><br><span class="line">    <span class="comment">//       function(){}</span></span><br><span class="line">    <span class="comment">//     c:function c(){} // 第二步 找函数声明</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>疑点解析：为什么打印d是undefined并不是 f c(){}?因为预编译的时候是去找变量声明和函数声明,当编译完后才解释一行,执行一行。</p><p><mark>总结：在使用 GO 的时候要考虑执行顺序。</mark></p><hr><h4 id="函数预编译与AO"><a href="#函数预编译与AO" class="headerlink" title="函数预编译与AO"></a>函数预编译与AO</h4><p>AO activation object 活跃对象,函数的执行期上下文<br>AO执行：</p><ol><li>寻找形参和变量声明</li><li>实参赋值给形参</li><li>找函数声明,赋值</li><li>执行</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// ƒ a(){}</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}  <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// ƒ (){}</span></span><br><span class="line">        funciton d(){}</span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//        2</span></span><br><span class="line">    <span class="comment">//        function a(){}</span></span><br><span class="line">    <span class="comment">//        1</span></span><br><span class="line">    <span class="comment">//     b: undefined</span></span><br><span class="line">    <span class="comment">//        function (){}</span></span><br><span class="line">    <span class="comment">//     d: function d(){}</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        a = <span class="number">5</span>;</span><br><span class="line">        b = <span class="number">6</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6  因为 b = 6; 把函数式 function b(){} 给覆盖了</span></span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//        1</span></span><br><span class="line">    <span class="comment">//        5</span></span><br><span class="line">    <span class="comment">//     b: undefined</span></span><br><span class="line">    <span class="comment">//         function b(){}</span></span><br><span class="line">    <span class="comment">//         6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     c: undefined</span></span><br><span class="line">    <span class="comment">//         0</span></span><br><span class="line">    <span class="comment">//     d:function d(){}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>写出练习例子的GO和AO</p><h5 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// ƒ a(){}</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">if</span>(a){</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> c ;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    f = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>预编译是不看 if的,看见有声明就挂上去。if只有在在执行的时候才去看 if 。但是if 内部的变量声明还是在的。</p><hr><h4 id="为啥了解AO和GO"><a href="#为啥了解AO和GO" class="headerlink" title="为啥了解AO和GO"></a>为啥了解AO和GO</h4><p>为了解决js作用域作用域链相关所产生的一切问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GO: global object 全局的执行期上下文&lt;br&gt;AO：activation object 活跃对象,函数的执行期上下文   &lt;/p&gt;
&lt;p&gt;在说GO和AO之前我们先来了解javascript 在执行之前的几个步骤:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查通篇的语法
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>callee-caller</title>
    <link href="http://cokesprit.top/posts/callee-caller/"/>
    <id>http://cokesprit.top/posts/callee-caller/</id>
    <published>2020-07-24T10:45:47.000Z</published>
    <updated>2020-07-24T14:10:30.193Z</updated>
    
    <content type="html"><![CDATA[<h4 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h4><p>callee是arguments的属性,<mark>代表当前函数的引用(名字)</mark>,在函数内部使用，主要用来配合立即执行函数。<br>接下来让我们来认识 callee</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">//打印的是这个函数本身</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这两组是一样的</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length);<span class="comment">// 打印形参的长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.length);<span class="comment">//打印形参的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 打印实参的长度</span></span><br><span class="line">}</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><mark>callee 配合立即执行函数</mark></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归求 n-1 的累加和 </span></span><br><span class="line"><span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line">}(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h4><p><mark>返回当前被调用的函数的引用</mark>。<br>这听起来有点绕,让我们使用代码来更好的理解</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    test2();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(test2.caller); </span><br><span class="line">    <span class="comment">//这里打印的是 test1,因为test1()调用了test2并且test1执行了。</span></span><br><span class="line">    <span class="comment">// 在被调用函数里面打印被调用函数的caller 它可以打印出谁在调用它。</span></span><br><span class="line">    <span class="comment">// 注意一定是要被真正执行才能打印出来！！！</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">test1();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在严格模式下 callee 和 caller 会报错!!!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;callee&quot;&gt;&lt;a href=&quot;#callee&quot; class=&quot;headerlink&quot; title=&quot;callee&quot;&gt;&lt;/a&gt;callee&lt;/h4&gt;&lt;p&gt;callee是arguments的属性,&lt;mark&gt;代表当前函数的引用(名字)&lt;/mark&gt;,在函数内部使用
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>call/apply方法</title>
    <link href="http://cokesprit.top/posts/call-apply/"/>
    <id>http://cokesprit.top/posts/call-apply/</id>
    <published>2020-07-24T04:20:37.000Z</published>
    <updated>2020-07-24T10:18:08.682Z</updated>
    
    <content type="html"><![CDATA[<p>作用：call() 和 apply() 都是用来更改 this 指向;<br>call()：call(this指向的对象, 参数1, 参数2, 参数n);<br>apply()：apply(this指向的对象, []);<br>不同之处：apply() 第二个参数是数组,实际开发中用的比较多的是apply();</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>让 newCar1和newCar2 拥有Car构造函数的的所有属性以及方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.color+<span class="string">"的"</span>+<span class="keyword">this</span>.brand+<span class="string">"正在行驶"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">var</span> newCar1 = {</span><br><span class="line">        pdiliang:<span class="string">'3.0'</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">var</span> newCar2 = {</span><br><span class="line">        pdiliang:<span class="string">'2.0'</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    Car.call(newCar1,<span class="string">"奔驰"</span>,<span class="string">"白色"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar1);</span><br><span class="line"></span><br><span class="line">    Car.apply(newCar2,<span class="string">"五菱宏光"</span>,<span class="string">"米色"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：<br>可以看到 newCar1 和 newCar2 拥有了Car的属性和方法<br><img src="/posts/call-apply/1.png" alt=""></p><h5 id="栗子一讲解："><a href="#栗子一讲解：" class="headerlink" title="栗子一讲解："></a>栗子一讲解：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当使用 newCar1/newCar2 的时候 Car 变成内部的情况是这样的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar1.brand = brand;</span><br><span class="line">    newCar1.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar2.brand = brand;</span><br><span class="line">    newCar2.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 因为 call/apply更改了 this 的指向</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>买车案例</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 买车案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color,displacement</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.displacement = displacement;</span><br><span class="line">    <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'排量为'</span>+ <span class="keyword">this</span>.displacement + <span class="string">'的'</span> + <span class="keyword">this</span>.color + <span class="keyword">this</span>.brand;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Preson</span>(<span class="params">opt</span>)</span>{</span><br><span class="line">    <span class="comment">// 借用 Car 的属性和方法</span></span><br><span class="line">    Car.apply(<span class="keyword">this</span>,[opt.brand,opt.color,opt.displacement]);</span><br><span class="line">    <span class="keyword">this</span>.name = opt.name;</span><br><span class="line">    <span class="keyword">this</span>.age  = opt.age;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">'年龄'</span>+ <span class="keyword">this</span>.age + <span class="string">'岁姓名为'</span>+<span class="keyword">this</span>.name+<span class="string">'买了一辆'</span>+<span class="keyword">this</span>.info()</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> pt = <span class="keyword">new</span> Preson({</span><br><span class="line">    brand:<span class="string">'法拉利'</span>,</span><br><span class="line">    color:<span class="string">'红色'</span>,</span><br><span class="line">    displacement:<span class="string">'3.5'</span>,</span><br><span class="line">    name:<span class="string">'黄某'</span>,</span><br><span class="line">    age:<span class="string">'20'</span></span><br><span class="line">});</span><br><span class="line">pt.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/call-apply/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="call-和-apply-的使用场景"><a href="#call-和-apply-的使用场景" class="headerlink" title="call() 和 apply()的使用场景"></a>call() 和 apply()的使用场景</h4><ol><li>以前写了一个功能不太完整，这时候可以写一个新的功能来补充完整，这个时候呢就可以使用 call() 和apply() 这两个方法去借用，以前功能相对应的方法和函数。</li><li>在工作的过程中很多人一起写个大功能，这个时候可以分组来写，最终统一去调用,一起协同作战。</li><li>分类：比如写一个东西，它有几种不同的类型，我们就可以分开写最后汇总。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用：call() 和 apply() 都是用来更改 this 指向;&lt;br&gt;call()：call(this指向的对象, 参数1, 参数2, 参数n);&lt;br&gt;apply()：apply(this指向的对象, []);&lt;br&gt;不同之处：apply() 第二个参数是数组,实
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="http://cokesprit.top/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>立即执行函数</title>
    <link href="http://cokesprit.top/posts/iife/"/>
    <id>http://cokesprit.top/posts/iife/</id>
    <published>2020-07-22T13:13:45.000Z</published>
    <updated>2020-07-22T14:21:54.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h4><pre><code>解释：自动执行，执行完成立即释放（销毁）英文：Immediately - Invoked Function Expression简称：IIFE 作用：创建一个独立的作用域好处：可以避免函数内的变量暴露在全局环境下，避免全局变量的污染。</code></pre><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    </span><br><span class="line">})(); <span class="comment">// 常用写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}()); <span class="comment">// w3C建议</span></span><br></pre></td></tr></tbody></table></figure><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><h5 id="错误声明"><a href="#错误声明" class="headerlink" title="错误声明"></a>错误声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 错误声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样是错误的声明"</span>)</span><br><span class="line">}(); </span><br><span class="line">    <span class="comment">// 因为解析的时候是 ↓ </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    (); <span class="comment">//括号里面是空的会报错,当有值的时候会解析成一个表达式。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="正确声明"><a href="#正确声明" class="headerlink" title="正确声明"></a>正确声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确声明</span></span><br><span class="line">    <span class="keyword">var</span> ts =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{ <span class="comment">// 这个匿名函数赋值给了 ts 这是一个赋值的过程</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样可以执行！"</span>);</span><br><span class="line">    }();</span><br></pre></td></tr></tbody></table></figure><h5 id="证明立即执行函数完就销毁"><a href="#证明立即执行函数完就销毁" class="headerlink" title="证明立即执行函数完就销毁"></a>证明立即执行函数完就销毁</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明立即执行函数的销毁</span></span><br><span class="line"><span class="keyword">var</span> testone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%c 1"</span>,<span class="string">"color:red;background:pink;"</span>);</span><br><span class="line">    }(); <span class="comment">// 这是一个赋值的过程 并不是执行所以可以这样写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testone);<span class="comment">//打印 undefined </span></span><br><span class="line"><span class="comment">// 打印 undefined 证明 testone 在执行完之后就被销毁了</span></span><br></pre></td></tr></tbody></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{<span class="comment">//这两个是形参</span></span><br><span class="line">        <span class="built_in">console</span>.log(a+b);  <span class="number">6</span></span><br><span class="line">    }(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//这两个是实参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例子二</span></span><br><span class="line">    <span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.括号括起来的都是表达式,不管里面是什么;<br>2.只有表达式才能被执行符号(括号)执行;<br>3.把函数声明变成表达式，那么你的函数名就会被自动的忽略;</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="函数声明变成表达式的方法"><a href="#函数声明变成表达式的方法" class="headerlink" title="函数声明变成表达式的方法"></a>函数声明变成表达式的方法</h5><p>函数声明变成表达式的方法在 function前面加 + 、- 、！、||(前面得加 0)、&amp;&amp;(前面得加 1)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 + 号变成表达式了,所以可以立即执行"</span>);</span><br><span class="line">}();</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 0|| 运算符,我也变成表达式了,我也可以立即执行了。"</span>);</span><br><span class="line">}();</span><br></pre></td></tr></tbody></table></figure><h5 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号运算符</span></span><br><span class="line">    <span class="comment">// 逗号运算符只返回,所有逗号的最后一个值</span></span><br><span class="line">    <span class="comment">// 例子：</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">6</span><span class="number">-7</span>,<span class="number">8</span>+<span class="number">9</span>,<span class="number">5</span>+<span class="number">5</span>)); <span class="comment">//  10</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)); <span class="comment">//  7</span></span><br></pre></td></tr></tbody></table></figure><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params">a</span>)</span>{</span><br><span class="line">    <span class="comment">// console.log("不报错，也不运行");</span></span><br><span class="line">}(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析流程</span></span><br><span class="line">    <span class="comment">// 因为解析的时候是解析成两部分的</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    } <span class="comment">//解析这是一个函数</span></span><br><span class="line">   (<span class="number">6</span>); <span class="comment">//这个(6),解析成一个表达式</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;立即执行函数：&quot;&gt;&lt;a href=&quot;#立即执行函数：&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数：&quot;&gt;&lt;/a&gt;立即执行函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;解释：自动执行，执行完成立即释放（销毁）
英文：Immediately - Invo
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://cokesprit.top/posts/digui/"/>
    <id>http://cokesprit.top/posts/digui/</id>
    <published>2020-07-21T08:23:14.000Z</published>
    <updated>2020-07-21T09:37:59.390Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h4><p>递归说白了就是，函数自己调用自己。</p><h4 id="递归主要的两个部分"><a href="#递归主要的两个部分" class="headerlink" title="递归主要的两个部分"></a>递归主要的两个部分</h4><p>1.找到计算的规律!<br>2.找到一个出口,让它结束掉!</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>求 n 的阶乘 -&gt; 不能使用 for 循环 </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fact(n);</span></span><br><span class="line"><span class="comment">// 规律：n = n * fact(n-1)</span></span><br><span class="line"><span class="comment">// 出口：n === 1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">//出口</span></span><br><span class="line">        <span class="keyword">if</span>(n === <span class="number">1</span>){ </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>); </span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fact(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line">    <span class="comment">// 当 n = 5;</span></span><br><span class="line">    <span class="comment">// 120 = fact(5) = 5 * fact(4);  -&gt;   5 * 4 * 6;</span></span><br><span class="line">    <span class="comment">// 24 = fact(4) = 4 * fact(3);  -&gt;   4 * 3 * 2;</span></span><br><span class="line">    <span class="comment">// 6 =  fact(3) = 3 * fact(2);  -&gt;   3 * 2 * 1;</span></span><br><span class="line">    <span class="comment">// 2 = fact(2) = 2 * fact(1);  -&gt;   2 * 1 * 1; ↑ </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  当程序走到出口1的时候又往上执行，</span></span><br><span class="line">    <span class="comment">//  因为上面还有一大堆队列都没有实际的运算结果，但是一到 1 </span></span><br><span class="line">    <span class="comment">//  fact(1) = 1 然后</span></span><br><span class="line">    <span class="comment">//  2 * 1 等于 2； fact(2) 等于 2; </span></span><br><span class="line">    <span class="comment">//  3 * 2 等于 6;  fact(3) 等于 6;</span></span><br><span class="line">    <span class="comment">//  4 * 6 等于 24; fact(4) 等于 24;</span></span><br><span class="line">    <span class="comment">//  5 * 24 等于 120; fact(5) 等于 120;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>斐波拉契数列</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规律: n3 = n2 + n1;</span></span><br><span class="line"><span class="comment">//出口：n &lt;= 0  n &lt;= 2;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">// 两个出口</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> fb(n<span class="number">-1</span>) + fb(n<span class="number">-2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fb(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析:</span></span><br><span class="line">        <span class="comment">//  斐波拉契数列： 0,1,1,2,3,5,8,13.... 像这种规律的。</span></span><br><span class="line">        <span class="comment">//  规律：n3 = n2 + n1</span></span><br><span class="line">        <span class="comment">//  出口：n &lt;= 0 n &lt;= 2 </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// n = 6;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8 = fb(6) = fb(5) + fb(4);  -&gt;  5 + 3</span></span><br><span class="line">            <span class="comment">// 5 = fb(5) = fb(4) + fb(3);  -&gt;  3 + 2</span></span><br><span class="line">            <span class="comment">// 3 = fb(4) = fb(3) + fb(2);  -&gt;  2 + 1</span></span><br><span class="line">            <span class="comment">// 2 = fb(3) = fb(2) + fb(1);  -&gt;  1 + 1   ↑</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>递归它总是走到出口的时候,再向上一步一步的赋值计算后返回结果.</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>递归会涉及到性能的问题,return 的值一直出不去,要等执行到出口的时候。递归处理一些,小逻辑还是可以的,但是JavaScript里慎用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是递归？&quot;&gt;&lt;a href=&quot;#什么是递归？&quot; class=&quot;headerlink&quot; title=&quot;什么是递归？&quot;&gt;&lt;/a&gt;什么是递归？&lt;/h4&gt;&lt;p&gt;递归说白了就是，函数自己调用自己。&lt;/p&gt;
&lt;h4 id=&quot;递归主要的两个部分&quot;&gt;&lt;a href=&quot;#递归主
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js中的 ||运算 和 &amp;&amp;运算</title>
    <link href="http://cokesprit.top/posts/js-huo-bingqie/"/>
    <id>http://cokesprit.top/posts/js-huo-bingqie/</id>
    <published>2020-07-19T13:54:30.000Z</published>
    <updated>2020-07-20T14:32:25.111Z</updated>
    
    <content type="html"><![CDATA[<h5 id="js中的-运算"><a href="#js中的-运算" class="headerlink" title="js中的 || 运算"></a>js中的 || 运算</h5><p>只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真是假都返回。</p><hr><h5 id="js中的-amp-amp-运算"><a href="#js中的-amp-amp-运算" class="headerlink" title="js中的 &amp;&amp; 运算"></a>js中的 &amp;&amp; 运算</h5><p>只要 &amp;&amp; 前面为 false 的话,那么就返回 &amp;&amp; 前面的值，不管你后面有多少个true。</p><hr><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>在javasript中 <mark>undefined</mark>,<mark>null</mark>,<mark>NaN</mark>,<mark>“ “</mark>,<mark>0</mark>,<mark>false</mark> 这些都是为false即假。</p><hr><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><p>写一个函数如果有传入姓名则 return  出去，否则 return 您没有输入姓名</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funciton test(name){</span><br><span class="line">    <span class="keyword">return</span> name || <span class="string">'您没有输入姓名'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 无参 -&gt; 等于空 -&gt; 既 假</span></span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">//输出-&gt; 您没有输入姓名</span></span><br><span class="line"><span class="comment">// 有参 -&gt; 不等于上面那几个假值 既真</span></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="string">'晓明'</span>)); <span class="comment">//输出-&gt; 晓明</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;js中的-运算&quot;&gt;&lt;a href=&quot;#js中的-运算&quot; class=&quot;headerlink&quot; title=&quot;js中的 || 运算&quot;&gt;&lt;/a&gt;js中的 || 运算&lt;/h5&gt;&lt;p&gt;只要 || 前面为 false 的话那么就会往后走(直到碰到true)，走到最后不管是真
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js实参求乘积</title>
    <link href="http://cokesprit.top/posts/js-shican-qiu-chengji/"/>
    <id>http://cokesprit.top/posts/js-shican-qiu-chengji/</id>
    <published>2020-07-19T07:25:53.000Z</published>
    <updated>2020-07-19T09:23:03.349Z</updated>
    
    <content type="html"><![CDATA[<p> 在解题之前我们先搞懂什么是js中的形参和实参？  </p><h5 id="js中的形参和实参"><a href="#js中的形参和实参" class="headerlink" title="js中的形参和实参"></a>js中的形参和实参</h5><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 形式参数 形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span></span>)</span>{ <span class="comment">// 里面的就是形参</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length); <span class="comment">// 形参长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 实参长度</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//   实际参数 实参</span></span><br><span class="line">test(实参<span class="number">1</span>,实参<span class="number">2</span>,实参<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><blockquote><ol><li>形参和实参数量可以不相等。  </li><li><span style="color:#f5871f;">arguments</span> 是一个对应于传递给函数的参数的<span style="color:#f5871f;">类数组对象</span>里面包含所有的实参!!!  </li><li>实参里面传了值的可以在函数内部修改实参的值，如果实参里面并没有传入值，也给形参赋值了，这样是没有用的。</li></ol></blockquote><h5 id="js实参求乘积"><a href="#js实参求乘积" class="headerlink" title="js实参求乘积"></a>js实参求乘积</h5><p>了解了什么实参和形参接下来就可以愉快的码代码了  </p><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i++){</span><br><span class="line">    a *= <span class="built_in">arguments</span>[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在解题之前我们先搞懂什么是js中的形参和实参？  &lt;/p&gt;
&lt;h5 id=&quot;js中的形参和实参&quot;&gt;&lt;a href=&quot;#js中的形参和实参&quot; class=&quot;headerlink&quot; title=&quot;js中的形参和实参&quot;&gt;&lt;/a&gt;js中的形参和实参&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
    
      <category term="js面试题" scheme="http://cokesprit.top/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码 和 UNICODE码</title>
    <link href="http://cokesprit.top/posts/504aee57/"/>
    <id>http://cokesprit.top/posts/504aee57/</id>
    <published>2020-07-19T02:18:33.000Z</published>
    <updated>2020-07-20T14:21:24.055Z</updated>
    
    <content type="html"><![CDATA[<p>ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  </p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p> 写一个函数，接收任意一个字符串，算出字符串的总字节数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBytes</span>(<span class="params">str</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> sth = str.length; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++){</span><br><span class="line">        <span class="keyword">var</span> stc = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span>(stc &gt; <span class="number">255</span>){ </span><br><span class="line">            sth++; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(getBytes(<span class="string">'Hello js，我们做好朋友吧！'</span>));</span><br></pre></td></tr></tbody></table></figure><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><p style="text-indent:2em;">先获取到字符串的长度,将其存入一个变量 sth ,然后利用循环判断编码是否大于 255 ,如果大于 sth++ 。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  &lt;/p&gt;
&lt;h4 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h4&gt;&lt;p&gt; 写一个
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="http://cokesprit.top/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客发布踩坑</title>
    <link href="http://cokesprit.top/posts/ffafe98e/"/>
    <id>http://cokesprit.top/posts/ffafe98e/</id>
    <published>2020-07-18T02:29:37.000Z</published>
    <updated>2020-07-18T05:22:43.353Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客 <strong>Username for ‘<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></strong> 验证问题<br>这时候 输入你的github邮箱账号 <span style="color:red;">（不是你的github名！！！）</span> 之后会弹出一个提示框 然后输入邮箱登录密码即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      hexo博客 **Username for &#39;https://github.com** 验证问题
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://cokesprit.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客文章发布部署</title>
    <link href="http://cokesprit.top/posts/c3259ce2/"/>
    <id>http://cokesprit.top/posts/c3259ce2/</id>
    <published>2020-06-19T11:56:52.930Z</published>
    <updated>2020-07-18T04:33:12.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre><code class="bash">$ hexo deploy</code></pre><p>作者：可乐精<br>链接：<a href="http://cokesprit.top/">CokeSprit</a><br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建新帖子&quot;&gt;&lt;a href=&quot;#创建新帖子&quot; class=&quot;headerlink&quot; title=&quot;创建新帖子&quot;&gt;&lt;/a&gt;创建新帖子&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://cokesprit.top/tags/hexo/"/>
    
  </entry>
  
</feed>
