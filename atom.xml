<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CokeSprit</title>
  <icon>https://www.gravatar.com/avatar/b765c05225fbf501f68a98a1395ba44b</icon>
  <subtitle>爱生活,爱编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cokesprit.gitee.io/"/>
  <updated>2020-10-22T14:44:29.289Z</updated>
  <id>https://cokesprit.gitee.io/</id>
  
  <author>
    <name>CokeSprit</name>
    <email>2665281140@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML基础、编码、基础标签</title>
    <link href="https://cokesprit.gitee.io/posts/95ef9666/"/>
    <id>https://cokesprit.gitee.io/posts/95ef9666/</id>
    <published>2020-10-22T09:37:28.000Z</published>
    <updated>2020-10-22T14:44:29.289Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_jacinth">前端开发：</span><br>结构布局、样式呈现、页面动态交互(js脚本，数据交互处理、数据格式渲染)</p><p>对应：HTML  CSS  JavaScript</p><hr><p><span class="s_jacinth">为什么出现htm?</span></p><p>win98 及之前的系统基本上都只认后缀名3位，不认三位以上的</p><hr><p><span class="s_jacinth">HTML全称：</span></p><p>超文本标记语言</p><hr><p><span class="s_jacinth">&lt;!DOCTYPE html&gt;</span><br>这个并不是标签；作用告诉浏览器HTML用哪个版本来编写，<br>&lt;!DOCTYPE html&gt; HTML5的声明方式。</p><p>CSS1Compat：是W3C的标准兼容性模式</p><p>BackCompat：是浏览器的怪异兼容性模式，会用一些样式或者兼容的问题 要使用&lt;!DOCTYPE html&gt;变回标准模式。</p><hr><h4 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h4><p>双标签<br>单标签 -&gt; 单标签必须闭合</p><hr><h5 id="html-根标签："><a href="#html-根标签：" class="headerlink" title="html 根标签："></a>html 根标签：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt; </span><br><span class="line">zh-CN: 中华人民共和国 - 简体中文</span><br><span class="line">    EN: 英文</span><br><span class="line">zh-Hans: 纯简体中文 -&gt; 部分地域</span><br><span class="line">zh-CHS: 纯简体中文 -&gt; 部分地域</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h5><pre><code>head标签向浏览器网页的基本信息和配置</code></pre><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">三大件：</span><br><span class="line">    title: </span><br><span class="line">        &lt;title&gt;<span class="number">30</span><span class="number">-40</span>个字&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        主页：网站 + 主要关键字/</span>关键字的描述</span><br><span class="line">        详情页：详情名称 + 网站名称 + 简介</span><br><span class="line">        列表页：分类名称 + 关键字 + 网站名称</span><br><span class="line">        文章页：标题 + 分类 + 网站名称</span><br><span class="line">    </span><br><span class="line">    keywords:</span><br><span class="line">        &lt;meta name=<span class="string">"keywords"</span> content=<span class="string">""</span>&gt;</span><br><span class="line">        要求<span class="number">100</span>个字符</span><br><span class="line">            网站名称 + 分类信息 + 网站名称</span><br><span class="line">    </span><br><span class="line">    description:</span><br><span class="line">        &lt;meta name=<span class="string">"description"</span> centent=<span class="string">""</span>&gt;</span><br><span class="line">        描述信息 <span class="number">80</span> - <span class="number">120</span> 汉字</span><br><span class="line">        综合title + keywords的简单问题</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************分割*********************/</span></span><br><span class="line"></span><br><span class="line">搜索引擎认知的优先级：</span><br><span class="line">    title &gt; description &gt; keywords</span><br><span class="line"></span><br><span class="line">搜索引擎：</span><br><span class="line">    是有学习能力的，每隔一段时间自动启动蜘蛛爬虫程序，</span><br><span class="line">爬别人网页上的内容，会对一定范围之内的网站进行搜索，</span><br><span class="line">搜索到了存在到自己的数据库。</span><br><span class="line">爬虫程序对语义化标签非常青睐。</span><br><span class="line"></span><br><span class="line">    搜索引擎的优化：</span><br><span class="line">        并不是网页技术，它实际到方方面面，比如网页的营销。</span><br><span class="line">    </span><br><span class="line">    面貌字符集：</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        GB2312：中国信息处理国家标准码 -&gt; 简体中文编码</span><br><span class="line">        GBK：汉字扩展规范 -&gt; 扩大了汉字的收入，增加了繁体中文、藏、蒙、维吾尔等少数民族的文字</span><br><span class="line">        UTF<span class="number">-8</span>：万国码 -&gt; 它几乎认识世界所有文字</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="h1-h6-gt-标签"><a href="#h1-h6-gt-标签" class="headerlink" title="h1-h6->标签"></a>h1-h6-&gt;标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1-h6：粗体、独占一行其中h1标签的文字大小是<span class="number">2</span>em;</span><br><span class="line">补充：浏览器默认的文字大小<span class="number">16</span>px</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="Paragraph-标签："><a href="#Paragraph-标签：" class="headerlink" title="Paragraph 标签："></a>Paragraph 标签：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">段落标签，独占一行，p标签设置text-decoration: line-through;有删除线</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="strong-amp-b"><a href="#strong-amp-b" class="headerlink" title="strong &amp; b"></a>strong &amp; b</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;我是strong&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">b&gt;我是bold&lt;/</span>b&gt;</span><br><span class="line">    都是字体加粗；</span><br><span class="line">    这两个的区别是，前者是语义化标签；</span><br><span class="line">    后者是物理化标签，语义化标签标示加强；</span><br><span class="line">    搜索引擎的爬虫程序很青睐它</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="em-amp-i-标签"><a href="#em-amp-i-标签" class="headerlink" title="em &amp; i 标签"></a>em &amp; i 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置斜体</span><br><span class="line">&lt;em&gt;我是 emphasize 标签&lt;<span class="regexp">/em&gt; -&gt;语义化标签</span></span><br><span class="line"><span class="regexp">        &lt;i&gt;现在i标签用在图标上&lt;/i</span>&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="del-标签"><a href="#del-标签" class="headerlink" title="del 标签"></a>del 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除线</span><br><span class="line">&lt;del&gt;我是<span class="keyword">delete</span>标签&lt;<span class="regexp">/del&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="ins-标签"><a href="#ins-标签" class="headerlink" title="ins 标签"></a>ins 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下划线</span><br><span class="line">&lt;ins&gt;我是insert标签&lt;<span class="regexp">/ins&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="address-标签"><a href="#address-标签" class="headerlink" title="address 标签"></a>address 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语义表示地址</span><br><span class="line">&lt;address&gt;北海市银海区南珠大道<span class="number">9</span>号&lt;<span class="regexp">/address&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="division-标签-div标签"><a href="#division-标签-div标签" class="headerlink" title="division 标签 div标签"></a>division 标签 div标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">它叫容器，也叫盒子</span><br><span class="line">是容器/盒子就一定有宽高，</span><br><span class="line">有宽和高的容器它就一定是块。</span><br><span class="line"></span><br><span class="line">H5的标签一些语义化标签，为什么要代替div?</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="编辑器："><a href="#编辑器：" class="headerlink" title="编辑器："></a>编辑器：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在编辑器内文本的换行和空额都是文本分隔符</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="html实体字符："><a href="#html实体字符：" class="headerlink" title="html实体字符："></a>html实体字符：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;nbsp; -&gt; 空格</span><br><span class="line">&amp;lt; -&gt; 小于号</span><br><span class="line">&amp;gt; -&gt; 大于号</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="hr-amp-br-标签"><a href="#hr-amp-br-标签" class="headerlink" title="hr &amp; br 标签"></a>hr &amp; br 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">下划线和换行符</span><br><span class="line">开发项目的时候都不要用它们！！！</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="img-标签"><a href="#img-标签" class="headerlink" title="img 标签"></a>img 标签</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"../img/1.png"</span> alt=<span class="string">"胡歌"</span> title=<span class="string">"胡歌"</span>/&gt;</span><br><span class="line">绝对路径：完整的描述文件位置的路径就是绝对路径。</span><br><span class="line">相对路径：这个文件所在的路径引起的跟其它文件（或文件夹）的路径关系。</span><br><span class="line">跳出文件夹用：../img/<span class="number">1.</span>png  上一级</span><br><span class="line"></span><br><span class="line">alt：图片加载失败的时候才会起作用，必须要写。</span><br><span class="line"></span><br><span class="line">title：鼠标放上去会显示图片信息，可选。</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="anchor-标签-锚点"><a href="#anchor-标签-锚点" class="headerlink" title="anchor 标签 (锚点)"></a>anchor 标签 (锚点)</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target=<span class="string">"_blank"</span> href=<span class="string">"https://www.baidu.com"</span>&gt;最早是锚点标签&lt;a/&gt;</span><br><span class="line">href：</span><br><span class="line">target：_blank 新开一个页面</span><br><span class="line"></span><br><span class="line">a标签的作用：</span><br><span class="line">    <span class="number">1</span>、超链接标签</span><br><span class="line">    <span class="number">2</span>、打电话</span><br><span class="line">        &lt;a href=<span class="string">"tel:17677537662"</span>&gt;联系商家&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    3、发邮件</span></span><br><span class="line"><span class="regexp">        &lt;a href="mailto:2665281140@qq.com"&gt;发邮件&lt;/</span>a&gt;</span><br><span class="line">    <span class="number">4</span>、锚点定位</span><br><span class="line">    <span class="number">5</span>、协议限定</span><br><span class="line">        &lt;a href=<span class="string">"JavaScript:;"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h4><p>元素 == 标签 + 元素内容； -&gt;  </p><p>元素</p><p></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    内联元素(专业叫法) 也叫行间元素 行内元素 inline element ：</span><br><span class="line">    inline element</span><br><span class="line">    不独占一行，无法定义宽高</span><br><span class="line">    strong em del ins</span><br><span class="line"></span><br><span class="line">块级元素 -&gt; block element :</span><br><span class="line">    独占一行、可以定义宽高</span><br><span class="line">    p hx div address</span><br><span class="line"></span><br><span class="line">内联块级元素  -&gt; inline-block element :</span><br><span class="line">    不独占一行、可以定义宽高</span><br><span class="line">    img</span><br><span class="line">    &lt;img src=<span class="string">"img/1.png"</span> alt=<span class="string">""</span> /&gt;<span class="number">123</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_red">提示</span>：块级元素可以嵌套任何元素。<br>p标签不可以嵌套div;<br>a标签不可以嵌套a标签;</p><hr><h5 id="语义化标签和物理化标签的区别"><a href="#语义化标签和物理化标签的区别" class="headerlink" title="语义化标签和物理化标签的区别"></a>语义化标签和物理化标签的区别</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签存在了语义之后：</span><br><span class="line">    <span class="number">1.</span>可读性强</span><br><span class="line">    <span class="number">2.</span>可为维护性强</span><br><span class="line">    <span class="number">3.</span>搜索引擎对语义化的东西是比较青睐的</span><br><span class="line"></span><br><span class="line">    HTML的房子方向：就是语义化的发展的方向</span><br></pre></td></tr></tbody></table></figure><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;前端开发：&lt;/span&gt;&lt;br&gt;结构布局、样式呈现、页面动态交互(js脚本，数据交互处理、数据格式渲染)&lt;/p&gt;
&lt;p&gt;对应：HTML  CSS  JavaScript&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&quot;s_j
      
    
    </summary>
    
    
    
      <category term="HTML/CSS" scheme="https://cokesprit.gitee.io/tags/HTML-CSS/"/>
    
  </entry>
  
  <entry>
    <title>Symbol.iterator 迭代器</title>
    <link href="https://cokesprit.gitee.io/posts/ad9de38b/"/>
    <id>https://cokesprit.gitee.io/posts/ad9de38b/</id>
    <published>2020-10-22T07:58:03.000Z</published>
    <updated>2020-10-22T09:04:56.482Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p><span class="s_jacinth">Iterator</span>是ES6引入的一种新的遍历机制，迭代器有两个核心的概念：<br>1.跌迭代器是一个统一的接口，它的作用是使各种数据结构可被便捷的访问，它是通过一个件为Symbol.iterator的方法来实现。</p><p>2.迭代器是用于遍历数据结构元素的指针（如数据库中的游标）。</p><p><span class="s_jacinth">迭代器</span>：是对数据结构读取的一种方式，有序的，连续的，基于拉取的一种消耗的组织方式；</p><hr><h4 id="迭代过程"><a href="#迭代过程" class="headerlink" title="迭代过程"></a>迭代过程</h4><p>通过Symbol.iterator创建一个迭代器，指向当前数据结构的起始位置；随后通过next方法进行向下迭代指向下一个目标位置，next方法会返回当前位置的对象，对包含了value和done两个属性，value是当前属性的值，done用于判断是否遍历结束;当done为ture时则遍历结束。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前数组上面存在一个迭代器的接口</span></span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator](); </span><br><span class="line"><span class="built_in">console</span>.log(iter); <span class="comment">//Array Iterator&nbsp;{}</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">//{value: 1, done: false} </span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next());<span class="comment">//{value: 2, done: false} </span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next());<span class="comment">//{value: 3, done: false} </span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next());<span class="comment">//{value: 4, done: false} </span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">//{value: undefined, done: true}</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h4><p><span class="s_green">for…of</span> 是ES6新引入的循环，用于替代for..in 和 forEach(),并且支持新的迭代协议。它可用于迭代常规的数据类型，如 Array 、 String 、 Map 和 Set 等等。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr){</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">注意</span>：of操作数碧玺是可迭代，这意味着如果是普通对象则无法进行迭代。如果数据结构类似于数据的形式，<span class="s_red">则可以借助Array.from()</span>方法进行转换迭代。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = {<span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">"zero"</span>, <span class="number">1</span>: <span class="string">"one"</span>};</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 报异常</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arrayLink) {</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常运行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">Array</span>.from(arr)){</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// zero</span></span><br><span class="line"><span class="comment">// one</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="可迭代的数据"><a href="#可迭代的数据" class="headerlink" title="可迭代的数据"></a>可迭代的数据</h4><p>Array 、Map、Set、weekMap、weekSet、arguments; nodeList<br>TypeArray</p><p>对于这些数据类型给一种统一的迭代方法，这就是迭代器的意义所在。</p><hr><h4 id="实现迭代器-gt-Iterator"><a href="#实现迭代器-gt-Iterator" class="headerlink" title="实现迭代器 -> Iterator"></a>实现迭代器 -&gt; Iterator</h4><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; array.length ? {</span><br><span class="line">                value:array[nextIndex++],<span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">            }:</span><br><span class="line">            {</span><br><span class="line">                value: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mIter = makeIterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(mIter.next());</span><br><span class="line"><span class="built_in">console</span>.log(mIter.next());</span><br><span class="line"><span class="built_in">console</span>.log(mIter.next());</span><br><span class="line"><span class="built_in">console</span>.log(mIter.next());</span><br><span class="line"><span class="built_in">console</span>.log(mIter.next());</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="部署Iterator接口"><a href="#部署Iterator接口" class="headerlink" title="部署Iterator接口"></a>部署Iterator接口</h4><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">    start: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    end: [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator](){</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">            arr = [...this.start,...this.end],</span><br><span class="line">            len = arr.length;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(arr.length);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                next(){</span><br><span class="line">                    <span class="keyword">if</span>(index &lt; len){</span><br><span class="line">                        <span class="keyword">return</span> {</span><br><span class="line">                            value: arr[index++],</span><br><span class="line">                            done: <span class="literal">false</span></span><br><span class="line">                        }</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        <span class="keyword">return</span> {</span><br><span class="line">                            value: <span class="literal">undefined</span>,</span><br><span class="line">                            done: <span class="literal">true</span></span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for...of循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj){</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Iterator&quot;&gt;&lt;a href=&quot;#Iterator&quot; class=&quot;headerlink&quot; title=&quot;Iterator&quot;&gt;&lt;/a&gt;Iterator&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;Iterator&lt;/span&gt;是ES6引入的
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数的实质&amp;使用场景</title>
    <link href="https://cokesprit.gitee.io/posts/38c66610/"/>
    <id>https://cokesprit.gitee.io/posts/38c66610/</id>
    <published>2020-10-22T02:19:02.000Z</published>
    <updated>2020-10-22T04:22:32.301Z</updated>
    
    <content type="html"><![CDATA[<h4 id="箭头函数的实质"><a href="#箭头函数的实质" class="headerlink" title="箭头函数的实质"></a>箭头函数的实质</h4><h5 id="箭头函数的this指向问题"><a href="#箭头函数的this指向问题" class="headerlink" title="箭头函数的this指向问题"></a>箭头函数的this指向问题</h5><p>箭头函数的 this 指向是固化的，箭头函数的内部并没有自己的 this ,只能通过父级作用域来获取 this , 这里的this实际是闭包的this。</p><p><span class="s_js">例子一</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> {</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> obj1 = {<span class="attr">a</span>:<span class="number">2</span>};</span><br><span class="line"><span class="keyword">var</span> obj2 = {<span class="attr">a</span>:<span class="number">3</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果一 </span></span><br><span class="line">    <span class="keyword">var</span> bar = foo.call(obj1);</span><br><span class="line">    bar.call(obj2); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果二</span></span><br><span class="line">    <span class="keyword">var</span> bars = foo();</span><br><span class="line">    bars.call(obj2); <span class="comment">//undefined  并没有打印出a 的值</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_js">例子二</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = {</span><br><span class="line">    <span class="comment">// 对象里面的function冒号可以简写</span></span><br><span class="line">    eat(){</span><br><span class="line">        <span class="built_in">console</span>.l0g(<span class="keyword">this</span>); <span class="comment">// person</span></span><br><span class="line">    },</span><br><span class="line">    drind: <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">person.eat(); <span class="comment">//谁调用指向谁</span></span><br><span class="line">person.drind();</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="箭头函数不能作为构造函数来使用"><a href="#箭头函数不能作为构造函数来使用" class="headerlink" title="箭头函数不能作为构造函数来使用"></a>箭头函数不能作为构造函数来使用</h5><p>箭头函数没有this ，不能作为构造函数来使用。</p><hr><h5 id="没有-arguments-对象"><a href="#没有-arguments-对象" class="headerlink" title="没有 arguments 对象"></a>没有 arguments 对象</h5><p>箭头函数没有arguments对象,用 rest(扩展运算符)替代</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="params">()</span> =&gt;</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    }</span><br><span class="line">    test(); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">// 这里打印的是foo的arguments</span></span><br><span class="line">        },<span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    foo();</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="yeid命令不能生效"><a href="#yeid命令不能生效" class="headerlink" title="yeid命令不能生效"></a>yeid命令不能生效</h5><pre><code>yied 命令不能生效，在generator 函数中</code></pre><hr><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>把下面这个函数缓存箭头函数的写法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">value</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        into: <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                after: <span class="function"><span class="keyword">function</span>(<span class="params">afterValue</span>)</span>{</span><br><span class="line">                    array.splice(array.indexOf(afterValue)+ <span class="number">1</span>, <span class="number">0</span>, value);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"> <span class="built_in">console</span>.log(insert(<span class="number">5</span>).into([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>]).after(<span class="number">4</span>));</span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">箭头函数写法</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改成这样  但是还是不建议这么写 因为语义化不是很好</span></span><br><span class="line">    <span class="keyword">let</span> insert = <span class="function">(<span class="params">value</span>) =&gt;</span> ({</span><br><span class="line">        into:<span class="function">(<span class="params">array</span>) =&gt;</span> ({</span><br><span class="line">            after:<span class="function">(<span class="params">afterValue</span>) =&gt;</span> {</span><br><span class="line">                array.splice(array.indexOf(afterValue)+<span class="number">1</span>, <span class="number">0</span>,value);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="箭头函数使用场景总结"><a href="#箭头函数使用场景总结" class="headerlink" title="箭头函数使用场景总结"></a>箭头函数使用场景总结</h4><p><span class="s_jacinth">1、</span>简单的函数表达式，得出唯一的return 的计算，函数内部没有this引用，没有递归、事件绑定、解绑定、用重构箭头函数的方式。</p><p><span class="s_jacinth">2、</span>内层函数的函数的表达式需要的是调用this</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.button = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Button.prototype = {</span><br><span class="line">        init(){</span><br><span class="line">                <span class="keyword">this</span>.bindEvent();   </span><br><span class="line">        },</span><br><span class="line">        bindEvent(){</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 传统方式                                      // 改变this指向 让它指向window</span></span><br><span class="line">                <span class="comment">// this.button.addEventListener('click',this.clickBtn.bind(this),false);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 箭头函数的方式 -&gt; 箭头函数的使用场景            通过父级作用域获取到this</span></span><br><span class="line">                <span class="keyword">this</span>.button.addEventListener(<span class="string">'click'</span>,(e) =&gt; <span class="keyword">this</span>.clickBtn(e),<span class="literal">false</span>)</span><br><span class="line">            </span><br><span class="line">        },</span><br><span class="line">        clickBtn(e){</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Button().init();</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">3、</span>当你考虑用到arguments/sort把类数组转化成数组时</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> args.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> a -b;</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的形式</span></span><br><span class="line"><span class="keyword">const</span> sortNumber = <span class="function">(<span class="params">...numbers</span>) =&gt;</span> numbers.sort( <span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b );</span><br><span class="line"><span class="built_in">console</span>.log(sortNumber([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">56</span>,<span class="number">4554</span>,<span class="number">23</span>,<span class="number">568</span>]));</span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">4、</span>不适合箭头函数的情况：<br>函数声明，执行语句比较多的，<br>还需要用到递归，需要引用函数名，<br>以及事件绑定、解绑定，避免用 箭头函数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;箭头函数的实质&quot;&gt;&lt;a href=&quot;#箭头函数的实质&quot; class=&quot;headerlink&quot; title=&quot;箭头函数的实质&quot;&gt;&lt;/a&gt;箭头函数的实质&lt;/h4&gt;&lt;h5 id=&quot;箭头函数的this指向问题&quot;&gt;&lt;a href=&quot;#箭头函数的this指向问题&quot; class
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>this指向总结&amp; 箭头函数基本形式</title>
    <link href="https://cokesprit.gitee.io/posts/3e85b841/"/>
    <id>https://cokesprit.gitee.io/posts/3e85b841/</id>
    <published>2020-10-18T10:57:33.000Z</published>
    <updated>2020-10-18T11:47:06.078Z</updated>
    
    <content type="html"><![CDATA[<h4 id="this-指向总结"><a href="#this-指向总结" class="headerlink" title="this 指向总结"></a>this 指向总结</h4><p><span class="s_jacinth">1、默认绑定规则</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// a(); // 严格模式下是undefined，正常模式下是window</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">2、隐式绑定：谁调用指向谁</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">// this 是obnj</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    foo:foo</span><br><span class="line">}</span><br><span class="line"><span class="comment">// obj.foo(); </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'window'</span></span><br><span class="line">bar(); <span class="comment">// -&gt; window.bar();  </span></span><br><span class="line"><span class="comment">// this指向window，bar执行时打印 window</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">3、显示绑定</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call(obj,a,b,c)</span><br><span class="line">apply(obj,[a,b,c])</span><br><span class="line">bind(obj,a,b,c)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 前面两个是函数执行，后面的bind是函数体本身</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">4、new  -&gt; 优先级最高</span></p><hr><p><span class="s_green">补充</span>：优先级别：new &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p><hr><h4 id="箭头函数的基本形式"><a href="#箭头函数的基本形式" class="headerlink" title="箭头函数的基本形式"></a>箭头函数的基本形式</h4><p>箭头函数本质上最需要做的一件事情就是this 指向问题。<br><span class="s_yellow">=&gt; 箭头函数</span></p><h5 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="params">()</span> =&gt;</span> {} <span class="comment">//箭头函数表达式</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">第一个形式 </span><br>参数只有一个参数情况下可以省略括号，return 是一个表达式可以把大括号省略掉</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">a</span> =&gt;</span> a;  <span class="comment">// (a) =&gt; a; 这样好看一点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">第二形式</span></p><p>参数不是一个的时候，必须加上括号</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fb = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不指定返回值它会返回一个undefined</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="function">(<span class="params">a,b</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a+b);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(fs()); <span class="comment">// 分别输出 7 和undefined</span></span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_jacinth">第三种 </span><br>箭头函数和结构赋值一起使用，<br>函数执行的时候才能解构赋值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  full = <span class="function">(<span class="params">{first,last} = {}</span>) =&gt;</span> first + <span class="string">''</span> + last;</span><br><span class="line">            <span class="built_in">console</span>.log(full({<span class="attr">first</span>:<span class="number">3</span>,<span class="attr">last</span>:<span class="number">5</span>}));</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="箭头函数简单应用"><a href="#箭头函数简单应用" class="headerlink" title="箭头函数简单应用"></a>箭头函数简单应用</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">122</span>,<span class="number">34</span>,<span class="number">234</span>,<span class="number">354</span>,<span class="number">3456</span>,<span class="number">3545</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="箭头函数的问题"><a href="#箭头函数的问题" class="headerlink" title="箭头函数的问题"></a>箭头函数的问题</h4><p><span class="s_jacinth">在箭头函数里面没有arguments</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在箭头函数里面没有arguments</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">a,b</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 报错 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**箭头函数并不是用function </span></span><br><span class="line"><span class="comment">    * 来定义的而是用胖箭头 =&gt; ,</span></span><br><span class="line"><span class="comment">    * 它们本质是两个东西</span></span><br><span class="line"><span class="comment">    * =&gt; 函数并不是function的简写或缩写</span></span><br><span class="line"><span class="comment">    * **/</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="spread-rest-运算符-展开或收集"><a href="#spread-rest-运算符-展开或收集" class="headerlink" title="spread/rest 运算符(展开或收集)"></a>spread/rest 运算符(展开或收集)</h4><p><span clsss="s_jacinth">… spread/rest 运算符</span>：用来(展开或收集)ES6新增的语法运算符可以用来替代arguments</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(args); <span class="comment">// 打印出一个真正的数组</span></span><br><span class="line">}</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// es5 利用 apply 来模拟 参数是null/undefined不会生效</span></span><br><span class="line">foo.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]); <span class="comment">//打印1 2 3</span></span><br><span class="line">foo.apply(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]); <span class="comment">//打印1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line">    <span class="comment">// es6</span></span><br><span class="line">        <span class="keyword">let</span> a = [<span class="number">2</span> ,<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> b = [<span class="number">1</span>,...a, <span class="number">5</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="comment">// es5</span></span><br><span class="line">        <span class="keyword">var</span> a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">var</span> b = [<span class="number">1</span>].concat(a,[<span class="number">5</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><span class="s_jacinth">！！！</span> 不可以通过length找 rest 的长度</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;this-指向总结&quot;&gt;&lt;a href=&quot;#this-指向总结&quot; class=&quot;headerlink&quot; title=&quot;this 指向总结&quot;&gt;&lt;/a&gt;this 指向总结&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;1、默认绑定规则&lt;/span&gt;&lt;/p
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6解构赋值</title>
    <link href="https://cokesprit.gitee.io/posts/4783bbff/"/>
    <id>https://cokesprit.gitee.io/posts/4783bbff/</id>
    <published>2020-10-18T09:52:50.000Z</published>
    <updated>2020-10-18T10:39:57.437Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>解构赋值是对赋值运算的扩展。它是一种针对数组或者对象进行模式进行模式匹配，然后对其中的的变量进行赋值。</p><hr><h4 id="解构模型"><a href="#解构模型" class="headerlink" title="解构模型"></a>解构模型</h4><p>在解构中，有下面两部分参与：<br>解构的源，解构赋值表达式的最右边。<br>解构的目标，解构赋值表达式的左边部分。</p><hr><h4 id="数组模型的解构"><a href="#数组模型的解构" class="headerlink" title="数组模型的解构"></a>数组模型的解构</h4><h5 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br><span class="line"><span class="comment">// c = 4</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="可嵌套"><a href="#可嵌套" class="headerlink" title="可嵌套"></a>可嵌套</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> = [a,[[b],c]] = [<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="可忽略"><a href="#可忽略" class="headerlink" title="可忽略"></a>可忽略</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b] = []; <span class="comment">// a = 1, b = undefined</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="剩余运算符"></a>剩余运算符</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1;</span></span><br><span class="line"><span class="comment">// b = [1,2]</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="字符串等"><a href="#字符串等" class="headerlink" title="字符串等"></a>字符串等</h5><p>在数组的解构中，解构的目标若为可遍历对象，皆可以进行解构赋值。课遍历对象既实现 Iterator 接口数据。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">let</span> [a, b, c, d, e] = <span class="string">"hellos"</span>);</span><br><span class="line"><span class="comment">// a = 'h'</span></span><br><span class="line"><span class="comment">// b = 'e'</span></span><br><span class="line"><span class="comment">// c = 'l'</span></span><br><span class="line"><span class="comment">// d = 'l'</span></span><br><span class="line"><span class="comment">// e = 'o'</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="解构默认值"><a href="#解构默认值" class="headerlink" title="解构默认值"></a>解构默认值</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line">    <span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>]; <span class="comment">// a = 2</span></span><br><span class="line">    <span class="comment">/* 当解构赋值有匹配结果，</span></span><br><span class="line"><span class="comment">    且匹配结果是undefined时，</span></span><br><span class="line"><span class="comment">    会触发默认值作为返回结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line">    <span class="keyword">let</span> [a = <span class="number">3</span>,b = a] = []; <span class="comment">// a = 3,b = 3</span></span><br><span class="line">    <span class="keyword">let</span> [a = <span class="number">3</span>,b = a] = [<span class="number">1</span>] <span class="comment">// a = 1, b = 1</span></span><br><span class="line">    <span class="keyword">let</span> [a = <span class="number">3</span>,b = a] = [<span class="number">1</span>,<span class="number">2</span>]; <span class="comment">// a = 1, b = 2、</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_green">例子二</span><br>a 与 b 匹配结果为 undefined ，触发默认值：a = 3; b = a =3<br>a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：b = a =1<br>a 与 b 正常解构赋值，匹配结果：a = 1，b = 2</p><hr><h4 id="对象模型的解构"><a href="#对象模型的解构" class="headerlink" title="对象模型的解构"></a>对象模型的解构</h4><h5 id="基本-1"><a href="#基本-1" class="headerlink" title="基本"></a>基本</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> { foo, bar } = { <span class="attr">foo</span>:<span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> };</span><br><span class="line"><span class="comment">// foo = 'aaa'</span></span><br><span class="line"><span class="comment">// bar = 'bbb'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> { <span class="attr">baz</span> : foo } = { <span class="attr">baz</span> : <span class="string">'ddd'</span> };</span><br><span class="line"><span class="comment">// foo = 'ddd'</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="可嵌套可忽略"><a href="#可嵌套可忽略" class="headerlink" title="可嵌套可忽略"></a>可嵌套可忽略</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可嵌套</span></span><br><span class="line">    <span class="keyword">let</span> obj = {<span class="attr">p</span>: [<span class="string">'hello'</span>,{<span class="attr">y</span>: <span class="string">'world'</span>}] };</span><br><span class="line">    <span class="keyword">let</span> {<span class="attr">p</span>: [x,{ y }]} = obj;</span><br><span class="line">    <span class="comment">// x = 'hello'</span></span><br><span class="line">    <span class="comment">// y = 'world'}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可忽略</span></span><br><span class="line">    <span class="keyword">let</span> obj = {<span class="attr">p</span>: [<span class="string">'hello'</span>, {<span class="attr">y</span>: <span class="string">'world'</span>}] };</span><br><span class="line">    <span class="keyword">let</span> {<span class="attr">p</span>: [x,{ }] } = obj</span><br><span class="line">    <span class="comment">// x = 'hell</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="不完全解构-1"><a href="#不完全解构-1" class="headerlink" title="不完全解构"></a>不完全解构</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {<span class="attr">p</span>: [{y,<span class="string">'world'</span>}] };</span><br><span class="line"><span class="keyword">let</span> {<span class="attr">p</span>: [{ y },x ] } = obj;</span><br><span class="line"><span class="comment">// x = undefined</span></span><br><span class="line"><span class="comment">// y = 'world'</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="剩余运算符-1"><a href="#剩余运算符-1" class="headerlink" title="剩余运算符"></a>剩余运算符</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> {a,b,...rest} = {<span class="attr">a</span>: <span class="number">10</span>,<span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>:<span class="number">30</span>, <span class="attr">d</span>:<span class="number">40</span>};</span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br><span class="line"><span class="comment">// rest = {c: 30, d: 40}</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="解构默认值-1"><a href="#解构默认值-1" class="headerlink" title="解构默认值"></a>解构默认值</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">10</span>, b = <span class="number">4</span>] = {<span class="attr">a</span>:<span class="number">3</span>};</span><br><span class="line"><span class="comment">// a = 3; b = 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {<span class="attr">a</span>: aa = <span class="number">10</span>,<span class="attr">b</span>: bb = <span class="number">5</span>} = {<span class="attr">a</span>: <span class="number">3</span>};</span><br><span class="line"><span class="comment">// aa = 3; bb = 5;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;解构赋值是对赋值运算的扩展。它是一种针对数组或者对象进行模式进行模式匹配，然后对其中的的变量进行赋值。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;解
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>块级作用域&amp;let&amp;暂行性死区</title>
    <link href="https://cokesprit.gitee.io/posts/dcc531c7/"/>
    <id>https://cokesprit.gitee.io/posts/dcc531c7/</id>
    <published>2020-10-18T04:19:16.000Z</published>
    <updated>2020-10-18T09:22:57.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>在说块级作用域之前我们先了解<span class="s_green">函数作用域</span>和<span class="s_green">全局作用域</span><br>这个两个东西其实是一个隐式的对象，是访问不到的，在函数执行的前一刻会产生这样一个对象[[scope]],它的第0位如果是在全局的作用域下的话那么存的是GO；如果是在函数的作用域那么执行的前一刻它就会产生相应的AO存在第0位并且把GO挤下去，这个就是作用域的具体概念;里面存储的是就是AO和GO。</p><hr><p><span class="s_jacinth">预编译的五步：</span><br>    <span class="s_red">AO：</span><br>        1、创建AO对象<br>        2、找形参然后找var关键字赋值undefined<br>        3、形参和实参相统一<br>        4、找function 赋值为函数体<br>        5、执行</p><pre><code>GO：和上面是一样的 就是没有形参和实参统一</code></pre><hr><p><span class="s_jacinth">块级作用域的产生</span><br>在预编译的时候会有一个寻找var的过程，这个过程就是声明提升，声明提升会赋值为undefined或者替换，如果是替换的话就会造成变量的污染;ES5的解决解决方法是立即执行函数；通过封闭自己的作用域解决一部分问题，针对这个现状产生了 <span class="s_yellow">let语法 -&gt; 块级作用域概念</span></p><hr><h4 id="let-amp-暂行性死区"><a href="#let-amp-暂行性死区" class="headerlink" title="let &amp; 暂行性死区"></a>let &amp; 暂行性死区</h4><p>为了解决变量污染的问题，针对这个现状产生了let语法。</p><p><span class="s_jacinth">let特征：</span></p><h5 id="let不能在同一作用域下声明"><a href="#let不能在同一作用域下声明" class="headerlink" title="let不能在同一作用域下声明"></a>let不能在同一作用域下声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这种情况就会报错，a在预编译的时候已经被定义了，</span></span><br><span class="line"><span class="comment">    然后let再定义，这种也叫重复定义。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>{</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line">test();</span><br></pre></td></tr></tbody></table></figure><h5 id="let不会声明提升，会产生一个暂时性死区"><a href="#let不会声明提升，会产生一个暂时性死区" class="headerlink" title="let不会声明提升，会产生一个暂时性死区"></a>let不会声明提升，会产生一个暂时性死区</h5><p><span class="s_green">暂时性死区</span>：在let定义之前所定义的变量会产生一个死区。提升范围之前就叫暂时性死区。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下例子都会报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = b;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x = y, y =<span class="number">2</span></span>)</span>{</span><br><span class="line">        <span class="comment">/* 这也是一个死区，</span></span><br><span class="line"><span class="comment">        先将y赋值给x但y并没有被定义y是在赋值之后才被定义的*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(x,y);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="keyword">let</span> a;</span><br></pre></td></tr></tbody></table></figure><h5 id="let只在当前的作用域下生效"><a href="#let只在当前的作用域下生效" class="headerlink" title="let只在当前的作用域下生效"></a>let只在当前的作用域下生效</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子1</span></span><br><span class="line"><span class="keyword">for</span>(;<span class="number">1</span>;){ <span class="comment">// 死循环</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>){</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 报错，它们不在同一作用域中，访问不到a</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++){</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子4</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>l i++){</span><br><span class="line">    arr[i] = function()[</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++){</span><br><span class="line">    arr[i]();</span><br><span class="line">    <span class="comment">// 打印0-9并不是 两个10 因为 i被覆盖了</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span>  i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++){</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        大括号里面的i是在父级作用域()之下的</span></span><br><span class="line"><span class="comment">        这两个i并不是相同的i</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 打印十个a</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 本质就是为js增加一个块级作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子6</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>){</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">11</span>;</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/* 如果换成var 的话会被提升到全局,</span></span><br><span class="line"><span class="comment">        let不会提升 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//11</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="块级作用域运行嵌套函数声明"><a href="#块级作用域运行嵌套函数声明" class="headerlink" title="块级作用域运行嵌套函数声明"></a>块级作用域运行嵌套函数声明</h4><p>不推荐这函数声明，建议缓存函数表达式</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>){</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{}</span><br><span class="line">}<span class="keyword">catch</span>(e){</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议写成这样</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>){</span><br><span class="line">    <span class="comment">// 表达式</span></span><br><span class="line">    <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="块级作用域并没有返回值"><a href="#块级作用域并没有返回值" class="headerlink" title="块级作用域并没有返回值"></a>块级作用域并没有返回值</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span>){</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">for</span>(;<span class="number">1</span>;){</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>块级作用域它等于匿名函数的立即调用吗? 这个说法是不准确的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h4&gt;&lt;p&gt;在说块级作用域之前我们先了解&lt;span class=&quot;s_green&quot;&gt;函数作用域&lt;/span&gt;和&lt;span cla
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>babel搭建</title>
    <link href="https://cokesprit.gitee.io/posts/d624f1ca/"/>
    <id>https://cokesprit.gitee.io/posts/d624f1ca/</id>
    <published>2020-10-17T12:56:58.000Z</published>
    <updated>2020-10-17T14:14:39.114Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_jacinth">babel:</span>编译工具将ES6语法转化成ES5。<br>babel需要npm包管理器进行安装，npm只能在node环境实现，装了node就安装了npm。</p><h4 id="babel安装步骤"><a href="#babel安装步骤" class="headerlink" title="babel安装步骤"></a>babel安装步骤</h4><p>1、安装node</p><hr><p>2、在项目的目录中生成package.json文件</p><p><span class="s_jacinth">npm init –y</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">注意：</span>项目目录中不能含又中文名！！！ –y是默认值的package.js,不用的话，在生成过程中会有一大堆问题，我们依次填入就好。</p><hr><p>3、安装 babel-cli 用于命令行转码</p><p><span class="s_jacinth">npm install -g babel-cli</span> 全局安装</p><p><span class="s_jacinth">npm install –save-dev babel-cli</span> 局部安装<br>根据建议选用局部安装</p><hr><p>4、安装转码规则<br><span class="s_jacinth">npm install -save-dev babel-preset-es2015</span></p><p>安装完成后想知道是否成功查看package.json中是否生成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>5、配置.babelrc<br>在更目录下建立 <span class="s_jacinth">.babelrc</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>prests是规则，plugins是插件支持，接下来就可以转码了</p><hr><p>6、开始开始转码<br>    建立app.js用es6的语法写</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">npm run build</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/d624f1ca/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;babel:&lt;/span&gt;编译工具将ES6语法转化成ES5。&lt;br&gt;babel需要npm包管理器进行安装，npm只能在node环境实现，装了node就安装了npm。&lt;/p&gt;
&lt;h4 id=&quot;babel安装步骤&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6版本过渡历史</title>
    <link href="https://cokesprit.gitee.io/posts/4328cb48/"/>
    <id>https://cokesprit.gitee.io/posts/4328cb48/</id>
    <published>2020-10-17T12:50:21.000Z</published>
    <updated>2020-10-17T12:56:21.671Z</updated>
    
    <content type="html"><![CDATA[<pre><code>HTML1,HTML2,HTML3 -&gt; 1991-1997  组织 -&gt; IETF(the Internet Enginering Task Force) 国际互联网工程任务组织HTML3.2 -&gt; 1997.1      W3C -&gt; 万维网联盟ECMA ECMA-262 ECMAscript 脚本语言规范：    1995 LiveScript  --&gt; JavaScript （蹭JAVA的热度）    1996 JavaScript 1.0 1.1；    1997 Jscript  -&gt; 网景公司 gg    1997.6 ECMAscript 1.0 发布当初发布的 JavaScript1.1为蓝本    1998.6 ECMAscript 2.0     1999.12 ECMAscript 3.0  -&gt; es5     2000 ECMAscript 4.0 草案并没有通过：        版本太过激进，基本是对3.0的摒弃        组织：TC39（technical committe 39)    2007 ECMAscript 4.0 准备发布，不发布：        除了JavaScript的一小部分的创造支持，其他都不支持    2008.7 ECMAscript 3.1 -&gt; ECMAscript5(改名) 大会(hamony)        实在没有办法迫于舆论发布只在3.0版本做了小幅度改动        版本代号：            JavaScript.next              JavaScript.next.next    2009.12         ECMAscript5 (正式发布)        JavaScript.next -&gt; 放入草案 ES6        JavaScript.next.next -&gt; 放入草案 ES7    2011.6 ECMAscript5.1    2013.3 JavaScript.next(草案冻结)    2013.6 JavaScript.next(草案冻结)    2015.6 ECMAScript6 正式发布：        2000年提出 2015年发布        从这里每年6月份出来新版本升级    ES6 -&gt; ECMAscript2016 ECMAscript2017 ECMAscript2018         小版本改动  </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;HTML1,HTML2,HTML3 -&amp;gt; 1991-1997  
组织 -&amp;gt; IETF(the Internet Enginering Task Force) 国际互联网工程任务组织

HTML3.2 -&amp;gt; 1997.1      W3C 
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="https://cokesprit.gitee.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="https://cokesprit.gitee.io/posts/f3334fd0/"/>
    <id>https://cokesprit.gitee.io/posts/f3334fd0/</id>
    <published>2020-10-17T07:42:22.000Z</published>
    <updated>2020-10-22T02:07:53.850Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AJAX前奏"><a href="#AJAX前奏" class="headerlink" title="AJAX前奏"></a>AJAX前奏</h4><p><span class="s_jacinth">前言:</span><br>1、浏览器与服务器之间的通信基础是HTTP协议<br>2、用户通过网址或表单向服务器提交请求，服务器向浏览器发送相应的响应。</p><p><span class="s_jacinth">混编模式：</span></p><p>服务端的代码跟客服端的代码写在一起。例如前端和后端一起写在一个页面里面，文件后缀名必须是后端的那个语言，不能写html，因为html是解析不了服务端的代码的，而php为后缀的页面它是可以嵌入html的代码的。</p><p><span class="s_red">混编模式的缺点：</span>不好维护、前后端分离比较难。<br>前端程序员：前端程序员是在有了AJAX和异步了以后才有了前后端之分的。</p><hr><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><p><span class="s_jacinth">全称:</span> Asynchronous JavaScript and XML (异步的JavaScript 和 XML)。<br><span class="s_red">历史：</span><br>1999 IE5.0 允许JS脚本向服务器单独发起HTTP请求的新功能<br>2004 Gmail 退出异步邮件更新服务<br>2005 Google Map 异步更新地图服务<br>2005 AJAX被大厂公认命名<br>2005 W3C发布AJAX国际标准</p><p>AJAX不是新的编程语言，而是一种使用现有标准的新方法。<br>AJAX是与服务器交互数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</p><p><span class="s_red">JavaScript异步通信：</span>请求服务器返回JSON/XML文档从前端JSON/XML文档中提取数据，在不刷新整个页面的基础上渲染到相应的位置。</p><p><span class="s_red">同步请求：</span>点击跳转然后出数据这叫同步<br><span class="s_red">异步：</span>异步不刷新页面，不跳转，只请求数据</p><p><span class="s_red">AJAX主要做</span>向服务器发送一个请求，这个请求是请求一段数据然后服务器就返回这样一段数据，返回来以后我拿到这个数据直接去整理这个数据然后把内容给更新。</p><h5 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h5><p>原生AJAX：<span class="s_green">XMLHttpRequest</span> 对象与 <span class="s_green">Active</span>  对象</p><p><span class="s_red">作用：</span>js脚本HTTP请求的发起必须通过XMLHttpRequest对象也是通过AJAX进行浏览器与服务器通信的接口不局限于XML，可以发送任何格式的数据。</p><p><span class="s_red">XMLHttpRequest</span>本身是一个JS引擎内置的构造函数所有XMLHttpRequest对象都需要被实例化 var xhr = new XMLHttpRequest。</p><p><span class="s_red">兼容性：</span>IE5/IE6 使用Active对象<br>var xhr = new ActiveXObject(‘Micrsoft.XMLHTTP’);</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容性写法</span></span><br><span class="line"><span class="keyword">var</span> xhr ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest){</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Mcisoft.XMLHTTP'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(xhr);</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="AJAX发送HTTP请求"><a href="#AJAX发送HTTP请求" class="headerlink" title="AJAX发送HTTP请求"></a>AJAX发送HTTP请求</h5><p>实例化出来的xhr有两个方法：<br><span class="s_jacinth">open()</span> 发送设置：<br><span class="s_red">参数：</span>open(method,url,async)<br><span class="s_red">method:</span> 请求方式<br><span class="s_red">url:</span> 请求发送的地址<br><span class="s_red">async:</span> false同步 true异步，建议都用ture</p><p><span class="s_jacinth">send()</span>发送请求：<br><span class="s_red">参数：</span><br>发送POST请求体用数据，GET请求不用填写。</p><hr><h5 id="AJAX-发送请求时的响应状态"><a href="#AJAX-发送请求时的响应状态" class="headerlink" title="AJAX-发送请求时的响应状态"></a>AJAX-发送请求时的响应状态</h5><p><span class="s_jacinth">onreadyStatechange事件：</span><br>挂载到XMLHttpRequest对象上的事件。每当readyState改变时，就会触发onreadystatechange事件</p><p><span class="s_jacinth">readyState状态：</span><br>通过XMLHttpRequest对象发送HTTP请求的各阶段状态(0-4)<br>0：请求未初始化<br>1：服务器连接一建立<br>2：请求以接收<br>3：请求处理中<br>4：请求已完成，且响应已就绪</p><p><span class="s_red">注释：</span>onreadystatechange 事件被触发5次(0-4),对应着readyState的每个变化。</p><p><span class="s_jacinth">status状态：</span><br>服务器响应的状态码<br>200:”OK”<br>400:”未找到页面”</p><p>当readyState等于4且状态为200时，表示响应以就绪。</p><p><span class="s_jacinth">responseText 属性</span><br>获得字符串形式的响应数据<br><span class="s_red">语法：</span>xhr.responseText</p><p><span class="s_jacinth">responseXML 属性</span><br>获得XML形式的响应数据<br><span class="s_red">语法：</span>xhr.responseXML</p><p><span class="s_jacinth">AJAX-POST请求方式的主要事项</span></p><p>POST请求方式下，send方法参数中的格式：a=1&amp;b=2&amp;c=3</p><p>xhr.setRequestHeader(‘Content-Type’,’application/X-www-from-urlencoded’);<br>POST请求必须设置这个请求头信息，目的是请求体中的数据转化为键值对，这样后端a=1&amp;b=2&amp;c=3这样的数据才知道这是一个POST方式传来的数据</p><p>还有一点xhr.open是在xhr.send前面设置才有用</p><hr><h5 id="ajax的三种方式"><a href="#ajax的三种方式" class="headerlink" title="ajax的三种方式"></a>ajax的三种方式</h5><p>这三种都基于jQuery在使用的时候要引入jQuery<br><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">    $.ajax({</span><br><span class="line">        url:<span class="string">"http://localhost:8086/myItem/class/data/data.json"</span>, <span class="comment">// 请求地址</span></span><br><span class="line">        type:<span class="string">'POST'</span>, <span class="comment">// 请求方式</span></span><br><span class="line">        dataType: <span class="string">'JSON'</span>,</span><br><span class="line">        data: { <span class="comment">// 数据体</span></span><br><span class="line">            status: <span class="number">1</span> </span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 成功之后的回调函数</span></span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line">    $.post(<span class="string">"http://localhost:8086/myItem/class/data/data.json"</span>,</span><br><span class="line">    {<span class="attr">stadus</span>: <span class="number">1</span>},<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">    $.<span class="keyword">get</span>('http://localhost:8086/myItem/class/server/get_coursesajax.php?status=1',</span><br><span class="line">        function(data){</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><h5 id="原生AJAX请求数据"><a href="#原生AJAX请求数据" class="headerlink" title="原生AJAX请求数据"></a>原生AJAX请求数据</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="comment">// 1、创建HttpRequest对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest){</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest();</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Mcisoft.XMLHTTP'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState); <span class="comment">// 输出各个阶段的状态码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、配置请求发送</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"http://localhost:8086/myItem/class/server/get_coursesajax.php?status=1"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.send(); <span class="comment">// 发送HTTP请求</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、监听请求的状态和响应的状态</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.readyState);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听请求的状态和响应的状态</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>){</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText); <span class="comment">// 返回的是json字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、接到响应的数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">        <span class="comment">// 使用JSON.parse 把json字符串解析成JSON对象</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f3334fd0/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="AJAX封装"><a href="#AJAX封装" class="headerlink" title="AJAX封装"></a>AJAX封装</h5><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">var</span> xhr = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> o = <span class="built_in">window</span>.XMLHttpRequest?</span><br><span class="line">            <span class="keyword">new</span> XMLHttpRequest:</span><br><span class="line">            <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果浏览器的版本是IE5或者IE4时</span></span><br><span class="line">    <span class="keyword">if</span>(!o){</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'您的浏览器不支持异步发起HTTP请求'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_doAjax</span>(<span class="params">opt</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> opt = opt || {},</span><br><span class="line">            type = (opt.type || <span class="string">'GET'</span>).toUpperCase(), <span class="comment">//获取方式都转化为大写</span></span><br><span class="line">            <span class="keyword">async</span> = opt.async || <span class="literal">true</span>,</span><br><span class="line">            url = opt.url,</span><br><span class="line">            data = opt.data || <span class="literal">null</span>, <span class="comment">// 如果是GET请求data就等于null</span></span><br><span class="line">            error = opt.error || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},</span><br><span class="line">            success = opt.success || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},</span><br><span class="line">            complete = opt.complete || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}; <span class="comment">// 无论成功还是失败这个函数都执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果url没配置的话就抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(!url){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Errow(<span class="string">'您没有填写URL'</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        o.open(type,url,<span class="keyword">async</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是post才设置 </span></span><br><span class="line">        type === <span class="string">'POST'</span> &amp;&amp; o.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">        o.send(type === <span class="string">'GET'</span> ? <span class="literal">null</span> : formatDatas(data));</span><br><span class="line">        </span><br><span class="line">        o.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">if</span>(o.readyState === <span class="number">4</span> &amp;&amp; o.status === <span class="number">200</span>){</span><br><span class="line">                success(<span class="built_in">JSON</span>.parse(o.responseText));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(o.status === <span class="number">400</span>){</span><br><span class="line">                error();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            complete(); <span class="comment">// 无论成功还是失败这个函数都执行</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将对象转成成 status=1&amp;flag=2 这种格式</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatDatas</span>(<span class="params">obj</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj){</span><br><span class="line">            str += key + <span class="string">'='</span> + obj[key] + <span class="string">'&amp;'</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;$/</span>,<span class="string">''</span>); <span class="comment">// 写一个正则表达式判断最后面一个是不是&amp;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        ajax:<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>{</span><br><span class="line">            _doAjax(opt);</span><br><span class="line">        },</span><br><span class="line">        post:<span class="function"><span class="keyword">function</span>(<span class="params">url,data,callback</span>)</span>{</span><br><span class="line">            _doAjax({</span><br><span class="line">                type:<span class="string">'POST'</span>,</span><br><span class="line">                url: url,</span><br><span class="line">                data:data,</span><br><span class="line">                success: callback</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        <span class="keyword">get</span>:function(url,callback){</span><br><span class="line">            _doAjax({</span><br><span class="line">                type:<span class="string">'GET'</span>,</span><br><span class="line">                url:url,</span><br><span class="line">                success:callback</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><hr><p><span class="s_js">使用ajax</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用xhr.ajax</span></span><br><span class="line">    xhr.ajax({</span><br><span class="line">        type:<span class="string">'POST'</span>,</span><br><span class="line">        url:<span class="string">'http://localhost:8086/myItem/class/server/get_courses.php'</span>,</span><br><span class="line">        data:{</span><br><span class="line">            status:<span class="number">1</span>,</span><br><span class="line">            flag:<span class="number">2</span></span><br><span class="line">        },</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用xhr.post</span></span><br><span class="line">    xhr.post(<span class="string">'http://localhost:8086/myItem/class/server/get_courses.php'</span>,{</span><br><span class="line">        status:<span class="number">1</span>,</span><br><span class="line">        flag:<span class="number">2</span></span><br><span class="line">    },<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用xhr.get</span></span><br><span class="line"></span><br><span class="line">xhr.get(<span class="string">'http://localhost:8086/myItem/class/server/get_coursesajax.php?status=1&amp;flag=2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AJAX前奏&quot;&gt;&lt;a href=&quot;#AJAX前奏&quot; class=&quot;headerlink&quot; title=&quot;AJAX前奏&quot;&gt;&lt;/a&gt;AJAX前奏&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;前言:&lt;/span&gt;&lt;br&gt;1、浏览器与服务器之间的通信基础
      
    
    </summary>
    
    
    
      <category term="AJAX" scheme="https://cokesprit.gitee.io/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JSON基础、方法</title>
    <link href="https://cokesprit.gitee.io/posts/987b192d/"/>
    <id>https://cokesprit.gitee.io/posts/987b192d/</id>
    <published>2020-10-17T02:35:55.000Z</published>
    <updated>2020-10-17T07:39:02.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h4><p>JSON全称是“JavaScript Object Notation”,是JavaScript对象的延伸;为了数据交互存在。<br>JSON特点：选用映射模式来形成比较轻量级的数据结构。<br>JSON一定是对象但是JavaScript的对象就不一定是JSON。</p><hr><h4 id="JSON的书写格式"><a href="#JSON的书写格式" class="headerlink" title="JSON的书写格式"></a>JSON的书写格式</h4><p>1.映射用冒号隔开<br>2.并列数据用逗号隔开<br>3.映射的集合用{}包裹<br>4.键名一定要有双引号<br>5.并列数据集合用[]包裹</p><p>JavaScript</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、映射用冒号隔开</span></span><br><span class="line">  <span class="keyword">var</span>  str1 =  {</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、并列数据用逗号隔开</span></span><br><span class="line">   <span class="keyword">var</span>  str2 =  {</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、映射的集合用</span></span><br><span class="line">   <span class="keyword">var</span>  str3 =  {</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">22</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、键名一定要用双引号</span></span><br><span class="line">  <span class="keyword">var</span>  str4 =   {</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"age"</span>: <span class="number">22</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="comment">//5、 并列数据集合用[]包裹</span></span><br><span class="line">    <span class="keyword">var</span>  str5 =  [</span><br><span class="line">            {</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">                <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">                <span class="string">"age"</span>: <span class="number">22</span></span><br><span class="line">            }</span><br><span class="line">        ];</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h4><p><span class="s_green">JSON.parse(text,reviver)</span>将JSON字符串转化成JSON对象<br><span class="s_red">text:</span>必需,一个有效的 JSON 字符串。<br><span class="s_red">reviver:</span>可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</p><p><span class="s_green">JSON.stringify()</span>将JavaScript对象转换成JSON字符串。可以将JavaScript数组转换成JSON,不能保存Date对象，JSON.stringify() 会将所有日期转换为字符串。</p><p><span class="s_jacinth">例子</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 注意键名一定要用双引号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-info</span>=<span class="string">'{"name":"张三","age":25}'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> info = oDiv.getAttribute(<span class="string">'data-info'</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="comment">// 将数据转化为JavaScript对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(info); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(jsonData);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDivtwo = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj = {</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>:<span class="string">"王五"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"age"</span>:<span class="number">18</span></span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将JavaScript对象转换成JSON字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</span></span><br><span class="line"><span class="actionscript">        oDivtwo.setAttribute(<span class="string">'data-info'</span>,str);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/987b192d/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/987b192d/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>实际上最早期的时候不是用JSON，而是用XML来做数据交互的而是用自定义标签，不过 -&gt; 解析难度大，损耗性能。XML数据文档很大、不宜阅读、解析难度比较复杂。现在XML还是有在用的服务器端与服务器通信的时候，做数据交互的时候XML用的还比较多的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是JSON&quot;&gt;&lt;a href=&quot;#什么是JSON&quot; class=&quot;headerlink&quot; title=&quot;什么是JSON&quot;&gt;&lt;/a&gt;什么是JSON&lt;/h4&gt;&lt;p&gt;JSON全称是“JavaScript Object Notation”,是JavaScript对象的
      
    
    </summary>
    
    
    
      <category term="JSON" scheme="https://cokesprit.gitee.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>鼠标行为坐标系、pageXY封装、拖拽函数封装</title>
    <link href="https://cokesprit.gitee.io/posts/ed50b3e1/"/>
    <id>https://cokesprit.gitee.io/posts/ed50b3e1/</id>
    <published>2020-10-14T15:03:06.000Z</published>
    <updated>2020-10-15T08:59:20.777Z</updated>
    
    <content type="html"><![CDATA[<h4 id="鼠标行为-gt-坐标系"><a href="#鼠标行为-gt-坐标系" class="headerlink" title="鼠标行为 -> 坐标系"></a>鼠标行为 -&gt; 坐标系</h4><p><span class="s_green">clientX/Y</span> 鼠标位置相对于当前可视区域的坐标（不包括滚动条的位置）</p><p><span class="s_green">pageX/Y</span> 鼠标位置相对于当前文档的坐标（包含滚动条的距离 IE9以下不支持）</p><p><span class="s_green">layerX/Y</span> 同pageX/Y相同但是 IE11以下同clientX/Y相同（不推荐使用）</p><p><span class="s_green">screenX/Y</span> 鼠标位置相对于屏幕的坐标</p><p><span class="s_green">offsetX/Y</span> 鼠标位置相对于有定位的父级元素的坐标（包含边框，但是safari不包括边框）</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"clientX:"</span>+e.clientX,</span><br><span class="line">        <span class="string">"layerX:"</span>+e.layerX,</span><br><span class="line">        <span class="string">"screenX:"</span>+e.screenX,</span><br><span class="line">        <span class="string">"offsetX:"</span>+e.offsetX,</span><br><span class="line">        <span class="string">"pageX:"</span>+e.pageX);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="封装pageXY封装"><a href="#封装pageXY封装" class="headerlink" title="封装pageXY封装"></a>封装pageXY封装</h4><p>在使用pageX/Y获取鼠标相对于当前文档的坐标的时它会包含滚动条的距离且IE9以下不支持。为了解决这些问题我们对pageXY进行封装。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pagePos</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> sLeft = getScrollOffset().left, <span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line">            sTop = getScrollOffset().top;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> cLeft = <span class="built_in">document</span>.documentElement.clientLeft || <span class="number">0</span>,</span><br><span class="line">        cTop = <span class="built_in">document</span>.documentElement.clientTop || <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            通过document.documentElement.clientLeft/Top可以获得偏移量（既margin)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="comment">// 鼠标相对于可视区的距离 + 滚动条滚动的距离 + 偏移量的距离(margin)</span></span><br><span class="line">            X: e.clientX + sLeft - cLeft,</span><br><span class="line">            Y: e.clientY + sTop - cTop</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取滚动条滚动距离</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset){</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">                top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                left: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">                top: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="拖拽函数封装"><a href="#拖拽函数封装" class="headerlink" title="拖拽函数封装"></a>拖拽函数封装</h4><p>/**</p><ul><li>真正的拖拽并非那么简单，首先得知道三个东西</li><li>mousedown moueup mousemove</li><li></li><li>鼠标按下  鼠标抬起  鼠标移动</li><li></li><li>鼠标按下并且移动应该怎么写呢？</li><li>是不是应该把鼠标移动的事件处理函数，</li><li>写到鼠标按下的事件处理函数的内部才行。</li><li></li><li></li><li>/</li></ul><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span><br><span class="line">elemDrag(box);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elemDrag</span>(<span class="params">elem</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> x ,</span><br><span class="line">        y;</span><br><span class="line"></span><br><span class="line">    addEvent(elem,<span class="string">"mousedown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="comment">//  鼠标当前点击的X坐标   // 左外边距</span></span><br><span class="line">        x = pagePos(e).X - getStyles(elem,<span class="string">'left'</span>);</span><br><span class="line">        y = pagePos(e).Y - getStyles(elem,<span class="string">'top'</span>);</span><br><span class="line"></span><br><span class="line">        addEvent(<span class="built_in">document</span>,<span class="string">"mousemove"</span>,mouseMove);</span><br><span class="line">        addEvent(<span class="built_in">document</span>,<span class="string">"mouseup"</span>,mouseUp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阻止冒泡和 默认事件</span></span><br><span class="line">        cancelBubble(e);</span><br><span class="line">        preventDefaultEvent(e);</span><br><span class="line"></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseMove</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        elem.style.top = pagePos(e).Y - y + <span class="string">'px'</span>;</span><br><span class="line">        elem.style.left = pagePos(e).X - x + <span class="string">'px'</span>;</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseUp</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> e = e|| <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">        removeEvent(<span class="built_in">document</span>,<span class="string">"mousemove"</span>,mouseMove);</span><br><span class="line">        removeEvent(<span class="built_in">document</span>,<span class="string">"moseup"</span>,mouseUp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上就是拖拽函数的封装但是并不完整 -&gt; 还差判断边界</p><p><span class="s_jacinth">注意</span>：addEvent()、pagePos()、getStyles()、cancelBubble()、preventDefaultEvent()需要自己封装，在下一篇章会补充。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;鼠标行为-gt-坐标系&quot;&gt;&lt;a href=&quot;#鼠标行为-gt-坐标系&quot; class=&quot;headerlink&quot; title=&quot;鼠标行为 -&gt; 坐标系&quot;&gt;&lt;/a&gt;鼠标行为 -&amp;gt; 坐标系&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;clientX/Y
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>冒泡捕获流、事件与事件源对象、事件委托</title>
    <link href="https://cokesprit.gitee.io/posts/1513f4a4/"/>
    <id>https://cokesprit.gitee.io/posts/1513f4a4/</id>
    <published>2020-10-05T11:49:12.000Z</published>
    <updated>2020-10-05T15:37:29.897Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p><span class="s_green">事件流</span>：描述页面中接收事件的顺序和冒泡捕获有关。</p><p><span class="s_green">事件流分为两种</span>：<br>事件冒泡流：是IE提出来的时间冒泡流 Event Bubbing。<br>事件捕获流：网景公司 Netscape 提出来的事件捕获流 Event Capturing。</p><p><span class="s_jacinth">事件流的三个阶段</span>：<br>事件捕获阶段 -&gt; 处于目标阶段 -&gt; 事件冒泡阶段</p><p><span class="s_yellow">捕获</span>是处于：事件捕获阶段<br><span class="s_yellow">冒泡</span>是处于：事件冒泡阶段</p><h4 id="事件与事件源对象"><a href="#事件与事件源对象" class="headerlink" title="事件与事件源对象"></a>事件与事件源对象</h4><p><span class="s_green">事件</span></p><p>其他浏览器：Event对象 = new MouseEvent();</p><p>IE浏览器：window.event</p><p>IE浏览器不是传递到事件处理函数的参数里面的而是传到一个全局的window.event对象里面。</p><p><span class="s_yellow">输出mouseEvent</span><br><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">     <span class="selector-class">.wrapper</span>{</span></span><br><span class="line"><span class="css">         <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">         height: 200px;</span><br><span class="line">         background-color: green;</span><br><span class="line">         font-size: 18px;</span><br><span class="line"><span class="css">         <span class="selector-tag">color</span>:<span class="selector-id">#fff</span>;</span></span><br><span class="line">     }</span><br><span class="line"><span class="css">     <span class="selector-class">.wrapper</span> <span class="selector-class">.outer</span>{</span></span><br><span class="line"><span class="css">         <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">         height: 150px;</span><br><span class="line"><span class="css">         <span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">         background-color: red;</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line"><span class="css">     <span class="selector-class">.wrapper</span> <span class="selector-class">.outer</span> <span class="selector-class">.inner</span>{</span></span><br><span class="line"><span class="css">         <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">         <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">         margin-left: 150px;</span><br><span class="line">         background-color: orange;</span><br><span class="line">     }</span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">     wrapper</span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">         outer</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'wrapper'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">warpper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1513f4a4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_green">事件源对象</span><br>输出e的时候可以在MouseEvent查找到 <span class="s_jacinth">target</span> 和 <span class="s_jacinth">scrElement</span> 这两个事件源对象。</p><p>火狐：只有target<br>IE：只有srcElements</p><p><span class="s_yellow">使用上面的html结构分别点击这三个盒子输出事件源对象：</span></p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> e = e || e.window.event;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"点击了"</span>+e.target.className+<span class="string">"盒子"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    <span class="built_in">console</span>.log(e.srcElement);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1513f4a4/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">事件源的兼容性写法</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wrapper.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> e = e||<span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> tar = e.target || e.srcElement;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(tar);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>事件委托也叫事件代理：意思是我不亲自绑定点击事件，我把事件委托给我的父级，让父级去触发，触发以后通过事件源对象来找到我点击的元素。好处不用循环添加事件，性能更加好。</p><p><span class="s_yellow">例子</span>：写一个列表当点击”添加li”按钮时就会在列表末尾处新增一个li并且添加上序号,当点击相应的li时输出下标输出当前li的下标。</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击添加li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oList = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'list'</span>)[<span class="number">0</span>],</span><br><span class="line">        oLi = oList.getElementsByTagName(<span class="string">'li'</span>),</span><br><span class="line">        oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点击button添加li</span></span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        li.innerHTML = oLi.length + <span class="number">1</span>;</span><br><span class="line">        oList.appendChild(li);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给ul添加点击事件</span></span><br><span class="line">    oList.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> tar = e.target || e.srcElement;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> index = <span class="built_in">Array</span>.prototype.indexOf.call(oLi,tar);</span><br><span class="line">        <span class="built_in">console</span>.log(index);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Array.prototype.indexOf.call(DOM对象集合,当前事件源);</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">原理解析：</span><br>当点击li的时候，冒泡到ul,ul正好触发点击事件因为ul绑定了点击事件，然后触发了就可以找到事件对象，找到事件对象之后就能找到事件源，找到事件源之后再使用Array.prototype.indexOf和oLi就能找到当前点击的li的下标了。这就是使用<span class="s_red">事件委托拿下标</span>。</p><p><span class="s_yellow">Array.prototype.indexOf.call(DOM对象集合,当前事件源);</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;事件流&lt;/span&gt;：描述页面中接收事件的顺序和冒泡捕获有关。&lt;/p&gt;
&lt;p&gt;&lt;span
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>事件处理处理函数、冒泡捕获、阻止冒泡默认事件</title>
    <link href="https://cokesprit.gitee.io/posts/e57a545c/"/>
    <id>https://cokesprit.gitee.io/posts/e57a545c/</id>
    <published>2020-10-04T12:18:59.000Z</published>
    <updated>2020-10-06T02:55:37.470Z</updated>
    
    <content type="html"><![CDATA[<p>事件：<br>吃饭事件触发 -&gt; 长胖<br>onclick = function(){}<br>事件 + 事件的反馈 = 前端交互 交互体验</p><h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h4><h5 id="句柄绑定"><a href="#句柄绑定" class="headerlink" title="句柄绑定"></a>句柄绑定</h5><p><span class="s_jacinth">句柄绑定</span>的几个组成部分别是<span class="s_red">句柄</span>、<span class="s_red">事件句柄</span>、<span class="s_red">事件源</span>，下面例子描述它们是那些部分。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 句柄：onclick</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事件句柄</span></span><br><span class="line"><span class="comment">    onclick = function(){</span></span><br><span class="line"><span class="comment">        this.style.backgroundColor = "red";</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件源：事件作用在哪个元素身上谁就是事件源</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="如何绑定事件处理函数"><a href="#如何绑定事件处理函数" class="headerlink" title="如何绑定事件处理函数"></a>如何绑定事件处理函数</h5><p><span class="s_green">句柄的绑定</span><br>    elem.onclick = function(){}<br>句柄绑定方式兼容性最好。</p><p><span class="s_green">内联事件监听器</span> </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span> = <span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_green">addEventListener</span><br>        <span class="s_yellow">语法</span>: elem.addEventListener(事件类型,事件处理函数,false);</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oDiv.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">},<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这种IE9及以下不兼容，但是它是W3C规范，</span></span><br><span class="line"><span class="comment">有点可疑帮到你多个事件处理函数。</span></span><br><span class="line"><span class="comment">解决IE9及以下不兼容使用elem.attachEvent(事件类型,事件处理函数);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_green">attachEvent</span><br>这种是IE8及以下的绑定方式 elem.attachEvent(事件类型,事件处理函数);<br><span class="s_red">注意</span>谷歌是没有这个方法的。<br>attachEvent的this是指向window的解决方案是使用call/apply</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">oBtn.attchaEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// this是执向 -&gt; window 并不是当前这个对象！！！</span></span><br><span class="line">    oBtn.innerHTML = <span class="string">'加载中....'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让this指向oBtn</span></span><br><span class="line">    <span class="keyword">this</span>.call(oBtn);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印两遍</span></span><br><span class="line">oDiv.attachEvent(<span class="string">'onclick'</span>,test);</span><br><span class="line">oDiv.attachEvent(<span class="string">'onclick'</span>,test);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>);</span></span><br></pre></td></tr></tbody></table></figure><hr><h5 id="封装事件处理函数"><a href="#封装事件处理函数" class="headerlink" title="封装事件处理函数"></a>封装事件处理函数</h5><p>真正在企业开发的时候是很少使用上面那几种方式来绑定事件处理函数的我们要先对它们来进行封装了之后再使用。</p><p><span class="s_jacinth">addEvent</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span><br><span class="line">    addEvent(oBtn,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">el,type,fn</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(el.addEventListenner){</span><br><span class="line">        <span class="comment">// fn是函数的缩写</span></span><br><span class="line">        el.addEventListenner(type,fn,<span class="literal">false</span>);</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(el.attachEvent){</span><br><span class="line">        el.attachEvent(<span class="string">'on'</span>+type,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            fn.call(el);</span><br><span class="line">        });</span><br><span class="line">    }<span class="keyword">else</span>{<span class="comment">//如果两个都不支持就只能使用on</span></span><br><span class="line">            el[<span class="string">'on'</span>+ type] = fn; </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="解除事件处理函数"><a href="#解除事件处理函数" class="headerlink" title="解除事件处理函数"></a>解除事件处理函数</h5><p>有如下几种方案:<br><span class="s_green">第一种</span>：elem.onclick = null/false;<br><span class="s_green">第二种</span>：element.removeEventListener(‘click’,test,false);<br><span class="s_green">第三种</span>：element.detachEvent(‘onclick’,test);</p><p><span class="s_jacinth">例子</span>：领取优惠券当点击领取优惠券只有按钮变成灰色,且不可以再使用。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>领取优惠券<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        button{</span><br><span class="line">           outline: none; </span><br><span class="line">           border: none;</span><br><span class="line"><span class="css">           <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">           height: 50px;</span><br><span class="line"><span class="css">           <span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.got</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>领取优惠券<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 第一种 </span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oBtn.onclick = function(){</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     this.className = ' got';</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     this.innerHTML = '已领取';</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//     this.onclick = null;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// }</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 第二种</span></span></span><br><span class="line"><span class="actionscript">            oBtn.addEventListener(<span class="string">'click'</span>,test,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.className = <span class="string">'got'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.innerHTML = <span class="string">'已领取'</span>;</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.removeEventListener(<span class="string">'click'</span>,test,<span class="literal">false</span>);</span></span><br><span class="line">            }</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="comment">// 第三种 -&gt; IE8及以下</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oBtn.attachEvent('onclick',test1);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oBtn.detachEvent('onclick',test1);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// function test1(){</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     this.className = 'got';</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     this.innerHTML = '已领取';</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// }</span></span></span><br><span class="line">            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="冒泡捕获"><a href="#冒泡捕获" class="headerlink" title="冒泡捕获"></a>冒泡捕获</h4><p><span class="s_green">事件冒泡</span>:是向上 -&gt; 子级向父级传递，子元素触发事件的同时，会向父级元素一层一层传递事件冒泡，只要父元素有相同的事件类型，父级的事件就会被触发。</p><p><span class="s_green">事件捕获</span>:是向下 -&gt; 当子元素触发事件由父元素一层一层的向子元素传递这时的点击事件就叫事件捕获。<br>嵌套关系最顶层的父级元素开始捕获事件，直到事件源（谁触发事件谁就是事件源）的子元素这个捕获就结束了。</p><p><span class="s_yellow">例子</span><br><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>{</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">        font-size: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> <span class="selector-class">.outer</span>{</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">        height: 150px;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> <span class="selector-class">.outer</span> <span class="selector-class">.inner</span>{</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        margin-left: 150px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    wrapper</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        outer</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'wrapper'</span>)[<span class="number">0</span>],</span><br><span class="line">            outer = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'outer'</span>)[<span class="number">0</span>],</span><br><span class="line">            inner = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'inner'</span>)[<span class="number">0</span>],</span><br><span class="line">            body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'wrapper冒泡'</span>);</span><br><span class="line">        },<span class="literal">false</span>); <span class="comment">// 默认是冒泡，true是捕获</span></span><br><span class="line"></span><br><span class="line">        outer.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'outer冒泡'</span>);</span><br><span class="line">        },<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        inner.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'inner冒泡'</span>);</span><br><span class="line">        },<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以即绑定冒泡事件又绑定捕获事件</span></span><br><span class="line">        wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'wrapper捕获'</span>);</span><br><span class="line">        },<span class="literal">true</span>); </span><br><span class="line"></span><br><span class="line">        outer.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'outer捕获'</span>);</span><br><span class="line">        },<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        inner.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'inner捕获'</span>);</span><br><span class="line">        },<span class="literal">true</span>);</span><br></pre></td></tr></tbody></table></figure><p>当点击inner盒子时控制台输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e57a545c/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">总结</span>: 先捕获后冒泡，如果既不是捕获又不是冒泡就按执行顺序。记住事件源是不存在任何捕获和冒泡的，只要不存在捕获和冒泡就是按照绑定执行处理函数的顺序来执行的。</p><hr><h5 id="没有捕获和冒泡现象的事件"><a href="#没有捕获和冒泡现象的事件" class="headerlink" title="没有捕获和冒泡现象的事件"></a>没有捕获和冒泡现象的事件</h5><pre><code>focus  blur change submit reset select</code></pre><hr><h4 id="阻止冒泡-捕获现象"><a href="#阻止冒泡-捕获现象" class="headerlink" title="阻止冒泡/捕获现象"></a>阻止冒泡/捕获现象</h4><p>有两种阻止冒泡/捕获事件，建议将它们封装了之后再使用</p><p><span class="s_green">W3C:</span> e.stopPropagation()<br><span class="s_green">IE:</span> e.cancelBubble = ture</p><p>e是存放在事件处理函数的参数里面的，但是IE8以前是存在window上的所以IE8: window.event</p><hr><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>{</span></span><br><span class="line">        position: relative;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: green;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.apply</span>{</span></span><br><span class="line">        position: absolute;</span><br><span class="line"><span class="css">        <span class="selector-tag">bottom</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line">        right: 15px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        line-height: 30px;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"apply"</span>&gt;</span>立即申请<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'wrapper'</span>)[<span class="number">0</span>],</span><br><span class="line">    apply = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'apply'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">wrapper.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'详情'</span>);</span><br><span class="line">        },<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">apply.addEventListenner(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="comment">/* e是存放在事件处理函数的参数里面的，但是</span></span><br><span class="line"><span class="comment">                IE8及以下是存在window上的</span></span><br><span class="line"><span class="comment">                所以IE8: window.event</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;  <span class="comment">//兼容性赋值</span></span><br><span class="line">    <span class="comment">// 第一种</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种</span></span><br><span class="line">        <span class="comment">// e.cancelBubble = true;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"已申请"</span>);</span><br><span class="line">},<span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><p>当点击立即申请时：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e57a545c/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>父级的事件并没有被触发</p><hr><h5 id="封装取消冒泡-捕获"><a href="#封装取消冒泡-捕获" class="headerlink" title="封装取消冒泡/捕获"></a>封装取消冒泡/捕获</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelBubble</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(e.stopParpagation){</span><br><span class="line">        e.stopParpagaton();</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        e.cancelBulle = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p><span class="s_green">第一种</span>：return false; 这种兼容性最好，然而只能在句柄的方式使用。<br><span class="s_green">第二种</span>：e.preventDefult(); 但IE9及以下不支持。<br><span class="s_green">第三种</span>：e.returnValue = false;  IE9及以下的阻止默认事件的写法。</p><p><span class="s_jacinth">阻止a标签默认事件的几种写法：</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"JavaScript:;"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- void(0) -&gt; return 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"JavaScript:void(0);"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 这种是锚点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>网易云<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"qm"</span>&gt;</span>QQ音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qmusic = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'qm'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">qmusic.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> e = e||<span class="built_in">window</span>.event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消文本菜单 鼠标右击的时候</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">            </span><br><span class="line">            e.preventDefault();</span><br><span class="line">        },<span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h4><p>单击li时输出li的index</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> len = oLi.length,</span><br><span class="line">item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++){</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{</span><br><span class="line">        item = oLi[i];</span><br><span class="line"></span><br><span class="line">        item.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        },<span class="literal">false</span>);</span><br><span class="line">    }(i));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事件：&lt;br&gt;吃饭事件触发 -&amp;gt; 长胖&lt;br&gt;onclick = function(){}&lt;br&gt;事件 + 事件的反馈 = 前端交互 交互体验&lt;/p&gt;
&lt;h4 id=&quot;事件处理函数&quot;&gt;&lt;a href=&quot;#事件处理函数&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>读写样式属性、操作伪元素、元素运动初探</title>
    <link href="https://cokesprit.gitee.io/posts/4e2086c7/"/>
    <id>https://cokesprit.gitee.io/posts/4e2086c7/</id>
    <published>2020-10-04T01:47:00.000Z</published>
    <updated>2020-10-04T12:20:13.586Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们要知道DOM是不可以直接操作css样式表的,也不能直接访问它是通过操作标签里面的style属性然后改变元素的样式。</p><hr><h4 id="读写样式属性"><a href="#读写样式属性" class="headerlink" title="读写样式属性"></a>读写样式属性</h4><h5 id="elem-style-xxx"><a href="#elem-style-xxx" class="headerlink" title="elem.style.xxx"></a>elem.style.xxx</h5><p><span class="s_green">elem.style.xxx</span>这种方式是操作元素的style属性来改变样式<br><span class="s_jacinth">写法</span>:</p><ol><li>小驼峰写法</li><li>值 -&gt; 字符串</li><li>复合值拆解赋值</li><li>保留值前面加css</li></ol><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'oDiv'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">oDiv.style.position = <span class="string">'absulute'</span>;</span><br><span class="line"></span><br><span class="line">oDiv.style.left = <span class="string">'200px'</span>;</span><br><span class="line">oDiv.style.top = <span class="string">'300px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// oDiv.style.border = '5px solid pink"; // 复合值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合值拆解 -&gt; 这样写效率更高</span></span><br><span class="line">oDiv.style.borderWidth = <span class="string">'5px'</span>;</span><br><span class="line">oDiv.style.borderColor = <span class="string">'pink'</span>;</span><br><span class="line">oDiv.style.borderStyle = <span class="string">'solid'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留值 -&gt; 前面加css</span></span><br><span class="line">oDiv.style.cssFloat = <span class="string">'left'</span>;</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h5><p>查看计算样式 -&gt; 只读<br><span class="s_yellow">计算样式</span>：它都会把样式的属性缓存绝对值<br><span class="s_jacinth">语法</span>:window.getComputedStyle(elem,null)[prop];<br>括号里面的null是写填写伪元素这样方便我们获取伪元素的相关属性了。<br><span class="s_green">例子</span>:<br><span class="s_js">window.getComputedStyle(oDiv,”after”).width;</span></p><p><span class="s_jacinth">注意</span>：IE8及以下不支持<span class="s_red">getComputedStyle()</span>,IE8及以下写<span class="s_red">elem.currentStyle[prop]</span>,为了更方便的使用我们得对它们两进行兼容性封装。</p><hr><p><span class="s_jacinth">兼容性封装 -&gt; getStyle</span></p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,prop</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle){</span><br><span class="line">        <span class="keyword">if</span>(prop){</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">             <span class="comment">//如果prop不存在就返回一个集合    </span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>);</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(prop){</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">window</span>.currentStyle[prop];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">window</span>.currentStyle;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">好处</span>：兼容性封装 -&gt; 可以避免 offsetWidth/offsetHeight, 它们两个是到渲染引擎里面访问宽高,但是它会把padding算上。</p><hr><h4 id="操作伪元素"><a href="#操作伪元素" class="headerlink" title="操作伪元素"></a>操作伪元素</h4><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>操作伪元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>{</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#2980b9</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3498db</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">::after</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#18dcff</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="comment">/* 建议这种写法 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-class">.active</span><span class="selector-pseudo">::after</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: 0<span class="selector-class">.5s</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ffcccc</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        box.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 建议这种写法</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.className += <span class="string">' active'</span>;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="运算运动初探"><a href="#运算运动初探" class="headerlink" title="运算运动初探"></a>运算运动初探</h4><p><span class="s_yellow">制作下拉菜单</span></p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>制作下拉菜单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        a{</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        ul{</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span>{</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span><span class="selector-pseudo">::after</span>{</span></span><br><span class="line">            content: "";</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:table</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line">            top: 18px;</span><br><span class="line">            width: 15px;</span><br><span class="line">            height: 15px;</span><br><span class="line">            background-image: url(img/down.png);</span><br><span class="line">            background-size: 100% 100%;</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span><span class="selector-class">.up</span><span class="selector-pseudo">::after</span>{</span></span><br><span class="line">            background-image:url(img/top.png)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-class">.list</span>{</span></span><br><span class="line">            height: 0;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-tag">a</span>{</span></span><br><span class="line">            display: block;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-class">.main</span>{</span></span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">            line-height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-class">.item</span>{</span></span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span>{</span></span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">JavaScript:;</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>这是一个项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>这是二个项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>这是三个项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>这是四个项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>这是五个项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> dropdown = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'dropdown'</span>)[<span class="number">0</span>],</span></span><br><span class="line">            oList = elemChildren(dropdown)[1],</span><br><span class="line"><span class="actionscript">            timer = <span class="literal">null</span></span></span><br><span class="line">            listHeight = 0,</span><br><span class="line"><span class="actionscript">            spend = <span class="number">2</span>; <span class="comment">// 每一次增加两个像素</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 鼠标移入</span></span></span><br><span class="line"><span class="actionscript">        dropdown.onmouseenter = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line"><span class="actionscript">            timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line">                if(listHeight &gt;= 200){</span><br><span class="line">                    clearInterval(timer);</span><br><span class="line"><span class="actionscript">                }<span class="keyword">else</span>{</span></span><br><span class="line"><span class="javascript">                    listHeight = <span class="built_in">parseInt</span>(getStyle(oList,<span class="string">'height'</span>)) + spend;</span></span><br><span class="line"><span class="actionscript">                    oList.style.height = listHeight + <span class="string">'px'</span>;</span></span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            },1);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.className += <span class="string">' up'</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 鼠标移出</span></span></span><br><span class="line"><span class="actionscript">        dropdown.onmouseleave = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line"><span class="actionscript">            timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line">                if(listHeight &lt;=0){</span><br><span class="line">                    clearInterval(timer);</span><br><span class="line"><span class="actionscript">                }<span class="keyword">else</span>{</span></span><br><span class="line"><span class="javascript">                    listHeight = <span class="built_in">parseInt</span>(getStyle(oList,<span class="string">'height'</span>)) - spend;</span></span><br><span class="line"><span class="actionscript">                    oList.style.height = listHeight + <span class="string">'px'</span>;</span></span><br><span class="line">                }</span><br><span class="line">            },1);</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span><span class="class">.<span class="keyword">class</span> = ' <span class="title">dropdown</span>';</span></span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 查找子元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">elemChildren</span><span class="params">(node)</span></span>{</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> temp = {</span></span><br><span class="line"><span class="actionscript">                <span class="string">'length'</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">'push'</span>:<span class="built_in">Array</span>.prototype.push,</span></span><br><span class="line"><span class="javascript">                <span class="string">'splice'</span>:<span class="built_in">Array</span>.prototype.splice</span></span><br><span class="line">            },</span><br><span class="line">            children = node.childNodes,</span><br><span class="line">            len = children.length,</span><br><span class="line">            item ;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++){</span></span><br><span class="line">                item  = children[i];</span><br><span class="line"></span><br><span class="line">                if(item.nodeType === 1){</span><br><span class="line">                    temp.push(item);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> temp;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span><span class="params">(elem,prop)</span></span>{</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle){</span></span><br><span class="line">                if(prop){</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span></span><br><span class="line"><span class="actionscript">                }<span class="keyword">else</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>);</span></span><br><span class="line">                }</span><br><span class="line"><span class="actionscript">            }<span class="keyword">else</span>{</span></span><br><span class="line">                if(prop){</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> elem.currentStyle[prop];</span></span><br><span class="line"><span class="actionscript">                }<span class="keyword">else</span>{</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> elem.currentStyle;</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/4e2086c7/run.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p><span class="s_yellow">实现一个无缝轮播</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们要知道DOM是不可以直接操作css样式表的,也不能直接访问它是通过操作标签里面的style属性然后改变元素的样式。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;读写样式属性&quot;&gt;&lt;a href=&quot;#读写样式属性&quot; class=&quot;headerlink&quot; title=&quot;读写样式属性
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>offsetLeft/offsetTop/offsetParent</title>
    <link href="https://cokesprit.gitee.io/posts/a2c7835c/"/>
    <id>https://cokesprit.gitee.io/posts/a2c7835c/</id>
    <published>2020-09-23T01:22:04.000Z</published>
    <updated>2020-09-23T02:12:04.541Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript Element <span class="s_green">offsetLeft/offsetTop</span>属性返回相对于<span class="s_green">offsetParent</span>元素左/右侧的的左/右侧位置（以像素为单位）。<span class="s_red">返回值包括</span>：<br>左/右侧位置和元素的边距<br>左/右侧填充，滚动条和offsetParent元素的边框</p><hr><p>JavaScript Element <span class="s_green">offsetParent</span>属性返回最近有定位的祖先。</p><p><span class="s_jacinth">注意:</span>offsetParent与offsetLeft和offsetTop属性一起使用。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>offsetLeft/offsetTop/offsetParent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body{</span><br><span class="line">            margin: 0;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span>{</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            margin: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#999</span>;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-class">.son</span>{</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            margin: 100px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.getElementsByclass(<span class="string">'son'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/*  offsetLeft/offsetTop 只认它父级的定位元素</span></span><br><span class="line"><span class="comment">    如果父级没有定位元素它就往上找，如果都没有的话那就找body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(son.offsetLeft);</span><br><span class="line"><span class="built_in">console</span>.log(son.offsetTop);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(son.offsetParent); <span class="comment">// body</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/a2c7835c/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="自己相对于整个文档的位置"><a href="#自己相对于整个文档的位置" class="headerlink" title="自己相对于整个文档的位置"></a>自己相对于整个文档的位置</h4><p>我能不能直接找到我自己相对于整个html文档的位置？不管我的父级元素有没有定位。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElemDoPosition</span>(<span class="params">el</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> parent = el.offsetParent, <span class="comment">// 找到自己的父元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 距离有定位父级的坐标</span></span><br><span class="line">    offsetLeft = el.offsetLeft,</span><br><span class="line">    offsetTop = el.offsetTop;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果parent存在那么就一定是定位元素</span></span><br><span class="line">    <span class="keyword">while</span>(parent){</span><br><span class="line">        offsetLeft += parent.offsetLeft;</span><br><span class="line">        offsetTop += parent.offsetTop;</span><br><span class="line"></span><br><span class="line">        parent = parent.offsetParent;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        left: offsetLeft,</span><br><span class="line">        top: offsetTop</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript Element &lt;span class=&quot;s_green&quot;&gt;offsetLeft/offsetTop&lt;/span&gt;属性返回相对于&lt;span class=&quot;s_green&quot;&gt;offsetParent&lt;/span&gt;元素左/右侧的的左/右侧位置（以像素为单位
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>getBoundingClientRect</title>
    <link href="https://cokesprit.gitee.io/posts/b7620653/"/>
    <id>https://cokesprit.gitee.io/posts/b7620653/</id>
    <published>2020-09-22T08:42:39.000Z</published>
    <updated>2020-09-22T08:52:48.518Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">Element.getBoundingCligClientRect()</span>方法返回元素的大小及其相对于视口的位置。<br>如果是标准盒子模型，元素的尺寸等于width/height + padding + border-width的总和。如果box-sizing: border-box，元素的的尺寸等于 width/height。</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getBoundingClientRect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>{</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            left: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span></span><br><span class="line">        /*ie浏览器宽度和高度不答应出来 ,</span><br><span class="line">        不打印的话：width = rigth - left, top = buttom - top*/</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> info = box.getBoundingClientRect();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(info);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// getBoundingClientRect 这个基本不用</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/b7620653/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;Element.getBoundingCligClientRect()&lt;/span&gt;方法返回元素的大小及其相对于视口的位置。&lt;br&gt;如果是标准盒子模型，元素的尺寸等于width/height + padding + border-
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>获取整个html文档的宽高</title>
    <link href="https://cokesprit.gitee.io/posts/20ad7b61/"/>
    <id>https://cokesprit.gitee.io/posts/20ad7b61/</id>
    <published>2020-09-22T07:21:47.000Z</published>
    <updated>2020-09-22T08:01:26.884Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">获取整个html文档的宽高:</span><br>document.body.scrollHeight/scrollWidth<br>document.documentElement.scrollHeight/scrollWidth</p><p><span class="s_green">scrollHeight/scrollWidth 到底是什么？</span><br>    scrollWidth === window.innerWidth + window.pageXOffset;</p><hr><h4 id="获取整个html文档宽高"><a href="#获取整个html文档宽高" class="headerlink" title="获取整个html文档宽高"></a>获取整个html文档宽高</h4><p>由于某些浏览器是不支持document.body.scrollWidth/scrollHeight的所以要封装起来。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollSize</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 如果document.body.scrollWidth存在</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.body.scrollWidth){</span><br><span class="line">        <span class="keyword">return</span>{</span><br><span class="line">            width: <span class="built_in">document</span>.body.scrollWidth,</span><br><span class="line">            height: <span class="built_in">document</span>.body.scrollHeight</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span>{</span><br><span class="line">            width:<span class="built_in">document</span>.documentElement.scrollWidth,</span><br><span class="line">            height: <span class="built_in">document</span>.documentElement.scrollHeight</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;获取整个html文档的宽高:&lt;/span&gt;&lt;br&gt;document.body.scrollHeight/scrollWidth&lt;br&gt;document.documentElement.scrollHeight/scrollWidt
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>获取浏览器可视区域的尺寸</title>
    <link href="https://cokesprit.gitee.io/posts/abb398ff/"/>
    <id>https://cokesprit.gitee.io/posts/abb398ff/</id>
    <published>2020-09-22T06:37:27.000Z</published>
    <updated>2020-09-22T07:12:42.971Z</updated>
    
    <content type="html"><![CDATA[<p>获取浏览器可视区域既窗口的宽高<br><span class="s_green">常规的写法</span>：window.innerWidth/innerHeight</p><p><span class="s_green">ie9/ie8及以下的写法</span>：<br><span class="s_red">标准模式：</span>document.documentElement.clienWidth/clienHeigth<br><span class="s_red">怪异模式：</span>document.body.clienWidth/clientHeight</p><p><span>其他写法</span>：outerWidth/outerHeight 它们会包括一些浏览器的工具栏，了解即可。</p><h4 id="获取可视区域封装"><a href="#获取可视区域封装" class="headerlink" title="获取可视区域封装"></a>获取可视区域封装</h4><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportSize</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.innerWidth){</span><br><span class="line">        <span class="keyword">return</span>{</span><br><span class="line">            width: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            height: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">// 如果是怪异模式</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode === <span class="string">"BackCompat"</span>){</span><br><span class="line">            <span class="keyword">return</span>{</span><br><span class="line">                width:<span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">                heigth: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> {</span><br><span class="line">                        <span class="comment">// 这两个不包括滚动条，以上都包括</span></span><br><span class="line">                width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">                height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取浏览器可视区域既窗口的宽高&lt;br&gt;&lt;span class=&quot;s_green&quot;&gt;常规的写法&lt;/span&gt;：window.innerWidth/innerHeight&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;ie9/ie8及以下的写法&lt;/span&gt;：&lt;br
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的兼容性模式</title>
    <link href="https://cokesprit.gitee.io/posts/cbc93df7/"/>
    <id>https://cokesprit.gitee.io/posts/cbc93df7/</id>
    <published>2020-09-22T03:26:21.000Z</published>
    <updated>2020-09-22T06:36:48.137Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器的兼容性模式分为标准模式和怪异模式<br><span class="s_green">标准模式</span>:在顶部加上<span class="s_red">&lt;!DOCTYPE html&gt;</span>就变成标准模式。<br><span class="s_green">怪异模式</span>:把<span class="s_red">&lt;!DOCTYPE html&gt;</span>注释掉就会切换到怪异模式,怪异模式 -&gt; 向后兼容五个版本。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器的兼容性模式分为标准模式和怪异模式&lt;br&gt;&lt;span class=&quot;s_green&quot;&gt;标准模式&lt;/span&gt;:在顶部加上&lt;span class=&quot;s_red&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;就变成标准模式。&lt;br&gt;&lt;span class=&quot;s
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>查看滚动条距离与高度</title>
    <link href="https://cokesprit.gitee.io/posts/6ad09b7c/"/>
    <id>https://cokesprit.gitee.io/posts/6ad09b7c/</id>
    <published>2020-09-22T01:57:43.000Z</published>
    <updated>2020-09-22T08:15:35.145Z</updated>
    
    <content type="html"><![CDATA[<p>查看滚动条的方式有分为两种一种是比较常见的，另一种是不常见的。</p><p><span class="s_jacinth">比较常见</span>:<br><span class="s_red">window.pageXOffset/window.pageYOffset</span>ie9某一些版本及ie8以下不支持。<br><span class="s_green">ie9/ie8及以以下的写法：</span><br><span class="s_red">document.body.scrollLeft/scrollTop</span><br><span class="s_red">document.documentElement.scrollLeft/scrollTop</span></p><p><span class="s_jacinth">不常见</span>:<br><span class="s_red">window.scrollX/scrollY</span></p><hr><p><span class="s_yellow">浏览器兼容情况</span><br>下面分别为<span class="s_js">标准模式（s）</span> 和 <span class="s_js">怪异模式（b）</span>，在下一篇详细的讲什么是标准模式和怪异模式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/6ad09b7c/怪异模式和标准模式.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">结论:</span>从图中很清楚的看到document.body可以使用,那么document..documentElement就不可以使用，反之也是如此。</p><hr><h4 id="滚动条兼容性封装"><a href="#滚动条兼容性封装" class="headerlink" title="滚动条兼容性封装"></a>滚动条兼容性封装</h4><p>为了解决上述所出现的兼容性问题，我们将这些方法封装成一个功能模块，来解决这个问题。</p><p><span class="s_red">获取滚动条滚动距离</span><br><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 如果window.pageXOffset不为空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset){</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            left: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            top: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span>{</span><br><span class="line">            <span class="comment">/* 因为document.body或document.documentElement</span></span><br><span class="line"><span class="comment">                不可用时就会是空，所以这样写可以。*/</span></span><br><span class="line">            left: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            top: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看滚动条的方式有分为两种一种是比较常见的，另一种是不常见的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;比较常见&lt;/span&gt;:&lt;br&gt;&lt;span class=&quot;s_red&quot;&gt;window.pageXOffset/window.pageYOffset&lt;
      
    
    </summary>
    
    
    
      <category term="BOM" scheme="https://cokesprit.gitee.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>日期对象</title>
    <link href="https://cokesprit.gitee.io/posts/64d914d6/"/>
    <id>https://cokesprit.gitee.io/posts/64d914d6/</id>
    <published>2020-09-20T11:44:54.000Z</published>
    <updated>2020-09-21T07:59:36.973Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript <span class="s_green">Date对象</span>用于处理日期和时间，Date对象会自动把当前日期和时间保存为其初始化值。</p><hr><h4 id="Date对象的常用方法"><a href="#Date对象的常用方法" class="headerlink" title="Date对象的常用方法"></a>Date对象的常用方法</h4><h5 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h5><p><span class="s_green">getDate() </span>放回当前是以一个月的第几天 1-31 返回几号</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> getDate = date.getDate();</span><br><span class="line"><span class="built_in">console</span>.log(getDate);</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h5><p><span class="s_green">getDay()</span>返回当前是一周中的第几天 0 - 6，星期天是第一天 ，返回 0 是星期天。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.getWeekDay = <span class="function"><span class="keyword">function</span>(<span class="params">lang</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> day = <span class="keyword">this</span>.getDay();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(day){</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期天'</span> : <span class="string">'Sunday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期一'</span> : <span class="string">'Monday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期二'</span> : <span class="string">'Tuesday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期三'</span> : <span class="string">'Wednesday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期四'</span> : <span class="string">'Thursday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期五'</span> : <span class="string">'Friday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">             <span class="keyword">return</span> lang === <span class="string">'chs'</span> ? <span class="string">'星期六'</span> : <span class="string">'saturday'</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getWeekDay(<span class="string">'chs'</span>));</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h5><p><span class="s_green">getMonth()</span>返回当前为第几个月 0 -11</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="getYear-和-getFullYear"><a href="#getYear-和-getFullYear" class="headerlink" title="getYear() 和 getFullYear()"></a>getYear() 和 getFullYear()</h5><p><span calss="s_jacinth">getYear()是不用了的，官方说使用<span class="s_green">getFullYear() 替换掉。getFullYear()从 Date 对象以四位数字返回年份。</span></span></p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 千年虫 2000年问题 千禧年问题 千年危机</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getYear());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="获取时分秒毫秒"><a href="#获取时分秒毫秒" class="headerlink" title="获取时分秒毫秒"></a>获取时分秒毫秒</h5><p><span class="s_green">getHours()</span>返回Date对象的小时 0-23<br><span class="s_green">getMinutes()</span>返回Date对象的分钟 0-59<br><span class="s_green">getSeconds()</span>返回Date对象的秒数 0-59<br><span class="s_green">getMilliseconds()</span>返回 Date 对象的毫秒(0 ~ 999)</p><hr><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h4><p><span class="s_jacinth">getTime()</span> 返回距1970年1月1日之间的毫秒数。很重要！！需要了解时间戳 timeStamp</p><p><span class="s_red">计算机纪元时间</span>：1970年1月0点0分0秒，过了多少毫秒 -&gt; 毫秒就是当前这个时间的时间戳</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++){</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">' '</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(start,end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把时间戳放进Date()里面可以返回具体时间</span></span><br><span class="line"><span class="keyword">var</span> dateTime = <span class="keyword">new</span> <span class="built_in">Date</span>(end);</span><br><span class="line"><span class="built_in">console</span>.log(dateTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTime 设置时间戳 -&gt; 设置成 2020年6月2日 </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                        <span class="comment">//2020年6月2日的时间戳</span></span><br><span class="line"><span class="keyword">var</span> dateTime2 = date.setTime(<span class="number">1591027200000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></tbody></table></figure><hr><h5 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h5><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date  = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">23</span>,<span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-05-21 23:05:50'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的和下面没有任何区别 推荐使用上面的</span></span><br><span class="line">    <span class="comment">// date.setFullYear(2020);</span></span><br><span class="line">    <span class="comment">// date.setMonth(5);</span></span><br><span class="line">    <span class="comment">// date.setDate(7);</span></span><br><span class="line">    <span class="comment">// date.setHours(20);</span></span><br><span class="line">    <span class="comment">// date.setMinutes(24);</span></span><br><span class="line">    <span class="comment">// date.setSeconds(23);</span></span><br><span class="line">    <span class="comment">// date.setMilliseconds(53);</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="计时器-gt-setInterval"><a href="#计时器-gt-setInterval" class="headerlink" title="计时器 -> setInterval"></a>计时器 -&gt; setInterval</h4><p><span class="s_green">setInterval</span>每隔特定的毫秒数时间执行一次内部函数，window下的方法。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    },<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">    setInterval(test,<span class="number">1000</span>); <span class="comment">//注意是没有括号的</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line">    setInterval(<span class="string">'test2()'</span>,<span class="number">1000</span>); <span class="comment">// 注意这样就要写括号了</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">1000</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    },time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这是更改不了的 setInterval在运行的时候只会取一次值</span></span><br><span class="line">    time = <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure><p><span class="s_red">返回值 -&gt; 唯一标识</span> 每一个计时器系统都会分配它一个唯一标识。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer1 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(timer,timer1,timer2);</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/64d914d6/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="清除计时器-gt-clearInterval"><a href="#清除计时器-gt-clearInterval" class="headerlink" title="清除计时器 -> clearInterval"></a>清除计时器 -&gt; clearInterval</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a &gt; <span class="number">5</span>){</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    }</span><br><span class="line">},<span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="延时器-gt-setTimeout"><a href="#延时器-gt-setTimeout" class="headerlink" title="延时器 -> setTimeout"></a>延时器 -&gt; setTimeout</h4><p><span class="s_red">setTimeout</span> 延迟特定毫秒数执行一次函数</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>setTimeout案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>获取更多数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        oBtn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.innerHTML = <span class="string">"加载中...."</span>;</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">// 加下划线是这个函数私有的变量</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">            setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(_self);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                _self.innerHTML = <span class="string">'获取更多数据'</span>;</span></span><br><span class="line">            },2000);</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout"></a>clearTimeout</h4><p><span class="s_red">clearTimeout</span> 清除延时器</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>clearTimeout案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>5秒跳转百度<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oPara = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">            oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>],</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            t = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">                location.href = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line">            },5000);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            oBtn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line">                clearTimeout(t);</span><br><span class="line"><span class="actionscript">                oPara.innerHTML = <span class="string">'已取消跳转'</span>;</span></span><br><span class="line">            }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>1、原型上编程，写一个数字时钟<br>2、原型上编程，写一个倒计时，如果位数不足两位的加个零</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript &lt;span class=&quot;s_green&quot;&gt;Date对象&lt;/span&gt;用于处理日期和时间，Date对象会自动把当前日期和时间保存为其初始化值。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Date对象的常用方法&quot;&gt;&lt;a href=&quot;#Date对象的常用方法&quot; c
      
    
    </summary>
    
    
    
      <category term="Date" scheme="https://cokesprit.gitee.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>DOM作业</title>
    <link href="https://cokesprit.gitee.io/posts/b02f6fe6/"/>
    <id>https://cokesprit.gitee.io/posts/b02f6fe6/</id>
    <published>2020-09-17T08:01:50.000Z</published>
    <updated>2020-09-17T08:12:57.029Z</updated>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>createDoumentFragment</title>
    <link href="https://cokesprit.gitee.io/posts/caf761ec/"/>
    <id>https://cokesprit.gitee.io/posts/caf761ec/</id>
    <published>2020-09-09T09:25:36.000Z</published>
    <updated>2020-09-09T10:21:02.072Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">createdocumentfragment()</span>方法创建一虚拟的节点对象，节点对象包含所有属性和方法。<br>createdocumentfragment又叫<span class="s_jacinth">创建文档片段（碎片）</span></p><hr><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>document.createdocumentfragment<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oFrag = <span class="built_in">document</span>.createDocumentFragment();  <span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">1000</span>; i++){</span><br><span class="line">    <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">    oLi.innerHTML = i+<span class="string">'、这是我'</span> + + <span class="string">'个项目'</span>;</span><br><span class="line">    oLi.className = <span class="string">"list-item"</span>;</span><br><span class="line"></span><br><span class="line">    oFrag.appendChild(oLi); <span class="comment">//把创建的元素放进虚拟DOM里面</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性渲染到oLlist里面大大的提升性能。</span></span><br><span class="line">oList.appendChild(oFrag);</span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">总结</span>：只要列表都建议用这种方式。DocumentFragment 是存在内存中的并不是存在DOM树上的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;createdocumentfragment()&lt;/span&gt;方法创建一虚拟的节点对象，节点对象包含所有属性和方法。&lt;br&gt;createdocumentfragment又叫&lt;span class=&quot;s_jacinth&quot;&gt;创建文档片
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>data-*属性</title>
    <link href="https://cokesprit.gitee.io/posts/943046a0/"/>
    <id>https://cokesprit.gitee.io/posts/943046a0/</id>
    <published>2020-09-09T08:01:24.000Z</published>
    <updated>2020-09-09T09:21:40.753Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">data-*</span>属性是HTML5中的新属性。赋予我们在所有HTML元素上嵌入自定义的data属性的能力。</p><p>可以通过<span class="s_green">dataset</span>来管理这些自定义属性。<br><span class="s_jacinth">注意：</span>dataset PC端兼容性不是特别好IE9及以下不支持，手机端都是兼容的。<br>自定义属性也可以使用<span class="s_red">setAttribute</span> 和 <span class="s_red">getAttribute</span>设置和获取</p><hr><h4 id="data-属性"><a href="#data-属性" class="headerlink" title="data-*属性"></a>data-*属性</h4><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>data-*属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-name</span>=<span class="string">"王小明"</span> <span class="attr">data-age</span>=<span class="string">"21"</span>&gt;</span> </span><br><span class="line">        我叫王小明</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> oP = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">     oP.dataset.name = <span class="string">"张三"</span>;</span></span><br><span class="line"><span class="actionscript">     oP.dataset.age = <span class="string">"21"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/943046a0/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="dataset练习"><a href="#dataset练习" class="headerlink" title="dataset练习"></a>dataset练习</h4><p>通过自定义属性来判断哪些电影是付费电影，当单击的时候付费电影就弹出提示框，免费电影就直接跳转链接。</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>data-*属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-uri</span>=<span class="string">"egts"</span> <span class="attr">data-sort</span>=<span class="string">"free"</span>&gt;</span></span><br><span class="line">    恶棍天使</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-uri</span>=<span class="string">"fczlm"</span> <span class="attr">data-sort</span>=<span class="string">"pay"</span>&gt;</span></span><br><span class="line">    复仇者联盟</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-uri</span>=<span class="string">"zl"</span> <span class="attr">data-sort</span>=<span class="string">"free"</span>&gt;</span></span><br><span class="line">    追龙</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-uri</span>=<span class="string">"plmxs"</span> <span class="attr">data-sort</span>=<span class="string">"pay"</span>&gt;</span></span><br><span class="line">    普罗米修斯</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; links.length; i++){</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>{</span><br><span class="line">        links[j].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> sort = <span class="keyword">this</span>.dataset.data-sort;</span><br><span class="line">            <span class="keyword">var</span> uri = <span class="keyword">this</span>.dataset.data-uri;</span><br><span class="line">            <span class="keyword">if</span>(sort === <span class="string">"free"</span>){</span><br><span class="line">                <span class="built_in">window</span>.open(<span class="string">'http:baidu.com/'</span> + uri);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                alert(<span class="string">"这是付费影片"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;data-*&lt;/span&gt;属性是HTML5中的新属性。赋予我们在所有HTML元素上嵌入自定义的data属性的能力。&lt;/p&gt;
&lt;p&gt;可以通过&lt;span class=&quot;s_green&quot;&gt;dataset&lt;/span&gt;来管理这些自定义属性
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>元素属性设置获取</title>
    <link href="https://cokesprit.gitee.io/posts/949b6685/"/>
    <id>https://cokesprit.gitee.io/posts/949b6685/</id>
    <published>2020-09-09T07:14:36.000Z</published>
    <updated>2020-09-09T07:56:31.950Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">setAttribute()</span>添加指定的属性，并为其赋值指定的值。如果这个指定的属性已存在，则仅设置/更改值。<br><span class="s_jacinth">语法：</span>setAttribute(‘属性名’,’属性值’);</p><p><span class="s_green">getAttribute()</span>返回指定属性名的属性值。如果希望返回的是 Attr对象返回属性，就用getAttributeNode。<br><span class="s_jacinth">语法：</span>getAttribute(‘属性名’);</p><hr><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setAttribute 给元素增加属性和属性值</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">div.setAttribute(<span class="string">'id'</span>,<span class="string">'box'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getAttribute 获取属性值</span></span><br><span class="line"><span class="keyword">var</span> attr = div.getAttribute(<span class="string">'class'</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>元素属性设置获取<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.running</span>{<span class="attribute">color</span>:<span class="number">#3ae374</span>;}</span></span><br><span class="line"><span class="css">            <span class="selector-class">.warning</span>{<span class="attribute">color</span>:orange;}</span></span><br><span class="line"><span class="css">            <span class="selector-class">.denger</span>{<span class="attribute">color</span>:red;}</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            系统正在运行...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">syetemStatus</span>(<span class="params">statu</span>)</span>{</span><br><span class="line">    div.setAttribute(<span class="string">'class'</span>,statu);</span><br><span class="line">    <span class="keyword">switch</span>(statu){</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'running'</span>:</span><br><span class="line">        div.innerHTML = <span class="string">"系统正在运行"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'warning'</span>: </span><br><span class="line">        div.innerHTML = <span class="string">"系统运行有警告异常"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'denger'</span>: </span><br><span class="line">        div.innerHTML = <span class="string">"系统存在危险"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"> }</span><br><span class="line"> syetemStatus(<span class="string">'warning'</span>);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/949b6685/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;setAttribute()&lt;/span&gt;添加指定的属性，并为其赋值指定的值。如果这个指定的属性已存在，则仅设置/更改值。&lt;br&gt;&lt;span class=&quot;s_jacinth&quot;&gt;语法：&lt;/span&gt;setAttribute(‘属性
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>节点操作</title>
    <link href="https://cokesprit.gitee.io/posts/f7e7dff7/"/>
    <id>https://cokesprit.gitee.io/posts/f7e7dff7/</id>
    <published>2020-09-08T01:58:28.000Z</published>
    <updated>2020-09-09T01:20:05.906Z</updated>
    
    <content type="html"><![CDATA[<p>常用的节点操作有创建节点、剪切节点/增加节点、插入节点、替换节点、删除节点</p><p><span class="s_green">创建节点</span>createElement、createTextNode、createComment</p><p><span class="s_green">剪切/增加节点</span>：appendChild()</p><p><span class="s_green">插入节点</span>：insertBefore()</p><p><span class="s_green">替换节点</span>：repelaceChild()</p><p><span class="s_green">删除节点</span>：removeChild()、remove()</p><hr><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>createElement()、createTextNode()、createComment()，分别为创建元素节点、创建文本节点、创建注释节点</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">'Hello Word！！！'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建注释节点</span></span><br><span class="line"><span class="keyword">var</span> comment = <span class="built_in">document</span>.createComment(<span class="string">'我是注释君'</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="剪切-增加节点"><a href="#剪切-增加节点" class="headerlink" title="剪切/增加节点"></a>剪切/增加节点</h4><p>appendChild()方法向节点添加最后一个子节点。也可以使用appendChild()方法从一个元素向另一个元素中移动元素，实现剪切的功能。</p><p><span class="s_jacinth">增加节点</span><br><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">p.innerHTML = <span class="string">"JavaScript"</span>;</span><br><span class="line">div.appendChild(p); <span class="comment">// 把p元素添加到div里面去</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">剪切节点</span></p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>剪切节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>hhh <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素a</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div); </span><br><span class="line">div.appendChild(a); <span class="comment">// 将a剪切到div里面</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f7e7dff7/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>insertBefore()方法在指定的已有节点之前插入新的子节点。也可以使用 insertBefore 方法插入/移动已有元素<br><span class="s_green">语法：</span> parent.insertBefore(a,b); <span class="s_red">将a元素插入到parent节点下的b元素前面</span>。</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>插入节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">a.hrfe = <span class="string">''</span>;</span><br><span class="line">a.innerHTML = <span class="string">'我是a标签'</span>;</span><br><span class="line">div.insertBefore(a,p);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f7e7dff7/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h4><p>replaceChild()方法将某个子节点替换为另外一个。<br><span>语法</span>：parent.replaceChild(newnode,oldnode);</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>替换节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我标题标签h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h1'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> h2 = <span class="built_in">document</span>.createElement(<span class="string">'h2'</span>);</span><br><span class="line">h2.innerHTML = <span class="string">"我是标题标签h2"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).replaceChild(h2,h1);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f7e7dff7/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>删除节点的方法有两个分别是：removeChild() 和 remove()。<br><span class="s_green">removeChild()</span>方法从子节点列表中删除某个节点，成功删除返回被删除的节点，删除失败返回null。</p><p><span class="s_green">remove()</span>是真正的删除掉。ES5出来的。</p><p><span class="s_jacinth">二者的区别</span>removeChild()删除的是DOM节点但是内存里面的空间并没有释放，而remove()是彻底的删除掉。</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(div.removeChild(p)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTag(<span class="string">'a'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.remove());</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f7e7dff7/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用的节点操作有创建节点、剪切节点/增加节点、插入节点、替换节点、删除节点&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;创建节点&lt;/span&gt;createElement、createTextNode、createComment&lt;/p&gt;
&lt;p&gt;&lt;span cla
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>DOM结构树</title>
    <link href="https://cokesprit.gitee.io/posts/25df9200/"/>
    <id>https://cokesprit.gitee.io/posts/25df9200/</id>
    <published>2020-09-06T06:57:17.000Z</published>
    <updated>2020-10-05T11:34:05.697Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">DOM结构树</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/25df9200/DOM结构树.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="DOM操作深入"><a href="#DOM操作深入" class="headerlink" title="DOM操作深入"></a>DOM操作深入</h4><h5 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h5><p>它是定义在<span class="s_red">Document.prototype</span>上的，<span class="s_red">Element.prototype</span>和<span class="s_red">HTMLElement.prototype</span>并没有。  </p><p><span class="s_jacinth">举例证明：</span><br><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    我是文本节点</span><br><span class="line">    <span class="comment">&lt;!-- 我是注释君 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>我是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>]; </span><br><span class="line">div.getElementById(); <span class="comment">// 报错 因为HTMLElement.prototype上没有这个方法</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/25df9200/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h5><p>它是定义在Doment.prototype上的。</p><hr><h5 id="getElementsByTagName…"><a href="#getElementsByTagName…" class="headerlink" title="getElementsByTagName…."></a>getElementsByTagName….</h5><p><span class="s_red">getElementsByTagName</span><br><span class="s_red">getElementsClass</span><br><span class="s_red">querySelector<br><span class="s_red">querySelectorAll</span></span></p><p>这四个在<span class="s_jacinth">Document.prototype </span>和 <span class="s_jacinth">Element.prototype</span>都有。</p><hr><h5 id="星号-gt-通配符"><a href="#星号-gt-通配符" class="headerlink" title="* 星号 -> 通配符"></a>* 星号 -&gt; 通配符</h5><p><span class="s_jacinth">&nbsp;*&nbsp;</span> DOM里面也有这个东西，<span class="s_jacinth">&nbsp;*&nbsp;</span>选出来所有标签。只能document.getElementsByTagName使用！！！</p><p><span class="s_jacinth">举例证明：</span><br><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    我是文本节点</span><br><span class="line">    <span class="comment">&lt;!-- 我是注释君 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>我是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span>  </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(all);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/25df9200/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="获取-body-和-head"><a href="#获取-body-和-head" class="headerlink" title="获取 body 和 head"></a>获取 body 和 head</h5><p><span class="s_red">body</span> 和 <span class="s_red">head</span>在<span class="s_jacinth">HTMLDocument</span>上定义有，所以可以直接通过 document.body 和 document.head来获取body和head标签。</p><p><span class="s_js">JavaScript</span>  </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="built_in">console</span>.log(body);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.head;</span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么有没有 title呢？有但不是返回元素,而是title里面的文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="built_in">console</span>.log(title);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/25df9200/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="documentElement"><a href="#documentElement" class="headerlink" title="documentElement"></a>documentElement</h5><p>Document.prototype 提供了<span class="s_jacinth">documentElement</span>可以直接访问整个HTML文档。</p><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p> 1.在原型上编程</p><pre><code>要求 ：不能使用 children 和 childNodes    遍历任意一个父元素 找到它的子元素节点    有数字参数 -&gt; 某一个对应子元素    没有数字参数 -&gt;  子元素节点集合提示：是写在那个原型上，怎么判断有无参数的时候返回的参数不同</code></pre><p> 2.在原型上编程</p><pre><code>要求：    找出一个元素的第N层父级元素</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;DOM结构树&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>封装childnodes方法</title>
    <link href="https://cokesprit.gitee.io/posts/db01237d/"/>
    <id>https://cokesprit.gitee.io/posts/db01237d/</id>
    <published>2020-09-04T14:18:33.000Z</published>
    <updated>2020-09-05T07:41:02.386Z</updated>
    
    <content type="html"><![CDATA[<p>我们在获取子节点的时候虽然可以使用 <span class="s_red">childnodes</span> 和 <span class="s_red">children</span>,但是二者都有缺点,<br><span class="s_red">childnodes</span>会把一些我们不需要的注释节点和文本节点等返回回来。<br><span class="s_red">children</span>IE9以上版本才返回元素节点。<br><span class="s_green">所以我们需要封装一个只返回元素节点的方法。</span></p><hr><h4 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h4><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elemChildren</span>(<span class="params">node</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [],</span><br><span class="line">        children = node.childnodes;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++){</span><br><span class="line">        <span class="keyword">var</span> childItem = children[i]</span><br><span class="line">        <span class="keyword">if</span>(childItem.nodeType === <span class="number">1</span> ){</span><br><span class="line">            arr.push(childItem)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用类数组的方式进行封装"><a href="#使用类数组的方式进行封装" class="headerlink" title="使用类数组的方式进行封装"></a>使用类数组的方式进行封装</h4><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elemChildren</span>(<span class="params">node</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> temp = {</span><br><span class="line">        <span class="string">'length'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'push'</span>:<span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        <span class="string">'splice'</span>:<span class="built_in">Array</span>.prototype.splice</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    len = node.childNodes.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++){</span><br><span class="line">        <span class="keyword">var</span> childItem = node.childNodes[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(childItem.nodeType === <span class="number">1</span>){</span><br><span class="line">            temp[temp[<span class="string">'length'</span>]] = childItem;</span><br><span class="line">            temp[<span class="string">'length'</span>]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在获取子节点的时候虽然可以使用 &lt;span class=&quot;s_red&quot;&gt;childnodes&lt;/span&gt; 和 &lt;span class=&quot;s_red&quot;&gt;children&lt;/span&gt;,但是二者都有缺点,&lt;br&gt;&lt;span class=&quot;s_red&quot;&gt;childnodes
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>节点属性和方法</title>
    <link href="https://cokesprit.gitee.io/posts/e02e7815/"/>
    <id>https://cokesprit.gitee.io/posts/e02e7815/</id>
    <published>2020-09-04T14:05:48.000Z</published>
    <updated>2020-09-06T03:17:37.624Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_red">nodeName</span><span class="s_red">nodeVaue</span><span class="s_red">nodeType</span><span class="s_red">attributes</span><span class="s_red">getAttributeNode</span><br>这几个属性除了 <span class="s_jacinth">nodeType</span> 是经常用其他都不怎么用。</p><hr><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color: green;"</span>&gt;</span></span><br><span class="line">    我是文本节点</span><br><span class="line">    <span class="comment">&lt;!-- 我是注释君 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h4><p>nodeName 属性可依据节点的类型返回其名称。<br>如果节点是一个元素节点 , nodeName 属性将返回标签名。<br>如果节点是一个属性节点， nodeName 属性将返回属性名。<br>其他节点类型, nodeName 属性将返根据不同的节点类型返回不同的节点名称。<br>nodeName -&gt; 只读<br><br><br><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(div.nodeName);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">document</span>.nodeName);</span><br><span class="line">  <span class="built_in">console</span>.log(div.nodeName.toLowerCase()); <span class="comment">// 转小写</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e02e7815/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a>nodeValue</h4><p>nodeValue属性根据节点的类型设置或返回节点的值。<br>nodeValue属性可读可写，<span class="s_red">属性、注释、文本</span>节点<span class="s_jacinth">可用</span>。<br><br><br><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 文本节点 也有nodeValue</span></span><br><span class="line">    <span class="built_in">console</span>.log(div.firstChild.nodeValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注释节点 也有nodeValue</span></span><br><span class="line">    <span class="built_in">console</span>.log(div.childNodes[<span class="number">1</span>].nodeValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素节点 没有nodeValue</span></span><br><span class="line">    <span class="built_in">console</span>.log(div.childNodes[<span class="number">3</span>].nodeValue); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性节点也有 nodeValue</span></span><br><span class="line">    <span class="built_in">console</span>.log(div.getAttributeNode(<span class="string">'id'</span>).nodeValue);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(div.firstChild.nodeValue = <span class="string">"我是假的文本节点"</span>);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e02e7815/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><p><span class="s_jacinth">nodeType返回节点类型。无比重要！！！</span>  只可读不可修改。</p><table><thead><tr><th align="center">节点名称</th><th align="center">节点类型</th></tr></thead><tbody><tr><td align="center">元素节点</td><td align="center">1</td></tr><tr><td align="center">属性节点</td><td align="center">2</td></tr><tr><td align="center">文本节点</td><td align="center">3</td></tr><tr><td align="center">注释节点</td><td align="center">8</td></tr><tr><td align="center">document</td><td align="center">9</td></tr><tr><td align="center">DocumentFragment</td><td align="center">11</td></tr></tbody></table><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 结果返回1 -&gt; 元素节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(div.nodeType);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 结果返回2 -&gt; 属性节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(div.getAttributeNode(<span class="string">'id'</span>).nodeType); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结果返回3 -&gt; 文本节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(div.firstChild.nodeType); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结果返回8 -&gt; 注释节点</span></span><br><span class="line">  <span class="built_in">console</span>.log(div.childNodes[<span class="number">1</span>].nodeType);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e02e7815/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="attributes-getAttributeNode"><a href="#attributes-getAttributeNode" class="headerlink" title="attributes getAttributeNode"></a>attributes getAttributeNode</h4><p>attributes方法获取一个元素的属性集合<br>getAttributeNod方法获取元素属性<br>这两个了解即可。</p><hr><h4 id="hasChildNodes"><a href="#hasChildNodes" class="headerlink" title="hasChildNodes"></a>hasChildNodes</h4><p>hasChildNodes 判断节点下有没有子节点,返回true或false。</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 注意换行也是属于文本节点！！！</span></span><br><span class="line"><span class="built_in">console</span>.log(box.hasChildNodes());</span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e02e7815/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_red&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;s_red&quot;&gt;nodeVaue&lt;/span&gt;&lt;span class=&quot;s_red&quot;&gt;nodeType&lt;/span&gt;&lt;span class=&quot;s_red&quot;&gt;attributes&lt;/
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>document对象、获取元素、节点、遍历树</title>
    <link href="https://cokesprit.gitee.io/posts/edf1905e/"/>
    <id>https://cokesprit.gitee.io/posts/edf1905e/</id>
    <published>2020-09-02T13:52:31.000Z</published>
    <updated>2020-09-06T03:18:58.289Z</updated>
    
    <content type="html"><![CDATA[<h4 id="document"><a href="#document" class="headerlink" title="document"></a>document</h4><p><span class="jacinth">document 代表的是整个HTML文档</span>,HTML是一个根标签，而docment是整个文档的最上层，HTML是document的下一级。</p><hr><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><h5 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h5><p>通过元素的id来选择元素，只有getElementById是选择一个元素，其他都是选择一组的。</p><p><span class="s_green">开发习惯和规范问题:</span>id在项目当中是不可以顺便乱用的，在大公司里面id一般是不作为样式去定义的，一般在一些大公司里面这个id称为 钩子，真正的id的用处是拿来对接后端的，这个id在模块化开发当中一般来是一个模块一个id，能不用id尽量不用id,在大公司里面id一般不是你定的。</p><hr><h5 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h5><p>通过元素class来选择元素，返回的是一个数组。在IE8及以下的是没有这个方法，所以说DOM和BOM队兼容性要求比较高。</p><hr><h5 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h5><p>通过元素的name来选择元素，返回一个数组，支持到ie4这个极不常用。</p><hr><h5 id="querySelector-querySeclectorAll"><a href="#querySelector-querySeclectorAll" class="headerlink" title="querySelector querySeclectorAll"></a>querySelector querySeclectorAll</h5><p>这两个是HTML5这个版本新引入的WEB API，但是它们两个很早之前就有了，它们两个比getElementsByClassName还要早，兼容IE7,IE6及以下不兼容，querySelector 和 querySeclectorAll 它们两个的写法和CSS选择器是一样的。<br><br></p><hr><p><span class="s_jacinth">querySelector</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>querySelector<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(div);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> div2 = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)[<span class="number">1</span>];</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/1.png" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><p><span class="s_red">总结:</span>如果类和标签有多个的话，querySelector只会选择第一个，它不能选择一组。</p><hr><br><span class="s_jacinth">querySelectorAll</span><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>querySelectorAll<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>789<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(div1);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> div2 = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#box'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(div2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> div3 = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(div3);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>js运行结结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><span class="s_red">总结：</span>querySelectorAll 使用无论类、id、标签，返回来的都是一组。<br><hr><p><span class="s_jacinth">querySelector和querySelectorAll的缺点</span><br>1.性能要比get慢得多 -&gt; 公司用的少<br>2.不实时,相当于存了一个缓存在那，稍微有点有点更改对它都是无效的。这才是它们最致命的缺点。<br><span class="s_greens">例子</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>querySelector和querySelectorAll的缺点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>789<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span></span><br><span class="line">          divs[0].remove();</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(divs); <span class="comment">// 节点并没有被删除！！！</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="遍历节点树"><a href="#遍历节点树" class="headerlink" title="遍历节点树"></a>遍历节点树</h4><p>节点不是元素，元素是节点的一部分。<br>节点包含元素 -&gt; 元素节点 = DOM元素</p><hr><h5 id="parentNode"><a href="#parentNode" class="headerlink" title="parentNode"></a>parentNode</h5><p>父节点，每个子元素只有一个父节点</p><span class="s_green">html</span><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><span class="s_js">JavaScript</span><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(a.parentNode);<span class="comment">// a的父节点是li</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h5><p><span class="s_red">childNodes</span>子节点集合<br><span class="s_green">常用的节点有：</span><br>1、元素节点  = 1<br>2、属性节点  = 2<br>3、文本节点(#text)  = 3    换行也算是文本节点！！！<br>4、注释节点(#comment)  = 8<br>5、document = 9<br>6、DocumentFragment = 11<br>后面的数字表示节点号</p><p><span class="s_green">html</span></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123</span><br><span class="line">        <span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>我是超链接标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(li.childNodes.length); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(li.childNodes);</span><br></pre></td></tr></tbody></table></figure><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/5.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="firstChild-lastChild"><a href="#firstChild-lastChild" class="headerlink" title="firstChild lastChild"></a>firstChild lastChild</h5><p>第一个子节点，最后一个子节点</p><p><span class="s_js">JavaScript</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(li.firstChild); <span class="comment">//"123"</span></span><br><span class="line">    <span class="built_in">console</span>.log(li.lastChild); <span class="comment">// #text</span></span><br></pre></td></tr></tbody></table></figure><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/6.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="nextSibling-previousSibling"><a href="#nextSibling-previousSibling" class="headerlink" title="nextSibling previousSibling"></a>nextSibling previousSibling</h5><p>下一个兄弟节点,上一个兄弟节点</p><p><span class="s_js">JavaScript</span></p><pre><code class="JavaScript"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];   <span class="built_in">console</span>.log(p.previousSibling)   <span class="built_in">console</span>.log(p.nextSibling);   <span class="built_in">console</span>.log(p.nextSibling.nextSibling);</code></pre><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/7.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p><span class="s_jacinth">遍历节点树补充：</span> 在公司里面只使用parentNode和childNodes,其他都是不用的,虽然其他不用但是一定要认识。</p><hr><h4 id="遍历元素节点树"><a href="#遍历元素节点树" class="headerlink" title="遍历元素节点树"></a>遍历元素节点树</h4><p> <span class="s_red">parentElement</span>  -&gt; 父元素<br>  <span class="s_red">children</span>  -&gt; 子元素<br>   <span class="s_red">firstElementChild lastElementChild</span>  -&gt; 第一个子元素  最后一个子元素<br>    <span class="s_red">nextElementSibling previousElementSibling</span> -&gt; 下一个兄弟元素  上一个兄弟元素<br><br></p><p><span class="s_js">JavaScript</span></p><pre><code class="JavaScript"><span class="comment">// parentElement</span>    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];    <span class="built_in">console</span>.log(p.parentElement);    <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>];    <span class="built_in">console</span>.log(html.parentElement);    <span class="comment">// 总结：html标签有父节点 -&gt; #document ，但是但是但是没有父元素</span><span class="comment">// children</span>    <span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];    <span class="built_in">console</span>.log(li.children); <span class="comment">//[a, p, h1]</span><span class="comment">// 笔试</span><span class="comment">// childElementCount = children.length  这两个是一样的 不过前者没人用</span>    <span class="built_in">console</span>.log(li.childElementCount,li.children.length); <span class="comment">// 3 3</span><span class="comment">// firstElementChild lastElementChild</span>    <span class="built_in">console</span>.log(li.firstElementChild,li.lastElementChild);<span class="comment">// nextElementSibling previousElementSibling </span>    <span class="built_in">console</span>.log(p.previousElementSibling,p.nextElementSibling);</code></pre><p>js运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/edf1905e/8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h5><p><span class="s_green">遍历节点树补充：</span><br>parentElement IE9及以下不支持<br>children IE7及以下不支持<br>childElementCount = children.length  IE9及以下不支持<br>firstElementChild lastElementChild  IE9及以下不支持<br>nextElementSibling previousElementSibling  IE9及以下不支持<br>在公司里面除了children有时候用之外,其他都没有人用,虽然不用但是不得不认识!!!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;document&quot;&gt;&lt;a href=&quot;#document&quot; class=&quot;headerlink&quot; title=&quot;document&quot;&gt;&lt;/a&gt;document&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;jacinth&quot;&gt;document 代表的是整个HTML文档&lt;/s
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>DOM介绍</title>
    <link href="https://cokesprit.gitee.io/posts/f75e92e9/"/>
    <id>https://cokesprit.gitee.io/posts/f75e92e9/</id>
    <published>2020-09-02T13:15:10.000Z</published>
    <updated>2020-09-02T13:49:10.241Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_green">DOM</span> : Document Object Model 文档对象模型。<br>DOM是一个对象 -&gt; 又叫宿主对象 -&gt; 浏览器提供的。</p><hr><h4 id="JavaScript的3种对象"><a href="#JavaScript的3种对象" class="headerlink" title="JavaScript的3种对象"></a>JavaScript的3种对象</h4><h5 id="本地对象"><a href="#本地对象" class="headerlink" title="本地对象"></a>本地对象</h5><p><span class="s_red">本地对象 Native Object </span>：<br>Object、function、Array、String、Number、Boolean、Error、EvalError、SyntaxError、 SyntaxError、RangeError、ReferenceError、TypeError、URIError Date、RegExp</p><h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p><span class="s_red">内置对象 Built-in Object</span><br>Global 、 Math<br><span class="s_red">Global</span>是全局内置对象的总称但是它在ECMA是不存在的是虚拟的，ECMA -&gt; isNaN() parseInt() Number decodeURI EencodeURI Infinity NaN undefined 等等这些属性和方法都是属于Global。<br><span>补充:</span>本地对象和内置对象都是ECMAScript的内置对象。</p><h5 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h5><p><span class="s_red">宿主对象 Host Object</span><br>执行JS脚本的环境提供的对象，所以宿主对象又称为浏览器对象，<span class="s_jacinth">使用浏览器对象会涉及到兼容性问题</span>。</p><p><span class="s_green">浏览器对象</span>：window(BOM) 和 document(DOM),DOM是有W3C规范的，document是存在window下的。<br><span class="s_green">DOM的作用</span>：通过浏览器提供的这一套方法表示或操作HTML/XML。注意DOM是操作不了CSS的。它只是操作style这属性并没有直接操作样式表。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_green&quot;&gt;DOM&lt;/span&gt; : Document Object Model 文档对象模型。&lt;br&gt;DOM是一个对象 -&amp;gt; 又叫宿主对象 -&amp;gt; 浏览器提供的。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;JavaScript的3种对象&quot;
      
    
    </summary>
    
    
    
      <category term="DOM" scheme="https://cokesprit.gitee.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客文章发布部署</title>
    <link href="https://cokesprit.gitee.io/posts/c3259ce2/"/>
    <id>https://cokesprit.gitee.io/posts/c3259ce2/</id>
    <published>2020-09-02T10:56:29.786Z</published>
    <updated>2020-07-18T04:33:12.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><pre><code class="bash">$ hexo deploy</code></pre><p>作者：可乐精<br>链接：<a href="http://cokesprit.top/" target="_blank" rel="noopener">CokeSprit</a><br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建新帖子&quot;&gt;&lt;a href=&quot;#创建新帖子&quot; class=&quot;headerlink&quot; title=&quot;创建新帖子&quot;&gt;&lt;/a&gt;创建新帖子&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://cokesprit.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ES5严格模式</title>
    <link href="https://cokesprit.gitee.io/posts/654e1570/"/>
    <id>https://cokesprit.gitee.io/posts/654e1570/</id>
    <published>2020-08-28T09:08:36.000Z</published>
    <updated>2020-09-06T03:28:36.460Z</updated>
    
    <content type="html"><![CDATA[<p>ES5的严格模式,是ECMAScript要求对严格模式要强调，因为他们希望我们能够严格遵守ES5的语法和各种方法使用的规定，为ES6做铺垫。</p><h4 id="ECMAScript发展历程"><a href="#ECMAScript发展历程" class="headerlink" title="ECMAScript发展历程"></a>ECMAScript发展历程</h4><p>97年  1.0<br>98年  2.0<br>99年  3.0  -&gt; JS通行标准<br>这三年发展非常快，这ES3.0几乎奠定了ES5的大部分内容,其实ES5几乎全是ES3.0的内容,ES3.0到现在为止都统治着JavaScript，实际上ES5.0并没有对ES3.0进行十分多的更新。4.0 去了哪呢?</p><p>07年  4.0  -&gt; 太过激进 -&gt; 浏览器厂商不接受雅虎和微软都非常反对。</p><p>08年  4.0 中止（中止并不等于废除）：<br>把一部分容易改善的部分放到了ES3.0,发布了3.1一些比较激进的部分给了一个版本代号 Harmony -&gt; 开了这个会后 ES3.1 -&gt; 更名为ECMAScript5.0，但是更改了之后ECMAScript5还是没有发布。</p><p>09年  5.0发布  Harmony -&gt; 分成连部分：<br>1.一部分是激进当中不那么激进的部分 -&gt; 更名为 JS.NEXT<br>2.激进部分 -&gt; JS.next.next</p><p>11年  5.1 ISO国际标准   -&gt; 而且这个5.1几乎还是基于3.0的标准</p><p>13年  ES6 = js.next   js.next.next 放到es7里面</p><p>13年  ES6 草案发布</p><p>15年  ES6 正式发布  -&gt; ES6又名ECMAScrit2015</p><h4 id="ES5的两个运行模式："><a href="#ES5的两个运行模式：" class="headerlink" title="ES5的两个运行模式："></a>ES5的两个运行模式：</h4><p>正常模式 严格模式<br><span class="s_red">IE9及以下</span>不支持严格模式</p><h4 id="为什么要有严格模式？"><a href="#为什么要有严格模式？" class="headerlink" title="为什么要有严格模式？"></a>为什么要有严格模式？</h4><p>这是一个历史遗留问题,3.0太早了99年的,语法的严谨性和合理性有不足的地方,语法怪异安全性不足。</p><h4 id="如何使用严格模式"><a href="#如何使用严格模式" class="headerlink" title="如何使用严格模式"></a>如何使用严格模式</h4><p>“use strict”</p><p>如果是脚本启动就是写在最上面的一行</p><p>还有一种就是写在函数里面,这很多大厂都这样写</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="严格模式有那些影响"><a href="#严格模式有那些影响" class="headerlink" title="严格模式有那些影响"></a>严格模式有那些影响</h4><p>在严格模式下有一些属性是不能使用的例如：caller、callee、with、arguments下的大部分属性都是不可以用的,<span class="s_red">注意</span>arguments是可以用的。</p><h5 id="严格模式下this指向"><a href="#严格模式下this指向" class="headerlink" title="严格模式下this指向"></a>严格模式下this指向</h5><p>非严格模式下函数内部的this指向window</p><p>严格模式下如果函数没实例化this指向undefined,new 实例化之后this就指向<span class="s_red">该构造函数</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没实例化之前严格模式下this指向</span></span><br><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">}</span><br><span class="line">test();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化之后</span></span><br><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> test();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="严格模式下call"><a href="#严格模式下call" class="headerlink" title="严格模式下call"></a>严格模式下call</h5><p>非严格模式下call()里面填的原始值的话它会经过包装类成为对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    concole.log(<span class="keyword">this</span>); <span class="comment">// </span></span><br><span class="line">}</span><br><span class="line">test.call(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="函数的参数不能重复命名"><a href="#函数的参数不能重复命名" class="headerlink" title="函数的参数不能重复命名"></a>函数的参数不能重复命名</h5><p>非严格 -&gt; 不报错<br>严格模式 -&gt; 报错 -&gt; 严格模式下函数参数不能重复命名</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,a</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h5><p>严格模式 -&gt; 对象命名不允许重复但 -&gt; 不报错 </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>严格模式下eval(); 作用域被改变</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样在严格模式下 -&gt; 不报错</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'var a = 1; console.log(a)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但如果下面还打印a就报错</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/654e1570/6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在严格模式下eval是有自己独立的作用域的,已经不再是全局的作用域了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES5的严格模式,是ECMAScript要求对严格模式要强调，因为他们希望我们能够严格遵守ES5的语法和各种方法使用的规定，为ES6做铺垫。&lt;/p&gt;
&lt;h4 id=&quot;ECMAScript发展历程&quot;&gt;&lt;a href=&quot;#ECMAScript发展历程&quot; class=&quot;heade
      
    
    </summary>
    
    
    
      <category term="js错误信息篇" scheme="https://cokesprit.gitee.io/tags/js%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>try...catch...</title>
    <link href="https://cokesprit.gitee.io/posts/a86aeb16/"/>
    <id>https://cokesprit.gitee.io/posts/a86aeb16/</id>
    <published>2020-08-28T08:18:55.000Z</published>
    <updated>2020-09-06T03:28:03.244Z</updated>
    
    <content type="html"><![CDATA[<p>当系统自动为我们抛出错误的时候程序就不会继续执行，为了解决这个问题我们在可能会报错的地方使用手动抛出错误的方法 -&gt; try…catch…finally…throw,后面两个可以不写但是try…catch是一定要的。</p><p>try: 里面没有错误的时候它是不走catch<br>catch: 第一大要务就是捕获try里面的错误<br>finally: 不管catch里没有错误都执行<br>throw: 可以通过throw 扔出自定义错误</p><h4 id="系统自动为我们抛出错误"><a href="#系统自动为我们抛出错误" class="headerlink" title="系统自动为我们抛出错误"></a>系统自动为我们抛出错误</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行2'</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/a86aeb16/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="手动抛出错误"><a href="#手动抛出错误" class="headerlink" title="手动抛出错误"></a>手动抛出错误</h4><p>try…catch…finally…throw</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常执行1'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常执行2'</span>);</span><br><span class="line">}<span class="keyword">catch</span>(e){</span><br><span class="line">    <span class="built_in">console</span>.log(e.name); <span class="comment">// 错误类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.message); <span class="comment">//错误的具体信息</span></span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常执行3'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行4'</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/a86aeb16/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="keyword">if</span>(jsonStr == <span class="string">''</span>){</span><br><span class="line">        <span class="comment">// 抛出错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'JSON字符串为空'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面抛出错误了所以下面这里并没有执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我要执行了!!!"</span>);</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(jsonStr);</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line">}<span class="keyword">catch</span>(e){</span><br><span class="line">    <span class="built_in">console</span>.log(e);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 换方案执行</span></span><br><span class="line">    <span class="keyword">var</span> errorTip = {</span><br><span class="line">        name:<span class="string">'数据传输失败'</span>,</span><br><span class="line">        errorCode:<span class="string">'10010'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(errorTip);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/a86aeb16/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>try … catch 一般用在比较大型的web程序插件里面比较多<br>，一般开发的时候用的比较少。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当系统自动为我们抛出错误的时候程序就不会继续执行，为了解决这个问题我们在可能会报错的地方使用手动抛出错误的方法 -&amp;gt; try…catch…finally…throw,后面两个可以不写但是try…catch是一定要的。&lt;/p&gt;
&lt;p&gt;try: 里面没有错误的时候它是不走
      
    
    </summary>
    
    
    
      <category term="js错误信息篇" scheme="https://cokesprit.gitee.io/tags/js%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>JS错误类型</title>
    <link href="https://cokesprit.gitee.io/posts/e24d4eb8/"/>
    <id>https://cokesprit.gitee.io/posts/e24d4eb8/</id>
    <published>2020-08-28T01:44:10.000Z</published>
    <updated>2020-09-06T03:28:17.240Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript有六种错误类型，每一种类型都对应着一种构造函数,这些构造函数都可以通过实例化去定义错误类型。除此之外还有一个总的错误类型 Error。下面分别介绍这六种错误类型。</p><hr><h4 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h4><p>SyntaxError -&gt; 语法错误，有以下几种情况：</p><h5 id="变量名不规范"><a href="#变量名不规范" class="headerlink" title="变量名不规范"></a>变量名不规范</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">1</span>ab = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/1-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="关键字赋值"><a href="#关键字赋值" class="headerlink" title="关键字赋值"></a>关键字赋值</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> = 1;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/1-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="基本语法错误"><a href="#基本语法错误" class="headerlink" title="基本语法错误"></a>基本语法错误</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>:</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/1-3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="ReferenceError"><a href="#ReferenceError" class="headerlink" title="ReferenceError"></a>ReferenceError</h4><p>ReferenceError -&gt; 引用错误 -&gt; 以下都是报引用错误</p><h5 id="变量或者函数未声明"><a href="#变量或者函数未声明" class="headerlink" title="变量或者函数未声明"></a>变量或者函数未声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/2-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="给无法被赋值的对象赋值的时候"><a href="#给无法被赋值的对象赋值的时候" class="headerlink" title="给无法被赋值的对象赋值的时候"></a>给无法被赋值的对象赋值的时候</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> = <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/2-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="RangeError"><a href="#RangeError" class="headerlink" title="RangeError"></a>RangeError</h4><p>RangeError -&gt; 范围错误 -&gt; 以下都是报引范围错误</p><h5 id="数组长度赋值为负数"><a href="#数组长度赋值为负数" class="headerlink" title="数组长度赋值为负数"></a>数组长度赋值为负数</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/3-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="对象方法参数超出可行范围"><a href="#对象方法参数超出可行范围" class="headerlink" title="对象方法参数超出可行范围"></a>对象方法参数超出可行范围</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">66.66</span>);</span><br><span class="line"><span class="comment">// toFixed 保留小数点几位</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">-1</span>)); <span class="comment">// 如果为 -1就会报错</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/3-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h4><p>TypeError -&gt; 类型错误 -&gt; 以下都是报引类型错误</p><h5 id="调用不存在的方法"><a href="#调用不存在的方法" class="headerlink" title="调用不存在的方法"></a>调用不存在的方法</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果写 test(); -&gt; ReferenceError -&gt; 引用错误</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 但 如果写 123(); 报类型错误</span></span><br><span class="line"><span class="number">123</span>();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/4-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {};</span><br><span class="line">obj.say(); </span><br><span class="line"><span class="comment">// obj.say; // 这样就不会有错误</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/4-1-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没有括号的时候不会报错,证明如果没有这个括号的时候JavaScript会认为这是一个属性只是没有赋值。加了括号以后属性执行了,但是属性不能像函数那样执行,所以报 TypeError -&gt; 类型错误。</p><hr><h5 id="实例化原始值"><a href="#实例化原始值" class="headerlink" title="实例化原始值"></a>实例化原始值</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 后面必须是一个构造器</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="string">'String'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var b = new 123; //还是会报类型错误</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/4-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="URIError"><a href="#URIError" class="headerlink" title="URIError"></a>URIError</h4><p>URIError -&gt; 编码错误<br>URI介绍：<br>URI：UNIFORM RESOURCE IDENTIFIER 统一的资源标识符<br>URL：UNIFORM RESOURCE LOCATOR 统一资源定位符<br>URN：UNIFORM RESOURCE NAME 统一资源名称</p><p>URL和URN是URI的子集</p><p>URL：有传输协议、有域名、或者有资源空间例如：<br><a href="http://www.baidu.com/new#today" target="_blank" rel="noopener">http://www.baidu.com/new#today</a><br><a href="ftp://www.baidu.com/ftp#developer">ftp://www.baidu.com/ftp#developer</a></p><p>URN：<a href="http://www.baidu.com/ftp#developer" target="_blank" rel="noopener">www.baidu.com/ftp#developer</a> -&gt; 唯一的ID<br>hrfe=”tel:13900000”<br>href=”mailto:<a href="mailto:2665281140@qq.com">2665281140@qq.com</a>“</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myUrl = <span class="string">"http://www.baidu.cin?name=可乐"</span>;</span><br><span class="line">    <span class="comment">// encodeURI 把URI里面的中文转化为中文字符编码</span></span><br><span class="line"><span class="keyword">var</span> newUrl = <span class="built_in">encodeURI</span>(myUrl);</span><br><span class="line"><span class="built_in">console</span>.log(newUrl)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// decodeURI将中文编码转化成中文</span></span><br><span class="line"><span class="keyword">var</span> newNewUrl = <span class="built_in">decodeURI</span>(newUrl); </span><br><span class="line"><span class="built_in">console</span>.log(newNewUrl);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果decodeURI 里面的中文编码乱填的haul就会报错</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(<span class="string">'%fdsd'</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/5-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="EvalError"><a href="#EvalError" class="headerlink" title="EvalError"></a>EvalError</h4><p>EvalError -&gt; 全局错误</p><h5 id="eval函数执行错误"><a href="#eval函数执行错误" class="headerlink" title="eval函数执行错误"></a>eval函数执行错误</h5><p>现在呢，这个已经不那么容易报错了。<br>eval();最大的功能是可以在括号写JavaScript程序然后执行还有就是把json对象转化成课循环的对象。不过现在已经很少使用了，es6已经完全摒弃了。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'var a = 1;console.log(a)'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/6-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>把json对象转化成可循环的对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonDate = <span class="string">'['</span>+</span><br><span class="line">    <span class="string">'{'</span>+</span><br><span class="line">        <span class="string">'"name": "abc"'</span>+</span><br><span class="line">    <span class="string">'},'</span>+</span><br><span class="line">    <span class="string">'{'</span>+</span><br><span class="line">        <span class="string">'"name": "bc"'</span>+</span><br><span class="line">    <span class="string">'},'</span>+</span><br><span class="line">    <span class="string">'{'</span>+</span><br><span class="line">        <span class="string">'"name": "c"'</span>+</span><br><span class="line">    <span class="string">'},'</span>+</span><br><span class="line"><span class="string">']'</span>;</span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">eval</span>(<span class="string">'('</span> + jsonDate +<span class="string">')'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> data){</span><br><span class="line">    <span class="keyword">var</span> item = data[i];</span><br><span class="line">    <span class="built_in">console</span>.log(item.name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/6-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>为什么不推荐使用 eval?<br>1.实际上es3就不建议是用了es5.0也不建议使用，es6已经完全摒弃了<br>2.语法规范不好<br>3.不好调试<br>4.性能问题<br>5.些许的安全性问题<br>6.可读性差</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>JavaScript的错误类型一共有六种：<br>SyntaxError -&gt; 语法错误<br>ReferenceError -&gt; 引用错误<br>RangeError -&gt; 范围错误<br>TypeError -&gt; 类型错误<br>URIError - 编码错误（比较少见）<br>EvalError -&gt; 编码错误 （很少见）</p><p>这六种错误类型都可以人为的抛出通过 new来：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Syerror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'语法错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Syerror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Reerror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'引用错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Reerror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Raerror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'范围错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Raerror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tyerror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'类型错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Tyerror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> URerror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'编码错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(URerror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Everror = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">'编码错误'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Everror);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> srror = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"总的Error"</span>);  <span class="comment">// 总的Error</span></span><br><span class="line"><span class="built_in">console</span>.log(srror);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/e24d4eb8/7-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript有六种错误类型，每一种类型都对应着一种构造函数,这些构造函数都可以通过实例化去定义错误类型。除此之外还有一个总的错误类型 Error。下面分别介绍这六种错误类型。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;SyntaxError&quot;&gt;&lt;a href=&quot;#Synta
      
    
    </summary>
    
    
    
      <category term="js错误信息篇" scheme="https://cokesprit.gitee.io/tags/js%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>字符串去重</title>
    <link href="https://cokesprit.gitee.io/posts/dc5c6a5/"/>
    <id>https://cokesprit.gitee.io/posts/dc5c6a5/</id>
    <published>2020-08-26T11:42:53.000Z</published>
    <updated>2020-09-06T03:29:25.024Z</updated>
    
    <content type="html"><![CDATA[<p>字符串去重思路思路和数组的一样的,不过字符串去重相对来说简单一点;</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaa1111222333ddewdd6"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法挂载在String.prototype上</span></span><br><span class="line"><span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> temp = {},</span><br><span class="line">        newStr = <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i ++){</span><br><span class="line">        <span class="keyword">if</span>(!temp.hasOwnProperty(<span class="keyword">this</span>[i])){</span><br><span class="line">            temp[<span class="keyword">this</span>[i]] = <span class="keyword">this</span>[i];</span><br><span class="line">            <span class="comment">//字符串拼接对象也可以</span></span><br><span class="line">            newStr += <span class="keyword">this</span>[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newStr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.unique());</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/dc5c6a5/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>注意：字符串去重的时候方法挂载在String.prototype上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符串去重思路思路和数组的一样的,不过字符串去重相对来说简单一点;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="https://cokesprit.gitee.io/posts/908d091d/"/>
    <id>https://cokesprit.gitee.io/posts/908d091d/</id>
    <published>2020-08-26T11:12:22.000Z</published>
    <updated>2020-09-06T03:25:37.932Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在JavaScript中属性是字符串只是它可以把字符串变成变量类型</span></span><br><span class="line">    <span class="comment">// obj = {</span></span><br><span class="line">    <span class="comment">//     "0": 1,</span></span><br><span class="line">    <span class="comment">//     "1": 2,</span></span><br><span class="line">    <span class="comment">//     "2": 3,</span></span><br><span class="line">    <span class="comment">//     "3": 4,</span></span><br><span class="line">    <span class="comment">//     "4": 5</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'d'</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> temp = {},</span><br><span class="line">        newArr = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++){</span><br><span class="line">        <span class="comment">// 如果不存在则为false,然后取反就为true</span></span><br><span class="line">        <span class="keyword">if</span>(!temp.hasOwnProperty(<span class="keyword">this</span>[i])){</span><br><span class="line">            <span class="comment">// 把它添加到对象里面去</span></span><br><span class="line">            temp[<span class="keyword">this</span>[i]] = <span class="keyword">this</span>[i];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 添加到一个新的数组</span></span><br><span class="line">            newArr.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回到外界</span></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.unique());</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/908d091d/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实现思路：<br>使用for和if还有对象的hasOwnProperty来循环判断添加到个空对象里面，同时添加到一个新的数组里面。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>类数组</title>
    <link href="https://cokesprit.gitee.io/posts/5b0dde5/"/>
    <id>https://cokesprit.gitee.io/posts/5b0dde5/</id>
    <published>2020-08-26T04:01:27.000Z</published>
    <updated>2020-09-06T03:26:45.336Z</updated>
    
    <content type="html"><![CDATA[<p>类数组并不是真正意义上的数组它是类似于<span class="s_red">数组的对象！！！</span><br>类数组一定要有以下这几种形式：<br>第一、一定要有数组形式下标对应的值;<br>第二、一定要有length属性;<br>第三、要挂载有数组原型上的方法例如:Array.prototype.push 或者 Array.prototype.splice;</p><p>注意：类数组的原型是object真正的数组原型是Array<br>接下来举例子说明：</p><hr><h4 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h4><p>arguments 最典型的的类数组,我们来打印一下它</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">}</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/5b0dde5/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="写一个类数组"><a href="#写一个类数组" class="headerlink" title="写一个类数组"></a>写一个类数组</h4><p>按照上面的几种形式写一个完整的类数组</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="string">'0'</span>:<span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'1'</span>:<span class="string">'2'</span>,</span><br><span class="line">    <span class="string">'2'</span>:<span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'3'</span>:<span class="string">'4'</span>,</span><br><span class="line">    <span class="string">'4'</span>:<span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'5'</span>:<span class="string">'6'</span>,</span><br><span class="line">    <span class="string">'length'</span>:<span class="number">6</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以将它们挂载到对象的原型上</span></span><br><span class="line">    <span class="string">'push'</span>: <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">    <span class="string">'splice'</span>: <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 也可以挂载到原型上去</span></span><br><span class="line"><span class="comment">// Object.prototype.push = Array.prototype.push;</span></span><br><span class="line"><span class="comment">// Object.prototype.splice = Array.prototype.splice;</span></span><br><span class="line"></span><br><span class="line">obj.push(<span class="string">"7"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/5b0dde5/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>push方法是怎么做到的？ 为什么它能在类数组里面起作用呢？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push原理在类数组的原理</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 真正的写法 谁用this就指向谁</span></span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length] = elem;</span><br><span class="line">        <span class="keyword">this</span>.length ++;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="阿里题目"><a href="#阿里题目" class="headerlink" title="阿里题目"></a>阿里题目</h4><p>下面的打印结果是怎么样的?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="string">'2'</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">'3'</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="string">'length'</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">'splice'</span>: <span class="built_in">Array</span>.prototype.splice,</span><br><span class="line">    <span class="string">'push'</span>: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">obj.push(<span class="number">1</span>);</span><br><span class="line">obj.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/5b0dde5/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结果为两个空，一个 1 ，一个 2,length长度变成了 4。它是怎么来的呢？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据push的原理一步一步的剖析</span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length] = elem;</span><br><span class="line">        <span class="keyword">this</span>.length ++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最开始length长度为 2</span></span><br><span class="line">            <span class="comment">// 第一次push</span></span><br><span class="line">                <span class="comment">// obj[2] = 1;</span></span><br><span class="line">                <span class="comment">// obj.length ++; //obj.length变成 3</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 第二次push </span></span><br><span class="line">                <span class="comment">// obj[3] = 2;</span></span><br><span class="line">                <span class="comment">// obj.length ++; // obj.length 变成4</span></span><br><span class="line">       </span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>  执行完两次length变成了4，之前的 0 和 1项并没有发生改变而3 和 4 被 1 和 2替换掉了。</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>讲一讲为什么会打印 empty？<br>这是数组的一个特性，可以有空的项,类数组也同样具备这样的特性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前讲过的稀松数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [,,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/5b0dde5/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类数组并不是真正意义上的数组它是类似于&lt;span class=&quot;s_red&quot;&gt;数组的对象！！！&lt;/span&gt;&lt;br&gt;类数组一定要有以下这几种形式：&lt;br&gt;第一、一定要有数组形式下标对应的值;&lt;br&gt;第二、一定要有length属性;&lt;br&gt;第三、要挂载有数组原型上的方法例如:
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组深入篇</title>
    <link href="https://cokesprit.gitee.io/posts/3061e2e2/"/>
    <id>https://cokesprit.gitee.io/posts/3061e2e2/</id>
    <published>2020-08-24T12:27:16.000Z</published>
    <updated>2020-09-06T03:21:10.579Z</updated>
    
    <content type="html"><![CDATA[<p>数组的深入篇有五个方法分别是concat、slice、toString、join和split。这五个数组方法都不会修改原数组，下面逐个进行讲解。</p><hr><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>数组concat方法拼接数组,返回拼接后的数组。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>,<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2  =  arr1.concat(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3061e2e2/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>数组slice方法截取数组,并返回截取的部分<br>语法：slice(起始下标包含，结束下标不包含)<br>如果不写参数那就是返回整个数组(数组克隆)<br>如果只写一个参数,就从这个位置截取到最后</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr0 = arr.slice();</span><br><span class="line"><span class="built_in">console</span>.log(arr0)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.slice(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.slice(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">// b c d</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.slice(<span class="number">-3</span>,<span class="number">4</span>); <span class="comment">// c d</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr4 = arr.slice(<span class="number">1</span>,<span class="number">-1</span>); <span class="comment">// b c d</span></span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3061e2e2/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>数组toString方法将数组转化成字符串每个元素之间用逗号隔开</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());</span><br><span class="line"><span class="built_in">console</span>.log(arr1.toString());</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3061e2e2/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="join和split"><a href="#join和split" class="headerlink" title="join和split"></a>join和split</h4><p>join 和 split 是一组!!!!</p><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><p>把数组中的所有元素放入一个字符串。有一个参数该参数通过指定分隔符进行分隔。<br>如果join里面不填写参数那么它和toString方法是一样的。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不填写参数时</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"join不填写参数时："</span>);</span><br><span class="line"><span class="keyword">var</span> str1 = arr.join();</span><br><span class="line"><span class="keyword">var</span> str2 = arr.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str1+<span class="string">"    "</span>+str2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填写参数时</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"join填写参数时："</span>);</span><br><span class="line"><span class="keyword">var</span> str3 = arr.join(<span class="string">"-"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3061e2e2/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><p>split(‘分隔符’,’截取位数’)将字符串按照分隔符转换成数组,二个参数为截取的位数可以不写。<br>如果把空字符串 (“”) 用作 参数那么每个字符之间都会被分割。<br>join 和 split 是一组!!!</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用join 变成字符串</span></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入"" 的时候</span></span><br><span class="line"><span class="keyword">var</span> arr2 =  arr1.split(<span class="string">""</span>); <span class="comment">// ["a", ",", "b", ",", "c", ",", "d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.split(<span class="string">","</span>); <span class="comment">// ["a", "b", "c", "d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入+ 的时候</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr1.split(<span class="string">"+"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// ["a,b,c,d"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有第二个参数时</span></span><br><span class="line"><span class="keyword">var</span> arr5 = arr1.split(<span class="string">","</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr5); <span class="comment">// ["a", "b", "c"]</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3061e2e2/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组的深入篇有五个方法分别是concat、slice、toString、join和split。这五个数组方法都不会修改原数组，下面逐个进行讲解。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;concat&quot;&gt;&lt;a href=&quot;#concat&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组排序sort方法</title>
    <link href="https://cokesprit.gitee.io/posts/cc10395e/"/>
    <id>https://cokesprit.gitee.io/posts/cc10395e/</id>
    <published>2020-08-23T13:25:47.000Z</published>
    <updated>2020-09-06T03:25:44.079Z</updated>
    
    <content type="html"><![CDATA[<p>sort方法按照ASCII来对数组进行排序,返回排序以后的数组,默认按升序排序。当数值有参数传进去的时候只接受函数且这个函数要满足以下两个规则:<br>1.函数里面必须包含两个参数a，b<br>2.必须要有返回值：<br>负值，a就排在前面<br>正值，b就排在前面<br>0 ，保持不动</p><p class="s_red">这两个规则是重中之重,只要掌握了这两个规则啥都不是问题</p><hr><h4 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [<span class="number">27</span>,<span class="number">49</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 简写 </span></span><br><span class="line">        <span class="comment">// return a - b;</span></span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/cc10395e/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="例子二降序"><a href="#例子二降序" class="headerlink" title="例子二降序"></a>例子二降序</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [<span class="number">27</span>,<span class="number">49</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">100</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b ){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 简写 </span></span><br><span class="line">        <span class="comment">// return b - a;</span></span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/cc10395e/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="笔试-面试"><a href="#笔试-面试" class="headerlink" title="笔试 / 面试"></a>笔试 / 面试</h4><h5 id="随机排序"><a href="#随机排序" class="headerlink" title="随机排序"></a>随机排序</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">if</span>(rand &gt; <span class="number">0.5</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/cc10395e/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="对象排序-根据年龄"><a href="#对象排序-根据年龄" class="headerlink" title="对象排序 根据年龄"></a>对象排序 根据年龄</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    {</span><br><span class="line">        name:<span class="string">'张三'</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        name:<span class="string">'李四'</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        name:<span class="string">'王五'</span>,</span><br><span class="line">        age: <span class="number">8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        name:<span class="string">'赵六'</span>,</span><br><span class="line">        age: <span class="number">28</span></span><br><span class="line">    },</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(a.age &gt; b.age){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简写 </span></span><br><span class="line">        <span class="comment">// return a.age - b.age;</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/cc10395e/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h4><p>对比字符串的长度</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'12346'</span>,<span class="string">'5'</span>,<span class="string">'1613'</span>,<span class="string">'54'</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a.length - b.length;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/cc10395e/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sort方法按照ASCII来对数组进行排序,返回排序以后的数组,默认按升序排序。当数值有参数传进去的时候只接受函数且这个函数要满足以下两个规则:&lt;br&gt;1.函数里面必须包含两个参数a，b&lt;br&gt;2.必须要有返回值：&lt;br&gt;负值，a就排在前面&lt;br&gt;正值，b就排在前面&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的splice方法</title>
    <link href="https://cokesprit.gitee.io/posts/32269d8b/"/>
    <id>https://cokesprit.gitee.io/posts/32269d8b/</id>
    <published>2020-08-22T10:03:23.000Z</published>
    <updated>2020-09-06T03:25:57.627Z</updated>
    
    <content type="html"><![CDATA[<p>splice方法可以实现数组的插入删除修改的功能,有三个参数。返回值是以一个数组的形式返回删除的数组。<br>splice(开始项的下标(包含),剪切长度,剪切长度以后最后以为开始添加数据); 剪切长度可以是0和负数。</p><hr><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在下标为 1 的地方  删除2位 插入3位</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/32269d8b/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 c 和 e 之间添加 d</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在下标为3 的地方 删除0位 插入一位</span></span><br><span class="line">arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/32269d8b/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="笔试经常考"><a href="#笔试经常考" class="headerlink" title="笔试经常考"></a>笔试经常考</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>];</span><br><span class="line">arr.splice(<span class="number">-1</span>, <span class="number">0</span>, <span class="string">'d'</span>); <span class="comment">// -1 即e 所在的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">    <span class="comment">// 只要往后数就是 -1 开始 &lt;---</span></span><br><span class="line">    <span class="comment">// 只要往前开始就是从 0 开始 ---&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/32269d8b/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="splice是如何找到相应的下标的"><a href="#splice是如何找到相应的下标的" class="headerlink" title="splice是如何找到相应的下标的"></a>splice是如何找到相应的下标的</h4><p>splice 当下标为负数的时候是如何找到相应的下标的它的原理是什么?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入数组和下标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splice</span>(<span class="params">arr,index</span>)</span>{</span><br><span class="line">    <span class="comment">// 常规写法</span></span><br><span class="line">        <span class="comment">// 如果index下标大于或等于0 </span></span><br><span class="line">        <span class="comment">// if(index &gt;= 0){</span></span><br><span class="line">        <span class="comment">//     index += 0; </span></span><br><span class="line">        <span class="comment">// }else{</span></span><br><span class="line">        <span class="comment">//     // 否则就 index = index + arr.length</span></span><br><span class="line">        <span class="comment">//     index += arr.length;</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三目运算</span></span><br><span class="line">    <span class="keyword">return</span> index += index &gt;=<span class="number">0</span> ? <span class="number">0</span> : arr.length;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>];</span><br><span class="line"> <span class="keyword">var</span> str = splice(arr,<span class="number">-1</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(str); <span class="comment">// 3</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr[str]); <span class="comment">// e</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/32269d8b/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;splice方法可以实现数组的插入删除修改的功能,有三个参数。返回值是以一个数组的形式返回删除的数组。&lt;br&gt;splice(开始项的下标(包含),剪切长度,剪切长度以后最后以为开始添加数据); 剪切长度可以是0和负数。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;示例一&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的reverse方法</title>
    <link href="https://cokesprit.gitee.io/posts/fd9290b5/"/>
    <id>https://cokesprit.gitee.io/posts/fd9290b5/</id>
    <published>2020-08-22T09:52:20.000Z</published>
    <updated>2020-09-06T03:26:01.226Z</updated>
    
    <content type="html"><![CDATA[<p>reverse 数组倒序排列,就是一个倒序的功能而已</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/fd9290b5/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;reverse 数组倒序排列,就是一个倒序的功能而已&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的pop和shift方法</title>
    <link href="https://cokesprit.gitee.io/posts/a6d7cc58/"/>
    <id>https://cokesprit.gitee.io/posts/a6d7cc58/</id>
    <published>2020-08-22T09:42:31.000Z</published>
    <updated>2020-09-06T03:26:10.891Z</updated>
    
    <content type="html"><![CDATA[<p>pop 删除数组的最后一位，并把它返会回来<br>shift 删除数组的第一位，并把它返回回来</p><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pop</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr1.pop();</span><br><span class="line">    <span class="comment">// 注意pop是没有参数的!!! 它执行一次删除一个</span></span><br><span class="line"><span class="built_in">console</span>.log(str1,arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// shift</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// 注意shift也是没有参数的!!! 它执行一次删除一个</span></span><br><span class="line"><span class="keyword">var</span> str2 = arr2.shift();</span><br><span class="line"><span class="built_in">console</span>.log(str2,arr2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/a6d7cc58/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pop 删除数组的最后一位，并把它返会回来&lt;br&gt;shift 删除数组的第一位，并把它返回回来&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的push和unshift方法</title>
    <link href="https://cokesprit.gitee.io/posts/f5194d63/"/>
    <id>https://cokesprit.gitee.io/posts/f5194d63/</id>
    <published>2020-08-22T09:15:29.000Z</published>
    <updated>2020-09-06T03:26:05.843Z</updated>
    
    <content type="html"><![CDATA[<p>push 尾部添加，返回值为执行了方法以后数组的长度<br>unshift 头部添加，返回值为执行了方法以后数组的长度</p><h4 id="push方法的实现"><a href="#push方法的实现" class="headerlink" title="push方法的实现"></a>push方法的实现</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 尾部添加：获取实参列表和现最后坐标</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.myPush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++){</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length; <span class="comment">// 返回添加后的数组长度</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.myPush(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f5194d63/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="unshift方法的实现"><a href="#unshift方法的实现" class="headerlink" title="unshift方法的实现"></a>unshift方法的实现</h4><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshfit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i++){</span><br><span class="line">            <span class="keyword">this</span>.splice(pos,<span class="number">0</span>,<span class="built_in">arguments</span>[i]);</span><br><span class="line">            pos++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">var</span>  str =arr.myUnshfit(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr,str);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f5194d63/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><p>使用数组concat方法和使用Array.prototype.slice.call 将argument类数组转化成数组</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 将类数组转化成数组</span></span><br><span class="line">    Arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">var</span> newArr = Arr.concat(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.myUnshift(<span class="string">'a'</span>,<span class="string">'b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/f5194d63/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;push 尾部添加，返回值为执行了方法以后数组的长度&lt;br&gt;unshift 头部添加，返回值为执行了方法以后数组的长度&lt;/p&gt;
&lt;h4 id=&quot;push方法的实现&quot;&gt;&lt;a href=&quot;#push方法的实现&quot; class=&quot;headerlink&quot; title=&quot;push方法的
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的声明和数组的原理</title>
    <link href="https://cokesprit.gitee.io/posts/75ee3634/"/>
    <id>https://cokesprit.gitee.io/posts/75ee3634/</id>
    <published>2020-08-22T08:32:04.000Z</published>
    <updated>2020-09-06T03:25:48.142Z</updated>
    
    <content type="html"><![CDATA[<h4 id="三种声明数组的方式"><a href="#三种声明数组的方式" class="headerlink" title="三种声明数组的方式"></a>三种声明数组的方式</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">// 字面量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 通过系统内置的Array 构造函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用</span></span><br><span class="line"><span class="keyword">var</span> arr3 =  <span class="built_in">Array</span>(); <span class="comment">// 可以省略new</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="数组的原型"><a href="#数组的原型" class="headerlink" title="数组的原型"></a>数组的原型</h4><p>这三种声明数组的原型是？ </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 =  <span class="built_in">Array</span>(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(arr3.__proto__);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/75ee3634/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">总结：</span>所有数组都继承与Array.prototype</p><hr><h4 id="数组到底是什么"><a href="#数组到底是什么" class="headerlink" title="数组到底是什么"></a>数组到底是什么</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模仿数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 0  1  2  3  4  </span></span><br><span class="line">            <span class="comment">// 数组的下标是从零开始的</span></span><br><span class="line">            <span class="comment">// index 数组元素的下标(索引值)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="number">5</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 结果是一样的，实际上数组的底层机制在JavaScript就是继承对象而来的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// var obj1 = {</span></span><br><span class="line">    <span class="comment">//     name:'a'</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组就是利用了对象的这种机制,而形成JavaScript中的数组,以及对数组元素的访问</span></span><br><span class="line">    <span class="comment">// obj1.name -&gt; obj1['name'] 系统机制</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/75ee3634/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">总结：</span> 在JavaScript中数组就是对象的另一种形式，虽然写法不同但是它们的底层机制和访问机制是一样的。</p><hr><h4 id="稀松数组"><a href="#稀松数组" class="headerlink" title="稀松数组"></a>稀松数组</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [,<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>,<span class="number">4</span>,]; <span class="comment">// 稀松数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var arr1 = new Array(,1,2,,3,4); // 这种是不行的  因为这传的是参数不能为空</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/75ee3634/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">总结：</span> 数组不一定每一位都有值但是如果最后一位没有值就等于没有最后一位</p><hr><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">6</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么打印undefined？</span></span><br><span class="line"><span class="comment">// 因为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">6</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//  数组和对象的底层机制是一样的。没有那个相对于的属性名所以undefined</span></span><br><span class="line"> <span class="built_in">console</span>.log(obj[<span class="number">10</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/75ee3634/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;三种声明数组的方式&quot;&gt;&lt;a href=&quot;#三种声明数组的方式&quot; class=&quot;headerlink&quot; title=&quot;三种声明数组的方式&quot;&gt;&lt;/a&gt;三种声明数组的方式&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>看似牛掰的对象拷贝</title>
    <link href="https://cokesprit.gitee.io/posts/c8cf727d/"/>
    <id>https://cokesprit.gitee.io/posts/c8cf727d/</id>
    <published>2020-08-21T01:30:01.000Z</published>
    <updated>2020-09-06T03:26:48.980Z</updated>
    
    <content type="html"><![CDATA[<p>对象拷贝分为浅拷贝和深拷贝也叫做克隆,拷贝对象的时候总会设计到引用值的问题，声明了一个新对象赋值了原来已有的对象,这个时候它们是指向同一个地址的。如果新对象变老对象也会变,老对象变新对象也会跟着变，这就造成了拷贝对象的一个困惑不仅仅是对象数组也是一样的。例如下面的例子:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = {</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = person1;</span><br><span class="line">person2.name = <span class="string">'李四'</span>;</span><br><span class="line">person2.sex = <span class="string">'male'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1,person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>知道问题之后我们接下来就来解决它</p><hr><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>对象的拷贝其实就是对引用值的拷贝/复制/克隆,最好的方法就是循环的添加到另一对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Object</span>.prototype.num = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> person1 = {</span><br><span class="line">     name:<span class="string">'张三'</span>,</span><br><span class="line">     age: <span class="number">18</span>,</span><br><span class="line">     sex: <span class="string">'male'</span>,</span><br><span class="line">     son:{</span><br><span class="line">         fitst:<span class="string">'Jenney'</span>,</span><br><span class="line">         second:<span class="string">'Lucy'</span>,</span><br><span class="line">         third:<span class="string">'Jone'</span></span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 这就是浅拷贝的方法使用 for in 来实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin,target</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> target = target || {}</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin){</span><br><span class="line">         <span class="comment">//hasOwsProperty 如果对象具有指定名称的属性,则返回true，否则false。</span></span><br><span class="line">        <span class="keyword">if</span>(origin.hasOwnProperty(key)){ <span class="comment">//剔除原型上的属性</span></span><br><span class="line">            target[key] = origin[key]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = clone(person1);</span><br><span class="line">person2.name = <span class="string">'李沐子'</span>;</span><br><span class="line">person2.sex = <span class="string">'female'</span>;</span><br><span class="line">person2.son.forth = <span class="string">'Juck'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从运行结果看name和sex更改成功且不会影响到老对象但当增加son对象时,老对象还是会受到影响。<br><span class="s_red">总结:</span> 浅拷贝处理不了对象里面的引用值</p><hr><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>使用Object.prototype.toString.call 和 typeof进行深拷贝</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">// 深拷贝</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin,target</span>)</span>{</span><br><span class="line">     <span class="keyword">var</span> target = target || {},</span><br><span class="line">         toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">         arrType = <span class="string">'[object Array]'</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin){</span><br><span class="line">         <span class="comment">// 判断key到底是不是origin本身的或是原型上的属性</span></span><br><span class="line">         <span class="keyword">if</span>(origin.hasOwnProperty(key)){</span><br><span class="line">              <span class="comment">// 判断是不是引用值，并且不等于 null</span></span><br><span class="line">             <span class="keyword">if</span>(<span class="keyword">typeof</span>(origin[key]) === <span class="string">'object'</span> &amp;&amp; origin[key] !== <span class="literal">null</span>){</span><br><span class="line">                 <span class="comment">// 判断是对象还是数组</span></span><br><span class="line">                 <span class="keyword">if</span>(toStr.call(origin[key]) === arrType){</span><br><span class="line">                     target[key] = [];</span><br><span class="line">                 }<span class="keyword">else</span>{</span><br><span class="line">                     target[key] = {};</span><br><span class="line">                 }</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 然后递归</span></span><br><span class="line">                 deepClone(origin[key],target[key]);</span><br><span class="line"></span><br><span class="line">             }<span class="keyword">else</span>{</span><br><span class="line">                 <span class="comment">// 如果是原始值就直接赋值</span></span><br><span class="line">                 target[key] = origin[key];</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> target; <span class="comment">// 把新的target 返回出去</span></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.prototype.num = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> person1 = {</span><br><span class="line">     name:<span class="string">'张三'</span>,</span><br><span class="line">     age: <span class="number">18</span>,</span><br><span class="line">     sex: <span class="string">'male'</span>,</span><br><span class="line">     son:{</span><br><span class="line">         fitst:<span class="string">'Jenney'</span>,</span><br><span class="line">         second:<span class="string">'Lucy'</span>,</span><br><span class="line">         third:<span class="string">'Jone'</span></span><br><span class="line">     },</span><br><span class="line">     car:[<span class="string">'Benz'</span>,<span class="string">'Ferrari'</span>]</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = deepClone(person1);</span><br><span class="line">person2.name = <span class="string">'李四'</span>;</span><br><span class="line">person2.sex = <span class="string">'female'</span>;</span><br><span class="line">person2.son.forth = <span class="string">'Juck'</span>;</span><br><span class="line">person2.car.push(<span class="string">'Mazda'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/c8cf727d/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">实现过程：</span></p><ol><li>使用for循环遍历剔除prototype上的自定义的属性/方法</li><li>在循环里面判断哪个是引用值和原始值并且不能是null</li><li>不是引用值就直接赋值，如果是引用值再使用Object.prototype.toString.call判断是对象或是数组。</li><li>如果是对象则target赋值一个空对象，否则就赋值一个空数组</li><li>然后使用递归 deepClone(origin[key],target[key])</li><li>最后把新的 target 返回出去</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对象拷贝分为浅拷贝和深拷贝也叫做克隆,拷贝对象的时候总会设计到引用值的问题，声明了一个新对象赋值了原来已有的对象,这个时候它们是指向同一个地址的。如果新对象变老对象也会变,老对象变新对象也会跟着变，这就造成了拷贝对象的一个困惑不仅仅是对象数组也是一样的。例如下面的例子:&lt;/
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="https://cokesprit.gitee.io/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>利用原型深度封装typeof方法</title>
    <link href="https://cokesprit.gitee.io/posts/1dce70fc/"/>
    <id>https://cokesprit.gitee.io/posts/1dce70fc/</id>
    <published>2020-08-19T10:02:10.000Z</published>
    <updated>2020-09-06T03:26:29.467Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中有时候我们需要判断属性的具体类型,而系统给的typeof不足以去判断属性的具体类型，我们需要利用原型来对typeof进行深度封装。<br>typeof返回值有：number string boolean object function undefined 以字符串的形式返回。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTypeof</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> type = <span class="keyword">typeof</span>(val); <span class="comment">// 使用typeof判断val的类型</span></span><br><span class="line">    <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="comment">// 存入结果集</span></span><br><span class="line">    <span class="keyword">var</span> res = {</span><br><span class="line">        <span class="string">'[object Array]'</span>:<span class="string">'array'</span>,</span><br><span class="line">        <span class="string">'[object Object]'</span>:<span class="string">'object'</span>,</span><br><span class="line">        <span class="string">'[object Number]'</span>:<span class="string">'object number'</span>,</span><br><span class="line">        <span class="string">'[object String]'</span>:<span class="string">'object string'</span>,</span><br><span class="line">        <span class="string">'[object Boolean]'</span>:<span class="string">'object boolean'</span>,</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(val === <span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'null'</span>;</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'object'</span>){</span><br><span class="line">        <span class="comment">// 返回引用值的具体类型</span></span><br><span class="line">        <span class="keyword">var</span> ret = toStr.call(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res[ret];</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="string">'s'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="literal">true</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof({}));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof([]));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">console</span>.log(myTypeof(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}));</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1dce70fc/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中有时候我们需要判断属性的具体类型,而系统给的typeof不足以去判断属性的具体类型，我们需要利用原型来对typeof进行深度封装。&lt;br&gt;typeof返回值有：number string boolean object function undefined 以字符串的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>烧脑的this指向问题</title>
    <link href="https://cokesprit.gitee.io/posts/2198d04d/"/>
    <id>https://cokesprit.gitee.io/posts/2198d04d/</id>
    <published>2020-08-19T03:11:39.000Z</published>
    <updated>2020-09-27T12:57:02.173Z</updated>
    
    <content type="html"><![CDATA[<p>对于很多的初学者this指向确实是一个让人比较头痛的问题，一般this指向分为几种情况:<br>1.在全局的时候<br>2.普通函数里面<br>3.构造函数的this指向<br>4.apply/call<br>下面我们就来举例说明以上情况的的this指向问题</p><hr><h4 id="在全局的时候"><a href="#在全局的时候" class="headerlink" title="在全局的时候"></a>在全局的时候</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.d); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.d);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>从上面的运行结果可以看出二者输出的结果是相同的这样说明<span class="s_red">全局下的this -&gt; window</span></p><hr><h4 id="预编译函数-普通函数"><a href="#预编译函数-普通函数" class="headerlink" title="预编译函数(普通函数)"></a>预编译函数(普通函数)</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">b</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.d = <span class="number">8</span>; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">test(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.d);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.d);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>查看运行结果发现它们的结果是一样的这就说明,<span class="s_red">在普通函数的内部只要没有实例化这个函数的this是默认指向window的。</span></p><hr><h4 id="构造函数内部"><a href="#构造函数内部" class="headerlink" title="构造函数内部"></a>构造函数内部</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'niming'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 预编译期的过程</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     Test:function test(){...}</span></span><br><span class="line">    <span class="comment">//     test:{}</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     // 前面我们说了普通函数没new之前 this -&gt; window</span></span><br><span class="line">    <span class="comment">//     this: window,</span></span><br><span class="line">    <span class="comment">//          当 new 的时候之前的 this 被覆盖</span></span><br><span class="line">    <span class="comment">//          this:{</span></span><br><span class="line">    <span class="comment">//              name:'123',</span></span><br><span class="line">    <span class="comment">//              __proto__:Test.prototype</span></span><br><span class="line">    <span class="comment">//          } </span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>当预编译的时候 this -&gt; window,当 new 之前GO就已经把保存了 Test:function test(){…} 然后再保存 test:{},但是 new（AO开始） 的时候 Test构造函数内部隐式的 var 了一个</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> = {</span><br><span class="line">    name:<span class="string">'123'</span>,</span><br><span class="line">    \_\_proto\_\_:Test.prototype</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并且覆盖了之前指向window的this,最后系统隐式的把这个新的this返回了出去被全局下的test接收到,从这里我没可以总结出来<span class="s_red">构造函数的this指向实例化对象</span></p><hr><h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call/apply的作用是更改this指向</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// Person使用了apply, 当Programmer实例化之后Personn内部属性变成</span></span><br><span class="line">            <span class="comment">// p.name = "张三";</span></span><br><span class="line">            <span class="comment">// p.age = 18;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params">name,age</span>)</span>{</span><br><span class="line">        Person.apply(<span class="keyword">this</span>,[name,age]);</span><br><span class="line">        <span class="keyword">this</span>.work = <span class="string">'Programming'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Programmer(<span class="string">'张三'</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p)</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/2198d04d/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>因为Person使用了apply把自身构造函数内部的指this指向变成Programmer的实例化对象 p，所以打印p的时候 p 也有Person构造函数的属性。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>全局this -&gt; window<br>预编译函数（普通函数）this -&gt; window<br>构造函数的this指向实例化对象<br>apply/call改变this指向</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于很多的初学者this指向确实是一个让人比较头痛的问题，一般this指向分为几种情况:&lt;br&gt;1.在全局的时候&lt;br&gt;2.普通函数里面&lt;br&gt;3.构造函数的this指向&lt;br&gt;4.apply/call&lt;br&gt;下面我们就来举例说明以上情况的的this指向问题&lt;/p&gt;
&lt;hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>英语语法上</title>
    <link href="https://cokesprit.gitee.io/posts/9416cc31/"/>
    <id>https://cokesprit.gitee.io/posts/9416cc31/</id>
    <published>2020-08-18T13:41:25.000Z</published>
    <updated>2020-09-27T12:52:50.952Z</updated>
    
    <content type="html"><![CDATA[<p>课程设置<br>    #### 一、简单句<br>    #### 二、并列句<br>    #### 三、从句<br>    ##### 名词性从句<br>    ##### 定语和定语从句<br>    ##### 状语和状语从句</p><h4 id="一、简单句"><a href="#一、简单句" class="headerlink" title="一、简单句"></a>一、简单句</h4><h5 id="what-is-简单句？"><a href="#what-is-简单句？" class="headerlink" title="what is 简单句？"></a>what is 简单句？</h5><p>英语的句子必须具备主谓结构,并且主语一定是谓语动作的发出者如果有宾语的话宾语一定是谓语动作的承受者。</p><p><span class="s_green">试译：</span>我的英语说的很好;<br>主：我<br>谓：说<br>宾：英语<br>I speak English every well.</p><!-- 先找到谓语 !!! --><p><span class="s_green">试译：</span>我家住在玉林<br>谓：住<br>主：我<br>I live in Yuli <!-- 英语不一定要字字对应 --></p><p><span class="s_green">试译</span>：我要去剪头<br>主：一个理发师<br>谓：剪<br>宾：我的头发</p><!-- 动作谁发出谁充当主语 --><p>A barber will cut my hair.<br>解析:这句话中我不能充当主语，因为动作的发出者不是我，动作的发出者是理发师所以理发师是主语</p><hr><h5 id="简单句的分类"><a href="#简单句的分类" class="headerlink" title="简单句的分类"></a>简单句的分类</h5><p>1.主谓<br>2.主谓宾<br>3.主谓表<br>4.主谓双宾<br>5.主谓宾宾补</p><h6 id="主谓结构"><a href="#主谓结构" class="headerlink" title="主谓结构"></a>主谓结构</h6><p>He died.    We laugh(ed).</p><h6 id="主谓宾"><a href="#主谓宾" class="headerlink" title="主谓宾"></a>主谓宾</h6><p><span class="s_green">谓语：</span>实意动词</p><h6 id="主系表"><a href="#主系表" class="headerlink" title="主系表"></a>主系表</h6><p><span class="s_green">谓语：</span>系动词<br>1.be<br>2.感官动词：look smell sound taste feel;<br>3.变化: become get<br>4.保持: keep stay remain  </p><p>上面所出现的都是主谓表结构，以外的都是主谓宾结构。</p><h6 id="主谓双宾"><a href="#主谓双宾" class="headerlink" title="主谓双宾"></a>主谓双宾</h6><p>I bought <span class="s_red">him</span> a <span class="s_red">dog</span><br><span calss="s_red">说明：双宾就是两个宾语你是你我是我</span></p><p>主谓双宾和主谓宾宾补的区别就在于：需要在两</p><h6 id="主谓宾宾补"><a href="#主谓宾宾补" class="headerlink" title="主谓宾宾补"></a>主谓宾宾补</h6><p><span calss="s_red">说明：</span>宾补就是后面的那个单词对前面的那个单词的补充说明</p><p><span class="s_yellow">主谓双宾和主谓宾宾补的区别</span>:只需要在两个宾语之间加一个be动词，如果读起来意思是不对的就是主谓双宾，如果读起来意思是对的就是主谓宾宾补。</p><p><span class="s_green">练习:</span><br>We elect him our monitor.<br><span class="s_green">解题：</span>在 him 和 our monitor之间加上be动词 变成 –&gt; We elect him is our monitor. 意思是对的所以是主谓宾宾补</p><h5 id="句子的成分"><a href="#句子的成分" class="headerlink" title="句子的成分"></a>句子的成分</h5><p><span class="s_jacinth">谓语 ***** 很重要!!!!</span></p><p>(1)谓语的成分：有时态的实义动词或系动词充当谓语。</p><p>(2)动词能不能多？<br>谓语只能是动词；动词只能做谓语,所以我们需要把一句话当中,所有不做谓语的动词全部都要<span class="s_red">变成不是动词。怎么把动词变成不是动词呢?<br>①在动词后面加-&gt; ving -&gt; : ving表示主动<br>②在动词后面加-&gt; ved -&gt; : ved被动<br>③在动词前面加-&gt;to do -&gt; : to do 表示目的<br>它们三个有个共同名字:小名叫做<span class="s_red">不是动词</span>,大名叫做<span class="s_red">非</span>谓语动词。</span></p><p><span class="s_green">试译：</span><br>他拍了拍我的肩膀,一句话都没<span class="s_yellow">说</span>就<span class="s_yellow">离开</span>了。<br>He beating my shoulder,saying nothing departed<br><span class="s_red">当一句话有多个动词的时候,谁的意思最重要就选谁做谓语!!!</span></p><p><span class="s_yellow">爱</span>我就<span class="s_yellow">是</span> <span class="s_yellow">抱抱</span>我<br>Loving me is hugging (embracing) me.</p><p>我爱你,你爱我<br>I loveing you,you love me. <span class="s_red">–&gt;</span> 独立主格</p><p><span class="s_green">例子</span>：<br>Beating you is my fault<br>I enjoy watching TV<br>My dream is becomeing a teacher<br>Your mother must be very beautiful;</p><h4 id="二、并列句"><a href="#二、并列句" class="headerlink" title="二、并列句"></a>二、并列句</h4><h4 id="三、从句"><a href="#三、从句" class="headerlink" title="三、从句"></a>三、从句</h4><h5 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h5><h5 id="定语和定语从句"><a href="#定语和定语从句" class="headerlink" title="定语和定语从句"></a>定语和定语从句</h5><h5 id="状语和状语从句"><a href="#状语和状语从句" class="headerlink" title="状语和状语从句"></a>状语和状语从句</h5><!--    听完课之后达到的水平,从此以后写作文不会烦再一个单词的错误,    从今以后写作文不会烦一个语法的错误,一句话想写多长就写多长,    想写多短就写多短。 --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;课程设置&lt;br&gt;    #### 一、简单句&lt;br&gt;    #### 二、并列句&lt;br&gt;    #### 三、从句&lt;br&gt;    ##### 名词性从句&lt;br&gt;    ##### 定语和定语从句&lt;br&gt;    ##### 状语和状语从句&lt;/p&gt;
&lt;h4 id=&quot;一、简单句&quot;
      
    
    </summary>
    
    
    
      <category term="英语" scheme="https://cokesprit.gitee.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Object.prototype.toString</title>
    <link href="https://cokesprit.gitee.io/posts/dc56b3a9/"/>
    <id>https://cokesprit.gitee.io/posts/dc56b3a9/</id>
    <published>2020-08-18T10:10:59.000Z</published>
    <updated>2020-09-06T03:28:06.790Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时都是toString()但打印出来的东西是不一样</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call({<span class="attr">name</span>:<span class="string">'张三'</span>}));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>.prototype.toString.call(<span class="number">1</span>));</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/dc56b3a9/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>判断是否是数组的三种方法</title>
    <link href="https://cokesprit.gitee.io/posts/7a59e1cc/"/>
    <id>https://cokesprit.gitee.io/posts/7a59e1cc/</id>
    <published>2020-08-18T09:13:23.000Z</published>
    <updated>2020-09-27T12:43:37.261Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中后端传过来的数据有可能是 null、对象、Array,有时候我们需要判断传回来是不是数组。</p><hr><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>使用 constructor</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="built_in">console</span>.log(a.constructor); <span class="comment">//ƒ Array() { [native code] }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>使用 instanceof 判断该对象是否是该构造函数构造出来的,是返回ture，否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello word"</span>; </span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><p>使用call和Object原型下的toString方法来进行判断,<span class="s_jacinth">推荐使用这种！！！</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 Object原型下的toString方法赋给 str</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">    a = [];</span><br><span class="line"><span class="keyword">var</span> trueTip = <span class="string">'[object Array]'</span>;</span><br><span class="line"><span class="comment">// 然后利用call指向a</span></span><br><span class="line"><span class="keyword">if</span>(str.call(a) === trueTip){</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'是数组'</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不是数组'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行分析</span></span><br><span class="line">    <span class="comment">// Object.prototype = {</span></span><br><span class="line">    <span class="comment">//     toString:function(){</span></span><br><span class="line">    <span class="comment">//         // 没call 之前</span></span><br><span class="line">    <span class="comment">//             this.toString();</span></span><br><span class="line">    <span class="comment">//         // call 以后更改 this 指向 -&gt; a</span></span><br><span class="line">    <span class="comment">//             a.toString();</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/7a59e1cc/3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中后端传过来的数据有可能是 null、对象、Array,有时候我们需要判断传回来是不是数组。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;第一种&quot;&gt;&lt;a href=&quot;#第一种&quot; class=&quot;headerlink&quot; title=&quot;第一种&quot;&gt;&lt;/a&gt;第一种&lt;/h4&gt;&lt;p&gt;使用 c
      
    
    </summary>
    
    
    
      <category term="js/数组" scheme="https://cokesprit.gitee.io/tags/js-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>企业模块化开发</title>
    <link href="https://cokesprit.gitee.io/posts/adbaaf4/"/>
    <id>https://cokesprit.gitee.io/posts/adbaaf4/</id>
    <published>2020-08-18T08:23:21.000Z</published>
    <updated>2020-09-06T03:26:18.872Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的时候往往需要写很多功能模块,为了更好的协作开发需要采用模块化开发的方式,把这些功能分一个一个的分开来写最后汇总到一个大模块里。</p><hr><h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三步</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">    initCompute();</span><br><span class="line">    initFunctions();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">    <span class="comment">// 功能一</span></span><br><span class="line">initCompute = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>,</span><br><span class="line">        b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a - b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a * b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a / b);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        add();</span><br><span class="line">        minus();</span><br><span class="line">        mul();</span><br><span class="line">        div();</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">    <span class="comment">// 功能二 </span></span><br><span class="line"><span class="keyword">var</span> initFunctions = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>把功能全部封装到各自的自启动函数里面，然后分别赋给initCompute 和 initFunctions，再把他们放到一个总的init里面,最后再放到window.onload里面执行。</p><hr><h4 id="模块化练习"><a href="#模块化练习" class="headerlink" title="模块化练习"></a>模块化练习</h4><p>使用模块化开发的实现两个功能:<br>1.求n的斐波拉契数列<br>2.输入一个数n求有打印那些可以被3获被5获被7获整除的数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把每个模块放到init里面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(initFb(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(initDiv(<span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 斐波拉契数列</span></span><br><span class="line"><span class="keyword">var</span> initFb = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> fb(n<span class="number">-1</span>) + fb(n<span class="number">-2</span>); </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fb;</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 被3或被5或被7或整除</span></span><br><span class="line"><span class="keyword">var</span> initDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= n; i++){</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">5</span> === <span class="number">0</span> || i % <span class="number">7</span> === <span class="number">0</span>){</span><br><span class="line">                arr.push(i);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> div; </span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/adbaaf4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发的时候往往需要写很多功能模块,为了更好的协作开发需要采用模块化开发的方式,把这些功能分一个一个的分开来写最后汇总到一个大模块里。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;模块化开发&quot;&gt;&lt;a href=&quot;#模块化开发&quot; class=&quot;headerlink&quot; title=&quot;模块
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型继承之圣杯模式</title>
    <link href="https://cokesprit.gitee.io/posts/98829262/"/>
    <id>https://cokesprit.gitee.io/posts/98829262/</id>
    <published>2020-08-17T11:27:04.000Z</published>
    <updated>2020-09-06T03:30:11.402Z</updated>
    
    <content type="html"><![CDATA[<p>之前的那几种方案都不太尽人意,在解决继承,有专门的企业即解决方案圣杯模式。</p><hr><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Li'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Teacher.prototype = {</span><br><span class="line">    pSkill: <span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Wang'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓冲区介于 Teacher 和 Student之间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Buffer</span>(<span class="params"></span>)</span>{}</span><br><span class="line">Buffer.prototype = Teacher.prototype;</span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line"><span class="comment">// Buffer 实例化出来之后没有属性和方法,</span></span><br><span class="line"><span class="comment">// 但是它有Teacher.prototype</span></span><br><span class="line"><span class="comment">// 然后把实例化对象buffer赋给Student.prototype</span></span><br><span class="line"></span><br><span class="line">Student.prototype = buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样Student实例化出来的对象就能访问Buffer.prototype</span></span><br><span class="line"><span class="comment">// 也能访问到Teacher.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是圣杯模式完美解决了继承和隔离的问题。</span></span><br><span class="line">Student.prototype.age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/98829262/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="圣杯模式封装"><a href="#圣杯模式封装" class="headerlink" title="圣杯模式封装"></a>圣杯模式封装</h4><p>为了方便使用我们把它封装起来,这样我们需要的时候直接调用就行了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圣杯模式之封装</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Buffer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>{</span><br><span class="line">        Buffer.prototype =  Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> Buffer();</span><br><span class="line">        <span class="comment">// 为了还原构造器,把Target构造器重新指向 Student</span></span><br><span class="line">        Target.prototype.constructor  = Target;</span><br><span class="line">        <span class="comment">// 继承源</span></span><br><span class="line">        Target.prototype.super_class = Origin; </span><br><span class="line">    }</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><p>企业级的解决方案  -&gt; 这是雅虎当年在 YUI3 里面封装的一个方法,虽然 YUI3 已经不在了但是这个方法被留存了下来。</p><hr><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>写一个程序员的构造函数，然后再写各写一个前端程序员和后端程序员的构造函数,并且这两个构造函数继承程序员这个构造函数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 实现继承的方法</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Buffer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{};</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>{</span><br><span class="line">        Buffer.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> Buffer();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.super_class = Origin;</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 采用模块化开发方式</span></span><br><span class="line"><span class="keyword">var</span> initProgrammer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Programmer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把一些很少更改的属性和方法写到原型上</span></span><br><span class="line">    Programmer.prototype = {</span><br><span class="line">        name:<span class="string">'程序员'</span>,</span><br><span class="line">        tool:<span class="string">'计算机'</span>,</span><br><span class="line">        work:<span class="string">'编写应用程序'</span>,</span><br><span class="line">        duration:<span class="string">'10个小时'</span>,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我是一名'</span> + <span class="keyword">this</span>.myName + <span class="keyword">this</span>.name + </span><br><span class="line">            <span class="string">"我的工作用到"</span> + <span class="keyword">this</span>.tool + <span class="keyword">this</span>.work +</span><br><span class="line">             <span class="string">",我每天工作"</span> + <span class="keyword">this</span>.duration + </span><br><span class="line">             <span class="string">" ，我的工作需要用到："</span> + <span class="keyword">this</span>.lang.toString() + <span class="string">"。"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FrondEnd</span>(<span class="params"></span>)</span>{} <span class="comment">// 前端工程师</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BackEnd</span>(<span class="params"></span>)</span>{} <span class="comment">// 后端工程师</span></span><br><span class="line"></span><br><span class="line">    inherit(FrondEnd,Programmer); <span class="comment">// 使用 inherit 实现继承</span></span><br><span class="line">    inherit(BackEnd,Programmer); </span><br><span class="line"></span><br><span class="line">    FrondEnd.prototype.lang = [<span class="string">'HTML'</span>,<span class="string">'CSS'</span>,<span class="string">'JavaScript'</span>];</span><br><span class="line">    FrondEnd.prototype.myName = <span class="string">'前端'</span>;</span><br><span class="line">    </span><br><span class="line">    BackEnd.prototype.lang = [<span class="string">'Node'</span>,<span class="string">'Java'</span>,<span class="string">'SQL'</span>];</span><br><span class="line">    BackEnd.prototype.myName = <span class="string">'后端'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把它们写在一个对象里面返回出去</span></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        FrondEnd:FrondEnd,</span><br><span class="line">        BackEnd:BackEnd</span><br><span class="line">    }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line">    <span class="keyword">var</span> frondEnd = <span class="keyword">new</span> initProgrammer.FrondEnd();</span><br><span class="line">    <span class="keyword">var</span> backEnd = <span class="keyword">new</span> initProgrammer.BackEnd();</span><br><span class="line">    frondEnd.say();</span><br><span class="line">    backEnd.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/98829262/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的那几种方案都不太尽人意,在解决继承,有专门的企业即解决方案圣杯模式。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;圣杯模式&quot;&gt;&lt;a href=&quot;#圣杯模式&quot; class=&quot;headerlink&quot; title=&quot;圣杯模式&quot;&gt;&lt;/a&gt;圣杯模式&lt;/h4&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>公共原型继承</title>
    <link href="https://cokesprit.gitee.io/posts/8f490e5b/"/>
    <id>https://cokesprit.gitee.io/posts/8f490e5b/</id>
    <published>2020-08-17T10:15:36.000Z</published>
    <updated>2020-09-06T03:27:25.019Z</updated>
    
    <content type="html"><![CDATA[<p>使用call/apply这种方法也不尽人意,我在想我这样写行不行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name =<span class="string">'Mr. Li'</span>;</span><br><span class="line">    <span class="keyword">this</span>.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Teacher.prototype = {</span><br><span class="line">    pSkill:<span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Mr. Wang'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> Student.prototype = Teacher.prototype; </span><br><span class="line"> Student.prototype.age = <span class="number">18</span>;</span><br><span class="line"> <span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(s);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8f490e5b/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">把 Teacher 的原型赋给 Student 的原型，这样的话 Stduent 下的属性也可以拥有而且还可以拥有 Teacher 原型的下属性,并且没有继承Teahcer下的一些属性我们不需要的属性。</p><p>问题：这种方式也有一点不好的就是如果向 Student.prototype 增加属性和方法的时候也会添加的 Teacher.prototype 里面。因为它们两个指向同一个地址。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用call/apply这种方法也不尽人意,我在想我这样写行不行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>借助call或apply实现继承</title>
    <link href="https://cokesprit.gitee.io/posts/18be6742/"/>
    <id>https://cokesprit.gitee.io/posts/18be6742/</id>
    <published>2020-08-17T09:50:13.000Z</published>
    <updated>2020-09-06T03:26:53.488Z</updated>
    
    <content type="html"><![CDATA[<p>上篇使用原型链的方式来继承并不是很科学,像老鼠的名字就没有必要继承。这次我们使用call/apply实现继承。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call/apply</span></span><br><span class="line">Teacher.prototype.wife = <span class="string">'Ms. Min'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.mSkill = mSkill;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,mSkill,age,major</span>)</span>{</span><br><span class="line">    Teacher.apply(<span class="keyword">this</span>,[name,mSkill]);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.major = major;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Mr. Li'</span>,<span class="string">'JS/JQ/'</span>,<span class="number">18</span>,<span class="string">'Computer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br><span class="line"><span class="built_in">console</span>.log(student.wife); <span class="comment">// 访问不到Teacher.prototype下的属性</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/18be6742/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>问题：这种方式不太像继承,叫借用更加贴切,而且这种方式访问不到Teacher.prototype,这种方式也不太理想。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇使用原型链的方式来继承并不是很科学,像老鼠的名字就没有必要继承。这次我们使用call/apply实现继承。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型链继承</title>
    <link href="https://cokesprit.gitee.io/posts/31601a23/"/>
    <id>https://cokesprit.gitee.io/posts/31601a23/</id>
    <published>2020-08-17T09:05:42.000Z</published>
    <updated>2020-09-06T03:29:21.495Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    Professor.prototype = {</span><br><span class="line">        name:<span class="string">'Mr. Li'</span>,</span><br><span class="line">        tSkill:<span class="string">'JAVA'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Professor</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> professor = <span class="keyword">new</span> Professor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------分割线-----------------</span></span><br><span class="line">    <span class="comment">// 把professor实例对象赋给 Teacher.prototype </span></span><br><span class="line">    Teacher.prototype = professor;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Mr. Mi'</span>;</span><br><span class="line">        <span class="keyword">this</span>.mSkill = <span class="string">'JS/Jq'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------分割线-----------------</span></span><br><span class="line">    <span class="comment">// 把 teacher实例对象赋给Student.prototype</span></span><br><span class="line">    Student.prototype = teacher; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Mr. Xiao'</span>;</span><br><span class="line">        <span class="keyword">this</span>.pSkill = <span class="string">'HTML/CSS'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="built_in">console</span>.log(student);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/31601a23/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">student 现在这个对象继承了 Teacher 上所有属性和 Teacher 原型上的属性,也继承了 Professor 原型上的属性。</p>总结：最下面的对象继承了上面原型链上的所有属性，这就是原型链继承。<p>问题：学生身上是否需要继承Teacher 和 Professor 上所有的属性或者原型上的属性?不需要,所以继承方案还不是特别理想。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>插件化编程开发初探</title>
    <link href="https://cokesprit.gitee.io/posts/e0979614/"/>
    <id>https://cokesprit.gitee.io/posts/e0979614/</id>
    <published>2020-08-15T08:35:01.000Z</published>
    <updated>2020-08-15T08:48:19.721Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS插件的写法"><a href="#JS插件的写法" class="headerlink" title="JS插件的写法"></a>JS插件的写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS 插件的写法</span></span><br><span class="line">    <span class="comment">// 立即执行函数 -&gt; 防止变量污染 -&gt; 为了隔离全局作用域</span></span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开发中方法基本上都是写在原型上的</span></span><br><span class="line">        <span class="comment">// 很少更改的东西也可以写到原型上</span></span><br><span class="line">        Test.prototype = {</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.Test = Test; <span class="comment">// 挂到window上</span></span><br><span class="line">    })();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> test = <span class="keyword">new</span> Test();</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传两个数字实现加减乘除的插件</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> Compute = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Compute.prototype = {</span><br><span class="line">        plus:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        },</span><br><span class="line">        minus:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        },</span><br><span class="line">        mul:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        },</span><br><span class="line">        div:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> a / b;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Comput = Compute;</span><br><span class="line">    </span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comput = <span class="keyword">new</span> Comput();</span><br><span class="line"><span class="keyword">var</span> res = comput.div(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS插件的写法&quot;&gt;&lt;a href=&quot;#JS插件的写法&quot; class=&quot;headerlink&quot; title=&quot;JS插件的写法&quot;&gt;&lt;/a&gt;JS插件的写法&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Object.create</title>
    <link href="https://cokesprit.gitee.io/posts/3837d091/"/>
    <id>https://cokesprit.gitee.io/posts/3837d091/</id>
    <published>2020-08-15T07:25:21.000Z</published>
    <updated>2020-09-27T11:42:16.368Z</updated>
    
    <content type="html"><![CDATA[<p>Obcet.create():创建对象,提供一个自定义原型的功能,参数是对象或者null。</p><hr><h4 id="参数是null时"><a href="#参数是null时" class="headerlink" title="参数是null时"></a>参数是null时</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = Objcet.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// {}</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3837d091/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结:Object.create(null);创建的对象是没有原型的。</p><hr><h4 id="参数是对象时"><a href="#参数是对象时" class="headerlink" title="参数是对象时"></a>参数是对象时</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = {</span><br><span class="line">    num:<span class="number">2</span>,</span><br><span class="line">    say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'今天天气真好'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>)</span>{}</span><br><span class="line"></span><br><span class="line">Obj.prototype.num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Obj();</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Object.create自定义原型</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(test); </span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line">obj2.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3837d091/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结：Object.create 可以把其他的对象作为原型,形成一个祖先与后代的关系。使用Object.create()实现继承会更优雅一些。</p><hr><h4 id="面试-笔试"><a href="#面试-笔试" class="headerlink" title="面试/笔试"></a>面试/笔试</h4><p>不是所有的对象都继承于Object.prototype<br><span class="s_jacinth">Object.create(null)</span>创建出来的对象没有原型所以<span class="s_jacinth">不继承于</span>Object.prototype</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Obcet.create():创建对象,提供一个自定义原型的功能,参数是对象或者null。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;参数是null时&quot;&gt;&lt;a href=&quot;#参数是null时&quot; class=&quot;headerlink&quot; title=&quot;参数是null时&quot;&gt;&lt;/a&gt;参数是n
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="https://cokesprit.gitee.io/posts/bf8cf30/"/>
    <id>https://cokesprit.gitee.io/posts/bf8cf30/</id>
    <published>2020-08-14T09:15:54.000Z</published>
    <updated>2020-09-27T08:06:52.667Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><span class="s_jacinth">原型链</span>：沿着__proto__一层一层的去继承原型的属性所形成的链条,我们叫做原型链。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Professor.prototype.tSkill = <span class="string">'JAVA'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Professor</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> professor = <span class="keyword">new</span> Professor();</span><br><span class="line"></span><br><span class="line">Teacher.prototype = professor;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.mSkill = <span class="string">'JS/JQ'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">Student.prototype = teacher;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.pSkill = <span class="string">'HTML/CSS'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/bf8cf30/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我没有的属性我到我的原型上找,如果没有就一直往上找,这样就形成了一条链条。</p><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>所有的对象都有原型,包括原型的本身<br>原型的顶端是<span class="s_green">Object.prototype</span>!!!<br>原型链上面的增删改只能是它自己本身!!!<br>原型的原型是由系统自带的Object构造出来的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h4&gt;&lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;原型链&lt;/span&gt;：沿着__proto__一层一层的去继承原型的属性所形成的链条,
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>原型</title>
    <link href="https://cokesprit.gitee.io/posts/263f3be4/"/>
    <id>https://cokesprit.gitee.io/posts/263f3be4/</id>
    <published>2020-08-14T01:49:21.000Z</published>
    <updated>2020-09-27T07:51:28.042Z</updated>
    
    <content type="html"><![CDATA[<p>原型涉及到构造函数和实例化对象,原型是在构造函数之上的,它也是构造函数的一个属性。</p><h4 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a>prototype和__proto__</h4><p><span class="s_jacinth">prototype</span>：构造函数上的一个属性,只不过这个属性是一个对象而已</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Handphone.prototype.rom = <span class="string">'64'</span>;</span><br><span class="line">Handphone.prototype.ram = <span class="string">'6G'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hp1 = <span class="keyword">new</span> Handphone(<span class="string">'黑色'</span>,<span class="string">'小米'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Handphone.prototype); <span class="comment">// 打印出来是一个对象</span></span><br><span class="line"><span class="comment">// 原型prototype其实是function对象的一个属性</span></span><br><span class="line"><span class="comment">// 这个prototype是构造函数构造出来的每一个对象的公共祖先</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hp1.rom); <span class="comment">// 64</span></span><br><span class="line"><span class="comment">// 所有被构造函数构造出来的对象都可以继承原型上的属性和方法</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><span class="s_jacinth">constructor</span></h5><p>prototype的一个属性,指向构造函数本身</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand,system</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(Handphone.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>既然 <span class="s_green">constructor</span> 指向的构造函数本身那我们来尝试一下让它指向其他的构造函数看可不可以</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Handphone</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Telephone</span>(<span class="params">color,brand,system</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.brand = brnad;</span><br><span class="line">    <span class="keyword">this</span>.system = system;</span><br><span class="line">}</span><br><span class="line">Handphone.prototype = {</span><br><span class="line">    <span class="comment">// 让constructor指向另一个构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>:Telephone</span><br><span class="line">}</span><br><span class="line">console.log(Handphone.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果: constructor可以指向其他构造函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h4><p><span class="s_jacinth">__proto__</span>: 每一个实例化对象的原型容器,它就是装prototype的</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Car.prototype = {</span><br><span class="line">    color:<span class="string">'白色'</span>,</span><br><span class="line">    brand:<span class="string">'benz'</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 当构造函数实例化的时候</span></span><br><span class="line">        <span class="comment">// 隐式的进行</span></span><br><span class="line">        <span class="comment">// var this = {</span></span><br><span class="line">        <span class="comment">//     __proto__: Car.prototype = {</span></span><br><span class="line">        <span class="comment">//         color:'白色',</span></span><br><span class="line">        <span class="comment">//         brand:'benz'</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="built_in">console</span>.log(car.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(Car.prototype);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/263f3be4/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>1.通过实例化对象更改自己的祖先是不行的<br>2.所有被该构造函数构造出的对象都可以继承原型上的属性和方法<br>3.prototype里面的constructor可以修改<br>4.constructor 保存的是实例化之前的东西</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型涉及到构造函数和实例化对象,原型是在构造函数之上的,它也是构造函数的一个属性。&lt;/p&gt;
&lt;h4 id=&quot;prototype和-proto&quot;&gt;&lt;a href=&quot;#prototype和-proto&quot; class=&quot;headerlink&quot; title=&quot;prototype和_
      
    
    </summary>
    
    
    
      <category term="js原型/原型链" scheme="https://cokesprit.gitee.io/tags/js%E5%8E%9F%E5%9E%8B-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>instanceof</title>
    <link href="https://cokesprit.gitee.io/posts/instanceof/"/>
    <id>https://cokesprit.gitee.io/posts/instanceof/</id>
    <published>2020-08-11T09:12:18.000Z</published>
    <updated>2020-09-27T07:42:57.381Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_jacinth">instanceof</span>判断该对象是否是该构造函数构造出来的,是返回true不是返回false。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{}</span><br><span class="line"> <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>{}</span><br><span class="line"> <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Car); <span class="comment">// false</span></span><br><span class="line"> <span class="built_in">console</span>.log(car <span class="keyword">instanceof</span> Car); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(car <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> Aarry); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">     <span class="built_in">console</span>.log({} <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">      <span class="built_in">console</span>.log({} <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p>总结：A对象的原型到底有没有B的原型,有的话就是 true,没有就是false。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;instanceof&lt;/span&gt;判断该对象是否是该构造函数构造出来的,是返回true不是返回false。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="https://cokesprit.gitee.io/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>in</title>
    <link href="https://cokesprit.gitee.io/posts/5fec8e4e/"/>
    <id>https://cokesprit.gitee.io/posts/5fec8e4e/</id>
    <published>2020-08-11T08:58:35.000Z</published>
    <updated>2020-08-11T09:25:31.396Z</updated>
    
    <content type="html"><![CDATA[<p><makr>in</makr> 判断属性是否存在对象里。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Benz'</span>,</span><br><span class="line">    color:<span class="string">'white'</span></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// car对象不存在 displacement</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'displacement'</span> <span class="keyword">in</span>  car); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><hr><p>in 不排除原型上自定义的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Benz'</span>,</span><br><span class="line">    color:<span class="string">'white'</span></span><br><span class="line">}</span><br><span class="line">Car.prototype = {</span><br><span class="line">    displacement: <span class="string">'3.5'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'displacement'</span> <span class="keyword">in</span> car); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;makr&gt;in&lt;/makr&gt; 判断属性是否存在对象里。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hasOwnProperty</title>
    <link href="https://cokesprit.gitee.io/posts/hasOwnProperty/"/>
    <id>https://cokesprit.gitee.io/posts/hasOwnProperty/</id>
    <published>2020-08-11T02:02:08.000Z</published>
    <updated>2020-09-27T05:02:37.956Z</updated>
    
    <content type="html"><![CDATA[<p><span class="s_jacinth">hasOwnProperty()</span>如果对象具有指定名称的属性，则返回turn否则返回false</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = <span class="string">'farrari'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'red'</span>;</span><br><span class="line">    <span class="keyword">this</span>.displacement = <span class="string">'6.0'</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> Car.prototype = {</span><br><span class="line">     lang:<span class="number">5</span>,</span><br><span class="line">     width:<span class="number">2.5</span></span><br><span class="line"> }</span><br><span class="line"> <span class="built_in">Object</span>.prototype.name = <span class="string">'Object'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'第一次打印'</span>)</span><br><span class="line"> <span class="comment">// 连Car.prototype 和 Object.prototype 上自定义的属性都打印出来了 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line">     <span class="built_in">console</span>.log(key + <span class="string">' : '</span>+car[key]);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'使用了hasOwnProperty()方法之后'</span>)</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line">        <span class="keyword">if</span>(car.hasOwnProperty(key)){ </span><br><span class="line">             <span class="built_in">console</span>.log(car[key]);</span><br><span class="line">        }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/hasOwnProperty/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>总结：hasOwnproperty()主要用来找对象自身的属性,排除原型上自定义的属性</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span class=&quot;s_jacinth&quot;&gt;hasOwnProperty()&lt;/span&gt;如果对象具有指定名称的属性，则返回turn否则返回false&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="https://cokesprit.gitee.io/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>对象枚举</title>
    <link href="https://cokesprit.gitee.io/posts/1313d393/"/>
    <id>https://cokesprit.gitee.io/posts/1313d393/</id>
    <published>2020-08-11T01:39:31.000Z</published>
    <updated>2020-09-06T03:27:36.454Z</updated>
    
    <content type="html"><![CDATA[<p>其实JavaScript并没有真正意义上的枚举,在 JavaScript 中有遍历就是有枚举。</p><hr><p>对象的遍历使用 for…in</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 for...in </span></span><br><span class="line"><span class="keyword">var</span> car = {</span><br><span class="line">    brand:<span class="string">'Ferrari'</span>,</span><br><span class="line">    color:<span class="string">'red'</span>,</span><br><span class="line">    displacement:<span class="string">'6.0'</span>,</span><br><span class="line">    lang:<span class="string">'5.5'</span>,</span><br><span class="line">    width:<span class="string">'2.5'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car){</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  重点！！！</span></span><br><span class="line">    <span class="comment">// console.log(car.key);  // 为什么打印 undefined？</span></span><br><span class="line">    <span class="comment">// 因为 js 处理的时候是：car.key -&gt; car['key'] -&gt; undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">' : '</span> + car[key]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1313d393/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>数组是特殊的对象它也可以使用for…in来遍历</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr){</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/1313d393/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实JavaScript并没有真正意义上的枚举,在 JavaScript 中有遍历就是有枚举。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对象的遍历使用 for…in&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="https://cokesprit.gitee.io/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>包装类</title>
    <link href="https://cokesprit.gitee.io/posts/52c58cb2/"/>
    <id>https://cokesprit.gitee.io/posts/52c58cb2/</id>
    <published>2020-08-10T00:40:22.000Z</published>
    <updated>2020-09-06T03:27:50.427Z</updated>
    
    <content type="html"><![CDATA[<p>原始值没有自己的方法和属性！！！<br>原始类型：Number、String、Boolean、Undefined、Null<br>引用类型：Object、Function、Aarry、Date、RegExp</p><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a.len = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//a.len的时候系统转化成 ↓ </span></span><br><span class="line">    <span class="comment">// new Number(1).len = 3; new 前面没有东西接收,</span></span><br><span class="line">    <span class="comment">// 只能 delete 掉,所有打印 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a.len); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候我们就用到了包装类 </span></span><br><span class="line"><span class="comment">// 变成实例化数字对象就可以有自己的属性和方法了</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</span><br><span class="line">aa.len = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.len); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经过 new Number 包装了之后再参与运算又会返回原始值</span></span><br><span class="line"><span class="keyword">var</span> d = aa + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 像这种经过包装了之后再返回原始值的有三种</span></span><br><span class="line">    <span class="comment">// new Number   new String    new Boolean</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/52c58cb2/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>上面我们说了原始值是没有方法和属性的那下面这个又是怎么回事呢？</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这又是怎么回事呢？</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统帮我做了如下的包装 ↓</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">String</span>(str).length; </span><br><span class="line">    <span class="comment">// String 是有length这个属性的,所以可以通过这样的包装来访问到String里面独有的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其实系统打印的是</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">String</span>(str).length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 面试如果别人问你字符串有没有 length 属性？</span></span><br><span class="line">    <span class="comment">//记住字符串没有 length 属性 中间是经过了一层包装类</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/52c58cb2/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原始值没有自己的方法和属性！！！&lt;br&gt;原始类型：Number、String、Boolean、Undefined、Null&lt;br&gt;引用类型：Object、Function、Aarry、Date、RegExp&lt;/p&gt;
&lt;h4 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; c
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="https://cokesprit.gitee.io/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>构造函数实例化的原理</title>
    <link href="https://cokesprit.gitee.io/posts/constructor/"/>
    <id>https://cokesprit.gitee.io/posts/constructor/</id>
    <published>2020-08-06T03:10:47.000Z</published>
    <updated>2020-09-26T09:30:30.860Z</updated>
    
    <content type="html"><![CDATA[<p>下面是构造函数实现实例化的原理,涉及到预编译、AO、GO、对象等知识</p><h4 id="构造函数实例化的原理"><a href="#构造函数实例化的原理" class="headerlink" title="构造函数实例化的原理"></a>构造函数实例化的原理</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">        <span class="comment">// 第一步：系统会保存一个空的this对象 </span></span><br><span class="line">            <span class="comment">// this = {}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：系统将属性和方法写到 this 对象里面</span></span><br><span class="line">            <span class="comment">// this = {</span></span><br><span class="line">            <span class="comment">//     color:color,</span></span><br><span class="line">            <span class="comment">//     brand:brand</span></span><br><span class="line">            <span class="comment">// }   和下面的一样</span></span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三步：系统隐式的在后面加了 return this; 这一步很重要！！！</span></span><br><span class="line">            <span class="comment">// return this;</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// new 负责把this造出来和把原本指向window的this,转向实例化的对象</span></span><br><span class="line">    <span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">'黑色'</span>,<span class="string">'兰博基尼'</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(car1.color,car1.brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// GO 和 AO</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     Car:(function),</span></span><br><span class="line">    <span class="comment">//     car1:{        </span></span><br><span class="line">    <span class="comment">//         color:'黑色',</span></span><br><span class="line">    <span class="comment">//         brand:'兰博基尼'</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AO = { </span></span><br><span class="line">    <span class="comment">//     this:{</span></span><br><span class="line">    <span class="comment">//         color:color,</span></span><br><span class="line">    <span class="comment">//         brand:brand</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>图一</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="自己实现构造函数的功能"><a href="#自己实现构造函数的功能" class="headerlink" title="自己实现构造函数的功能"></a>自己实现构造函数的功能</h4><p>既然我们知道 new 仅仅是帮我们把 this 造出来和改变this的指向,那我们是不是可以不用 new 和 不使用 this 实现构造函数的功能?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照上面实例化的原理步骤我们来尝试一下是否可行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line">    <span class="comment">// 第一步保存一个空对象 obj</span></span><br><span class="line">    <span class="keyword">var</span> obj = {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步将属性和方法写到 obj 对象里面</span></span><br><span class="line">    obj.color = color;</span><br><span class="line">    obj.brand = brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步  return obj</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = Car(<span class="string">'红色'</span>,<span class="string">'法拉利'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.color,car.brand);</span><br></pre></td></tr></tbody></table></figure><p>图二</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从图一和图二看出它们两者并没有什么不同,我们是可以自己实现构造函数实例化的功能的。</p><hr><h4 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h4><p>如果我们在最后return 的时候改变为其他值呢?最后的结果会发生什么变化?</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,brand</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 逐一尝试 return 不同的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line"> <span class="comment">//    return 123;</span></span><br><span class="line"> <span class="comment">//    return {};</span></span><br><span class="line"> <span class="comment">//    return function(){}</span></span><br><span class="line"> <span class="comment">//    return []</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'白色'</span>,<span class="string">'宝马'</span>);</span><br><span class="line"><span class="built_in">console</span>.log()</span><br></pre></td></tr></tbody></table></figure><p>图三</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图四</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/constructor/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">总结:</span>构造函数 return 出来原本是隐式的this,如果我们故意 return 了引用值那么它就是引用值,原始值的话this指向是不受影响的还是this。</p><p> <span class="s_jacinth">引用值:</span>Object、Function、Array、Date、RegExp</p><p><span class="s_jacinth">原始值:</span> Undefined、Null、Boolean、Number 和 String</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面是构造函数实现实例化的原理,涉及到预编译、AO、GO、对象等知识&lt;/p&gt;
&lt;h4 id=&quot;构造函数实例化的原理&quot;&gt;&lt;a href=&quot;#构造函数实例化的原理&quot; class=&quot;headerlink&quot; title=&quot;构造函数实例化的原理&quot;&gt;&lt;/a&gt;构造函数实例化的原理&lt;/h4
      
    
    </summary>
    
    
    
      <category term="js对象" scheme="https://cokesprit.gitee.io/tags/js%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>window.xxx=xxx 与 return xxx的区别</title>
    <link href="https://cokesprit.gitee.io/posts/8b19ee89/"/>
    <id>https://cokesprit.gitee.io/posts/8b19ee89/</id>
    <published>2020-08-05T02:40:50.000Z</published>
    <updated>2020-09-26T08:54:51.295Z</updated>
    
    <content type="html"><![CDATA[<p>区别:</p><ol><li>使用 return 出去后需要把执行函数赋值给一个全局变量,然后再执行这个全局变量的函数</li><li>使用 window 直接将函数保存到GO。既把函数保存到 window 上的一个变量,然后再执行 window 上变量所对应的函数。 </li></ol><hr><p>下面来举例说明</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 使用return xxx</span></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">         a++;</span><br><span class="line">         <span class="built_in">console</span>.log(a);</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> add;  <span class="comment">// 把内部的add函数返回给全局变量add</span></span><br><span class="line">})();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8b19ee89/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用window.xxx = xxx</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>{</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">window</span>.add = add; <span class="comment">// 把内部的add函数保存到window.add上</span></span><br><span class="line">})();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/8b19ee89/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从上面的例子可以看出window.xxx = xxx 和 return xxx 二者是结果是一样,使用<span class="s_yellow">window.xxx = xxx 也是可以形成闭包</span>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区别:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 return 出去后需要把执行函数赋值给一个全局变量,然后再执行这个全局变量的函数&lt;/li&gt;
&lt;li&gt;使用 window 直接将函数保存到GO。既把函数保存到 window 上的一个变量,然后再执行 window 上变量所对应的函数。
      
    
    </summary>
    
    
    
      <category term="闭包" scheme="https://cokesprit.gitee.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>闭包基础</title>
    <link href="https://cokesprit.gitee.io/posts/3d615767/"/>
    <id>https://cokesprit.gitee.io/posts/3d615767/</id>
    <published>2020-08-04T02:30:39.000Z</published>
    <updated>2020-09-26T08:09:44.109Z</updated>
    
    <content type="html"><![CDATA[<p>闭包的定义：当内部函数被返回到外部并保存时,就一定会形成闭包。</p><hr><p>闭包的优点:</p><ol><li>避免全全局变量的污染;</li><li>私有成员的存在;</li><li>希望一个变量长期存储在内存中。</li></ol><hr><p>闭包的缺点:</p><ol><li>闭包会产生原来的作用域链不释放。</li><li>过渡的闭包<span class="s_jacinth">可能</span>会导致内存泄漏或加载过慢,因为它常驻内存。</li></ol><hr><p>闭包的用途:可以用来做数据缓存。</p><hr><p>闭包的三个特性:</p><ol><li>函数嵌套函数。</li><li>函数内部可以引用外部的参数和变量。</li><li>参数和变量不会被垃圾回收机制回收。</li></ol><hr><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> test2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> test3 = test1();</span><br><span class="line"></span><br><span class="line">test3(); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 这就是一个简单闭包</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><span class="s_green">面包管理器</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">breadMgr</span>(<span class="params">num</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> breadNum = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params"></span>)</span>{</span><br><span class="line">        breadNum += <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(breadNum);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sale</span>(<span class="params"></span>)</span>{</span><br><span class="line">        breadNum--;</span><br><span class="line">        <span class="built_in">console</span>.log(breadNum);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [supply,sale];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> breadMgr = breadMgr(<span class="number">60</span>);</span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">1</span>](); <span class="comment">// 售出</span></span><br><span class="line">breadMgr[<span class="number">0</span>](); <span class="comment">// 补给</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3d615767/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_green">星期天计划管理器</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sunSched</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> sunSched = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> operation = {</span><br><span class="line">        setSched: <span class="function"><span class="keyword">function</span>(<span class="params">thing</span>)</span>{</span><br><span class="line">            sunSched = thing;</span><br><span class="line">        },</span><br><span class="line">        showSched: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"My schedule on sunday is "</span> + sunSched);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> operation; <span class="comment">// 把对象返回出去</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> sunSched = sunSched(); <span class="comment">//执行返回 operation</span></span><br><span class="line"></span><br><span class="line">sunSched.setSched(<span class="string">'studying'</span>);</span><br><span class="line">sunSched.showSched();</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/3d615767/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闭包的定义：当内部函数被返回到外部并保存时,就一定会形成闭包。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;闭包的优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免全全局变量的污染;&lt;/li&gt;
&lt;li&gt;私有成员的存在;&lt;/li&gt;
&lt;li&gt;希望一个变量长期存储在内存中。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="闭包" scheme="https://cokesprit.gitee.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>作用域与作用域链图解</title>
    <link href="https://cokesprit.gitee.io/posts/ab6a816/"/>
    <id>https://cokesprit.gitee.io/posts/ab6a816/</id>
    <published>2020-08-03T01:42:56.000Z</published>
    <updated>2020-09-26T08:02:16.827Z</updated>
    
    <content type="html"><![CDATA[<p>作用域与作用域链</p><h4 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    b();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">a();</span><br></pre></td></tr></tbody></table></figure><h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><p><span class="s_jacinth">当a函数被定义时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当a函数被执行时(前一刻)</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当b函数被定义时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当b函数被执行时(前一刻)</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当b函数被执行结束后</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">回归b函数被定义时的状态</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当a函数被执行结束时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">回归a函数被定义时的状态</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_red">以上这就是作用域和作用域链的最基本的一个形态</span></p><hr><h4 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h4><p>这个例子比较特殊涉及到闭包,有关闭包的在下一篇更新。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> test2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> test3 = test1();</span><br><span class="line">test3();</span><br></pre></td></tr></tbody></table></figure><p><span class="s_jacinth">当test1函数被定义时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/9.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当test1函数被执行时(前一刻),函数test2被定义</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/10.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p><span class="s_jacinth">当test1函数被执行结束时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/11.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时test1的AO并没有被销毁只是把线剪断了,test1的AO本该是要被销毁的,但test2已经被返回到外部且死死的抓住test1的AO不放,所有test1的AO不能销毁。<br>注意这里是重头戏,这时候就形成了闭包了！！！</p><hr><p><span class="s_jacinth">test3执行</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/12.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">test3执行结束时</span></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab6a816/13.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时的 test3 === test2。<br>a是在test1的AO里面的,为什么可以打印出来a? 就像之前讲的test2还死死的攥着test1的AO,当在自己的AO上没有查找到,则去test1的AO查找,实际操作的仍然是test1的AO。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ol><li>每个函数在定义的时候就已经保存了全局上下文GO。</li><li>函数自己的AO产生了,就会把自己AO排在作用域链的最顶端,其他AO和全局GO就会被挤下去。</li><li>函数被定义的时候它拿的是它上一级的作用域链。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用域与作用域链&lt;/p&gt;
&lt;h4 id=&quot;栗子一&quot;&gt;&lt;a href=&quot;#栗子一&quot; class=&quot;headerlink&quot; title=&quot;栗子一&quot;&gt;&lt;/a&gt;栗子一&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="https://cokesprit.gitee.io/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>作用域之对象的隐式属性[[scope]]</title>
    <link href="https://cokesprit.gitee.io/posts/scope/"/>
    <id>https://cokesprit.gitee.io/posts/scope/</id>
    <published>2020-08-02T13:13:15.000Z</published>
    <updated>2020-08-31T01:50:30.461Z</updated>
    
    <content type="html"><![CDATA[<p>[[scope]] -&gt; 作用域，它是函数创建时，生成的一个JS内部的隐式属性，这个属性只能由JS引擎来读取的。</p><h3 id="scope"><a href="#scope" class="headerlink" title="[[scope]]"></a>[[scope]]</h3><ol><li>[[scope]]它是函数创建时,生成的一个JS内部的隐式属性。</li><li>[[scope]]它是存储函数作用域链的 <span class="s_red">容器</span>,作用域链<span class="s_red">存储的是AO/GO</span>。<br><span class="s_green"> GO:全局执行期上下文</span><br><span class="s_green">AO：函数执行期上下文</span>，当函数执行完成以后，AO是要销毁的,如果再次执行这个函数的时候AO会重新生成而且这个AO是新的AO。也就是说每一次执行会生成一个新的AO，原来老的AO在函数执行完以后它就会被销毁，也就是说AO是一个即时的存储容器;它不是长期保存的，它是根据函数的执行周期来保存。<br><span class="s_green">而作用域链其实就是把这些AO/GO形成链式从上到下排列起来,形成一个链式关系,这个链式关系其实就是作用域链。</span></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[[scope]] -&amp;gt; 作用域，它是函数创建时，生成的一个JS内部的隐式属性，这个属性只能由JS引擎来读取的。&lt;/p&gt;
&lt;h3 id=&quot;scope&quot;&gt;&lt;a href=&quot;#scope&quot; class=&quot;headerlink&quot; title=&quot;[[scope]]&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="https://cokesprit.gitee.io/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>搬砖日记</title>
    <link href="https://cokesprit.gitee.io/posts/tote-bricks/"/>
    <id>https://cokesprit.gitee.io/posts/tote-bricks/</id>
    <published>2020-07-27T04:54:14.000Z</published>
    <updated>2020-09-06T03:27:55.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>为什么选择去工地搬砖,而不是去广东进厂?<br>1.我大伯接了一个工程,挺赶的,人手不够。<br>2.去广东的话车费来回要六百块,不划算。<br>3.进厂一天十二个小时感觉有点吃不消,且一天没有多少学习时间。</p><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><p class="txt-indent">2020-07-27-14:00整就被家里人叫去工地帮忙。到哪要干的事很简单,只需要把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。晚上七点钟下班感觉身体有点吃不消,手脚都有点酸;可能是太久没干重体力活的原因,想想过几天适应了可能就好受点。晚上十点钟时就有一股深深的困意袭来,虽然很困,但还是把今天的任务完成。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/bd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p class="txt-indent">2020-07-28早上六点四十分起来时感觉全身酸痛,手还有点发抖。今天要上一整天的班,上班时间为上午7:00 - 12:00,下午14:00 - 19:00一共十个小时;相比于进厂的话要好一点,晚上还能有一些时间留给自己。</p><p class="txt-indent">    今天还是重复昨天的工作把砖,水泥、碎石杂、沙子放到斗车里,然后拉到吊机下面给吊机吊上楼顶。对我来说沙子是最难弄的,要把沙子铲到斗车里面去。沙子有点湿再加上我左手腕有暗伤,打篮球的时候伤的时间有两个月了,我以为好了;谁知道当把沙子铲到铲里提起来时,左手直接软了提不起来,没办法只能一点点的铲了。晚上洗完澡躺倒床上,有点那种倒头就睡的冲动,今天要比昨天累很多。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shoudou.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h4><p class="txt-indent">2020-07-29今天是我搬砖的第三天,天空很蓝,云朵很大,风很舒服,太阳很晒。今天的砖头比昨天格外的烫手,对面超市的冰镇可乐,依然是我不敢奢求的梦想,微分吹过我的脸庞,我很迷茫。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/fupo.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h4><p class="txt-indent">2020-07-30中午下来一场雨,浸透了燥热的天空。让着原本燥热不堪看的气温竟夹带着一丝凉意,深深的呼吸新鲜空气,带着淡淡泥土的芬芳;让我这疲惫的身躯,重新焕发了一丝活力。下午的时候吊机出了一点问题,吊不起太多东西了,这使得我的工作轻松了许多,但无聊的时候,也是时间最漫长的时候,在这短暂而又漫长的时间里我会想着我昨天的代码和我的未来该何去何从~~~~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/csone.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/cs.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h4><p class="txt-indent">2020-07-31做了几天身体也渐渐适应了工作强度,手脚也不酸痛了。说说这几天的改变吧。最直观就是黑了很多就几天时间晒得跟包大人一样,我对着镜子又陷入了沉思,看来老天爷也不想让我白活一辈子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/baihuo.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p class="txt-indent">身体素质上得到了小幅提升比如说手部力量和腿部力量,感觉比以前有力很多。不光这些连我的睡眠质量也得到了很大的改善,无论是晚上睡觉还是午休我都可以快速入睡,这是在学校时所没有的。这是几天搬砖最大的“收获”,有点困了今晚就这样了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/tote-bricks/shuijiao.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h4><p class="txt-indent">2020-08-01今天是建军节。太阳出奇的大,气温是我从开始到现在最热的一天气温高达34度,感觉都要化了。不过还好今天不是很忙,今天楼上的砖差不多都砌完了,明天过后就会轻松很多。</p><h4 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h4><p class="txt-indent">2020-08-02天气还可以不怎么热风很凉快,六点钟的时候下了场雨挺大的。无奈只能“暂停营业”,提前下班。</p><h4 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h4><p class="txt-indent">2020-08-03今天建设局的人来检查,说违规建设未经允许私自加高楼层。听说这这个房子的主人只申请到了到了六层楼的文件建设许可,现在起到第八层局里的人说得拆掉两层,现在这栋房子的主人正在与局里的人沟通,估计明天也出不来结果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;为什么选择去工地搬砖,而不是去广东进厂?&lt;br&gt;1.我大伯接了一个工程,挺赶的,人手不够。&lt;br&gt;2.去广东的话车费来回要六百块,不划算。&lt;
      
    
    </summary>
    
    
    
      <category term="搬砖日记" scheme="https://cokesprit.gitee.io/tags/%E6%90%AC%E7%A0%96%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GO和AO</title>
    <link href="https://cokesprit.gitee.io/posts/GO-AO/"/>
    <id>https://cokesprit.gitee.io/posts/GO-AO/</id>
    <published>2020-07-25T13:43:05.000Z</published>
    <updated>2020-09-26T07:30:46.744Z</updated>
    
    <content type="html"><![CDATA[<p>GO: global object 全局的执行期上下文<br>AO：activation object 活跃对象,函数的执行期上下文   </p><h4 id="暗示全局变量"><a href="#暗示全局变量" class="headerlink" title="暗示全局变量"></a>暗示全局变量</h4><p>暗示全局变量 -&gt; imply global variable</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        b = <span class="number">2</span>; <span class="comment">// 暗示全局变量 不使用 var</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// a = window.a</span></span><br><span class="line">    <span class="comment">// b = window.b</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// window = {</span></span><br><span class="line">        <span class="comment">//     a:1 ,</span></span><br><span class="line">        <span class="comment">//     b:2</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> x = y = <span class="number">7</span>;</span><br><span class="line">    }</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">console</span>.log(y); <span class="comment">// 打印 7 , 未声明直接赋值,提升成全局变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// window 本身是一个全局的域;所有的全局变量都归 window 所有</span></span><br><span class="line">    <span class="comment">// 你也可以这么认为 全局变量是 window对象的属性,全局函数是 window对象的方法</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="全局变量与GO"><a href="#全局变量与GO" class="headerlink" title="全局变量与GO"></a>全局变量与GO</h4><p>js在执行之前会产生一个叫GO的东西，GO又叫 -&gt; global object -&gt; 全局的执行期上下文</p><p>GO执行：<br>    1. 找变量声明<br>    2. 找函数声明<br>    3. 执行</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据上面GO执行一步一步的来</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined</span></span><br><span class="line">    <span class="comment">//     a: function a(){}</span></span><br><span class="line">    <span class="comment">//     a: 1</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// 总结： GO === window,GO只关注全局变量的和全局函数声明并不关注函数的内部;</span></span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="built_in">console</span>.log(c,d); <span class="comment">// 打印 f c(){} undefined</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> d = funciton(){}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GO 执行</span></span><br><span class="line">    <span class="comment">// GO = {</span></span><br><span class="line">    <span class="comment">//     d:undefined  // 第一步 找变量</span></span><br><span class="line">    <span class="comment">//       function(){}</span></span><br><span class="line">    <span class="comment">//     c:function c(){} // 第二步 找函数声明</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>疑点解析：为什么打印d是undefined并不是 f c(){}?因为预编译的时候是去找变量声明和函数声明,当编译完后才解释一行,执行一行。</p><p><span class="s_red">总结</span>：在使用 GO 的时候要考虑执行顺序。</p><hr><h4 id="函数预编译与AO"><a href="#函数预编译与AO" class="headerlink" title="函数预编译与AO"></a>函数预编译与AO</h4><p>函数预编译其实就是在函数执行之前要进行的一个步骤它这个步骤叫做AO：<br>AO - &gt; activation object  -&gt; 活跃对象 -&gt; 函数的执行期上下文 。<br>它先创建AO这个对象<br>AO = {</p><p>}<br>然后把形参和变量什么声明放到里面去，即<br>AO执行：</p><ol><li>寻找形参和变量声明</li><li>实参值赋值给形参</li><li>找函数声明,赋值</li><li>执行</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子一</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// ƒ a(){}</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}  </span><br><span class="line">        <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// ƒ (){}</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined -&gt;</span></span><br><span class="line">    <span class="comment">//        2  -&gt;</span></span><br><span class="line">    <span class="comment">//        function a(){} -&gt;</span></span><br><span class="line">    <span class="comment">//        1</span></span><br><span class="line">    <span class="comment">//     b: undefined</span></span><br><span class="line">    <span class="comment">//        function (){}</span></span><br><span class="line">    <span class="comment">//     d: function d(){}</span></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子二</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        a = <span class="number">5</span>;</span><br><span class="line">        b = <span class="number">6</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>{}</span><br><span class="line">        <span class="built_in">console</span>.log(b); <span class="comment">// 6  因为 b = 6; 把函数式 function b(){} 给覆盖了</span></span><br><span class="line">    }</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AO = {</span></span><br><span class="line">    <span class="comment">//     a: undefined -&gt;</span></span><br><span class="line">    <span class="comment">//         1 -&gt;</span></span><br><span class="line">    <span class="comment">//          5,</span></span><br><span class="line">    <span class="comment">//     b: undefined -&gt;</span></span><br><span class="line">    <span class="comment">//         function b(){} -&gt;</span></span><br><span class="line">    <span class="comment">//          6,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     c: undefined -&gt;</span></span><br><span class="line">    <span class="comment">//         0,</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//     d:function d(){}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>写出练习例子的GO和AO</p><h5 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;  </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">// ƒ a(){}</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test()); <span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h5 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> a = <span class="number">1</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>{}</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">if</span>(a){</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> c ;</span><br><span class="line">    a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    f = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/GO-AO/l-3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>预编译是不看 if的,看见有声明就挂上去。if只有在在执行的时候才去看 if 。但是if 内部的变量声明还是看的。</p><hr><h4 id="为啥了解AO和GO"><a href="#为啥了解AO和GO" class="headerlink" title="为啥了解AO和GO"></a>为啥了解AO和GO</h4><p>为了解决js作用域/作用域链相关所产生的一切问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GO: global object 全局的执行期上下文&lt;br&gt;AO：activation object 活跃对象,函数的执行期上下文   &lt;/p&gt;
&lt;h4 id=&quot;暗示全局变量&quot;&gt;&lt;a href=&quot;#暗示全局变量&quot; class=&quot;headerlink&quot; title=&quot;暗示全
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="https://cokesprit.gitee.io/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>预编译</title>
    <link href="https://cokesprit.gitee.io/posts/ab96ffb5/"/>
    <id>https://cokesprit.gitee.io/posts/ab96ffb5/</id>
    <published>2020-07-25T07:37:53.000Z</published>
    <updated>2020-09-26T07:08:04.909Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript在执行之前有几个步骤:  </p><ol><li>检查通篇的语法错误</li><li>预编译的过程</li><li>解释一行,执行一行</li></ol><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>代码演示</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined  如果不声明a然后直接打印的话就会报错</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// var a = 10 ; // 是2个步骤 编译时找a并且赋值undefined -&gt; 执行时赋值 10</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/ab96ffb5/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p style=" text-indent: 2rem;">上面的演示中test();打印出来了2,而console.log(a);打印出来了undefined并没有报错,证明 js引擎在编译的时候,先去找函数声明,和变量声明,而变量赋值并不是在编译的时候做的,而是在编译完成后执行到那句时做的。</p>  <p><span class="s_red">总结</span>：函数声明是整体提示的(函数内部的东西),变量只有声明提升,变量赋值不提升。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript在执行之前有几个步骤:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查通篇的语法错误&lt;/li&gt;
&lt;li&gt;预编译的过程&lt;/li&gt;
&lt;li&gt;解释一行,执行一行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;预编译&quot;&gt;&lt;a href=&quot;#预编译&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="js作用域作用域链" scheme="https://cokesprit.gitee.io/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>callee-caller</title>
    <link href="https://cokesprit.gitee.io/posts/callee-caller/"/>
    <id>https://cokesprit.gitee.io/posts/callee-caller/</id>
    <published>2020-07-24T10:45:47.000Z</published>
    <updated>2020-09-26T07:28:02.234Z</updated>
    
    <content type="html"><![CDATA[<h4 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h4><p>callee是arguments的属性,<span class="s_red">代表当前函数的引用(名字)</span>,在函数内部使用，主要用来配合立即执行函数。<br>接下来让我们来认识 callee</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">//打印的是这个函数本身</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这两组是一样的</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length);<span class="comment">// 打印形参的长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.length);<span class="comment">//打印形参的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 打印实参的长度</span></span><br><span class="line">}</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><span class="s_jacinth">callee 配合立即执行函数</span></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归求 n-1 的累加和 </span></span><br><span class="line"><span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line">}(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h4><p><span class="s_jacinth">返回当前被调用的函数的引用</span><br>这听起来有点绕,让我们使用代码来更好的理解</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>{</span><br><span class="line">    test2();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(test2.caller); </span><br><span class="line">    <span class="comment">//这里打印的是 test1,因为test1()调用了test2并且test1执行了。</span></span><br><span class="line">    <span class="comment">// 在被调用函数里面打印被调用函数的caller 它可以打印出谁在调用它。</span></span><br><span class="line">    <span class="comment">// 注意一定是要被真正执行才能打印出来！！！</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">test1();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/callee-caller/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在严格模式下 callee 和 caller 会报错!!!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;callee&quot;&gt;&lt;a href=&quot;#callee&quot; class=&quot;headerlink&quot; title=&quot;callee&quot;&gt;&lt;/a&gt;callee&lt;/h4&gt;&lt;p&gt;callee是arguments的属性,&lt;span class=&quot;s_red&quot;&gt;代表当前函数的引用(名字)&lt;
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="https://cokesprit.gitee.io/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>call/apply方法</title>
    <link href="https://cokesprit.gitee.io/posts/call-apply/"/>
    <id>https://cokesprit.gitee.io/posts/call-apply/</id>
    <published>2020-07-24T04:20:37.000Z</published>
    <updated>2020-09-06T03:28:58.399Z</updated>
    
    <content type="html"><![CDATA[<p>作用：call() 和 apply() 都是用来更改 this 指向;<br>call()：call(this指向的对象, 参数1, 参数2, 参数n);<br>apply()：apply(this指向的对象, []);<br>不同之处：apply() 第二个参数是数组,实际开发中用的比较多的是apply();</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>让 newCar1和newCar2 拥有Car构造函数的的所有属性以及方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.color+<span class="string">"的"</span>+<span class="keyword">this</span>.brand+<span class="string">"正在行驶"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">var</span> newCar1 = {</span><br><span class="line">        pdiliang:<span class="string">'3.0'</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">var</span> newCar2 = {</span><br><span class="line">        pdiliang:<span class="string">'2.0'</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    Car.call(newCar1,<span class="string">"奔驰"</span>,<span class="string">"白色"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar1);</span><br><span class="line"></span><br><span class="line">    Car.apply(newCar2,[<span class="string">"五菱宏光"</span>,<span class="string">"米色"</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(newCar2);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：<br>可以看到 newCar1 和 newCar2 拥有了Car的属性和方法<br><img src="//call-apply%E6%96%B9%E6%B3%95/1.png" alt=""></p><h5 id="栗子一讲解："><a href="#栗子一讲解：" class="headerlink" title="栗子一讲解："></a>栗子一讲解：</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当使用 newCar1/newCar2 的时候 Car 变成内部的情况是这样的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar1.brand = brand;</span><br><span class="line">    newCar1.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>{</span><br><span class="line">    newCar2.brand = brand;</span><br><span class="line">    newCar2.color = color;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 因为 call/apply更改了 this 的指向</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>买车案例</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 买车案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">brand,color,displacement</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.displacement = displacement;</span><br><span class="line">    <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'排量为'</span>+ <span class="keyword">this</span>.displacement + <span class="string">'的'</span> + <span class="keyword">this</span>.color + <span class="keyword">this</span>.brand;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Preson</span>(<span class="params">opt</span>)</span>{</span><br><span class="line">    <span class="comment">// 借用 Car 的属性和方法</span></span><br><span class="line">    Car.apply(<span class="keyword">this</span>,[opt.brand,opt.color,opt.displacement]);</span><br><span class="line">    <span class="keyword">this</span>.name = opt.name;</span><br><span class="line">    <span class="keyword">this</span>.age  = opt.age;</span><br><span class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">'年龄'</span>+ <span class="keyword">this</span>.age + <span class="string">'岁姓名为'</span>+<span class="keyword">this</span>.name+<span class="string">'买了一辆'</span>+<span class="keyword">this</span>.info()</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> pt = <span class="keyword">new</span> Preson({</span><br><span class="line">    brand:<span class="string">'法拉利'</span>,</span><br><span class="line">    color:<span class="string">'红色'</span>,</span><br><span class="line">    displacement:<span class="string">'3.5'</span>,</span><br><span class="line">    name:<span class="string">'黄一蓝'</span>,</span><br><span class="line">    age:<span class="string">'20'</span></span><br><span class="line">});</span><br><span class="line">pt.say();</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="//call-apply方法/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="call-和-apply-的使用场景"><a href="#call-和-apply-的使用场景" class="headerlink" title="call() 和 apply()的使用场景"></a>call() 和 apply()的使用场景</h4><ol><li>以前写了一个功能不太完整，这时候可以写一个新的功能来补充完整，这个时候呢就可以使用 call() 和apply() 这两个方法去借用，以前功能相对应的方法和函数。</li><li>在工作的过程中很多人一起写个大功能，这个时候可以分组来写，最终统一去调用,一起协同作战。</li><li>分类：比如写一个东西，它有几种不同的类型，我们就可以分开写最后汇总。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用：call() 和 apply() 都是用来更改 this 指向;&lt;br&gt;call()：call(this指向的对象, 参数1, 参数2, 参数n);&lt;br&gt;apply()：apply(this指向的对象, []);&lt;br&gt;不同之处：apply() 第二个参数是数组,实
      
    
    </summary>
    
    
    
      <category term="面试/笔试" scheme="https://cokesprit.gitee.io/tags/%E9%9D%A2%E8%AF%95-%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>立即执行函数</title>
    <link href="https://cokesprit.gitee.io/posts/iife/"/>
    <id>https://cokesprit.gitee.io/posts/iife/</id>
    <published>2020-07-22T13:13:45.000Z</published>
    <updated>2020-07-22T14:21:54.492Z</updated>
    
    <content type="html"><![CDATA[<h4 id="立即执行函数："><a href="#立即执行函数：" class="headerlink" title="立即执行函数："></a>立即执行函数：</h4><pre><code>解释：自动执行，执行完成立即释放（销毁）英文：Immediately - Invoked Function Expression简称：IIFE 作用：创建一个独立的作用域好处：可以避免函数内的变量暴露在全局环境下，避免全局变量的污染。</code></pre><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    </span><br><span class="line">})(); <span class="comment">// 常用写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">}()); <span class="comment">// w3C建议</span></span><br></pre></td></tr></tbody></table></figure><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><h5 id="错误声明"><a href="#错误声明" class="headerlink" title="错误声明"></a>错误声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 错误声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样是错误的声明"</span>)</span><br><span class="line">}(); </span><br><span class="line">    <span class="comment">// 因为解析的时候是 ↓ </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    (); <span class="comment">//括号里面是空的会报错,当有值的时候会解析成一个表达式。</span></span><br></pre></td></tr></tbody></table></figure><h5 id="正确声明"><a href="#正确声明" class="headerlink" title="正确声明"></a>正确声明</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确声明</span></span><br><span class="line">    <span class="keyword">var</span> ts =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{ <span class="comment">// 这个匿名函数赋值给了 ts 这是一个赋值的过程</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这样可以执行！"</span>);</span><br><span class="line">    }();</span><br></pre></td></tr></tbody></table></figure><h5 id="证明立即执行函数完就销毁"><a href="#证明立即执行函数完就销毁" class="headerlink" title="证明立即执行函数完就销毁"></a>证明立即执行函数完就销毁</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明立即执行函数的销毁</span></span><br><span class="line"><span class="keyword">var</span> testone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"%c 1"</span>,<span class="string">"color:red;background:pink;"</span>);</span><br><span class="line">    }(); <span class="comment">// 这是一个赋值的过程 并不是执行所以可以这样写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testone);<span class="comment">//打印 undefined </span></span><br><span class="line"><span class="comment">// 打印 undefined 证明 testone 在执行完之后就被销毁了</span></span><br></pre></td></tr></tbody></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{<span class="comment">//这两个是形参</span></span><br><span class="line">        <span class="built_in">console</span>.log(a+b);  <span class="number">6</span></span><br><span class="line">    }(<span class="number">2</span>,<span class="number">4</span>));<span class="comment">//这两个是实参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例子二</span></span><br><span class="line">    <span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(sum); <span class="comment">// 7</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.括号括起来的都是表达式,不管里面是什么;<br>2.只有表达式才能被执行符号(括号)执行;<br>3.把函数声明变成表达式，那么你的函数名就会被自动的忽略;</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="函数声明变成表达式的方法"><a href="#函数声明变成表达式的方法" class="headerlink" title="函数声明变成表达式的方法"></a>函数声明变成表达式的方法</h5><p>函数声明变成表达式的方法在 function前面加 + 、- 、！、||(前面得加 0)、&amp;&amp;(前面得加 1)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 + 号变成表达式了,所以可以立即执行"</span>);</span><br><span class="line">}();</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我前面加了 0|| 运算符,我也变成表达式了,我也可以立即执行了。"</span>);</span><br><span class="line">}();</span><br></pre></td></tr></tbody></table></figure><h5 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号运算符</span></span><br><span class="line">    <span class="comment">// 逗号运算符只返回,所有逗号的最后一个值</span></span><br><span class="line">    <span class="comment">// 例子：</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">6</span><span class="number">-7</span>,<span class="number">8</span>+<span class="number">9</span>,<span class="number">5</span>+<span class="number">5</span>)); <span class="comment">//  10</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)); <span class="comment">//  7</span></span><br></pre></td></tr></tbody></table></figure><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面试题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params">a</span>)</span>{</span><br><span class="line">    <span class="comment">// console.log("不报错，也不运行");</span></span><br><span class="line">}(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析流程</span></span><br><span class="line">    <span class="comment">// 因为解析的时候是解析成两部分的</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tst</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    } <span class="comment">//解析这是一个函数</span></span><br><span class="line">   (<span class="number">6</span>); <span class="comment">//这个(6),解析成一个表达式</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;立即执行函数：&quot;&gt;&lt;a href=&quot;#立即执行函数：&quot; class=&quot;headerlink&quot; title=&quot;立即执行函数：&quot;&gt;&lt;/a&gt;立即执行函数：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;解释：自动执行，执行完成立即释放（销毁）
英文：Immediately - Invo
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="https://cokesprit.gitee.io/posts/digui/"/>
    <id>https://cokesprit.gitee.io/posts/digui/</id>
    <published>2020-07-21T08:23:14.000Z</published>
    <updated>2020-07-21T10:00:34.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h4><p>递归说白了就是，函数自己调用自己。</p><h4 id="递归主要的两个部分"><a href="#递归主要的两个部分" class="headerlink" title="递归主要的两个部分"></a>递归主要的两个部分</h4><p>1.找到计算的规律!<br>2.找到一个出口,让它结束掉!</p><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="栗子一"><a href="#栗子一" class="headerlink" title="栗子一"></a>栗子一</h5><p>求 n 的阶乘 -&gt; 不能使用 for 循环 </p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fact(n);</span></span><br><span class="line"><span class="comment">// 规律：n = n * fact(n-1)</span></span><br><span class="line"><span class="comment">// 出口：n === 1 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">//出口</span></span><br><span class="line">        <span class="keyword">if</span>(n === <span class="number">1</span>){ </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>); </span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fact(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line">    <span class="comment">// 当 n = 5;</span></span><br><span class="line">    <span class="comment">// 120 = fact(5) = 5 * fact(4);  -&gt;   5 * 4 * 6;</span></span><br><span class="line">    <span class="comment">// 24 = fact(4) = 4 * fact(3);  -&gt;   4 * 3 * 2;</span></span><br><span class="line">    <span class="comment">// 6 =  fact(3) = 3 * fact(2);  -&gt;   3 * 2 * 1;</span></span><br><span class="line">    <span class="comment">// 2 = fact(2) = 2 * fact(1);  -&gt;   2 * 1 * 1; ↑ </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  当程序走到出口1的时候又往上执行，</span></span><br><span class="line">    <span class="comment">//  因为上面还有一大堆队列都没有实际的运算结果，但是一到 1 </span></span><br><span class="line">    <span class="comment">//  fact(1) = 1 然后</span></span><br><span class="line">    <span class="comment">//  2 * 1 等于 2； fact(2) 等于 2; </span></span><br><span class="line">    <span class="comment">//  3 * 2 等于 6;  fact(3) 等于 6;</span></span><br><span class="line">    <span class="comment">//  4 * 6 等于 24; fact(4) 等于 24;</span></span><br><span class="line">    <span class="comment">//  5 * 24 等于 120; fact(5) 等于 120;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="栗子二"><a href="#栗子二" class="headerlink" title="栗子二"></a>栗子二</h5><p>斐波拉契数列</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规律: n3 = n2 + n1;</span></span><br><span class="line"><span class="comment">//出口：n &lt;= 0  n &lt;= 2;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>)</span>{</span><br><span class="line">        <span class="comment">// 两个出口</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 规律</span></span><br><span class="line">        <span class="keyword">return</span> fb(n<span class="number">-1</span>) + fb(n<span class="number">-2</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(fb(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析:</span></span><br><span class="line">        <span class="comment">//  斐波拉契数列： 0,1,1,2,3,5,8,13.... 像这种规律的。</span></span><br><span class="line">        <span class="comment">//  规律：n3 = n2 + n1</span></span><br><span class="line">        <span class="comment">//  出口：n &lt;= 0 n &lt;= 2 </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// n = 6;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8 = fb(6) = fb(5) + fb(4);  -&gt;  5 + 3</span></span><br><span class="line">            <span class="comment">// 5 = fb(5) = fb(4) + fb(3);  -&gt;  3 + 2</span></span><br><span class="line">            <span class="comment">// 3 = fb(4) = fb(3) + fb(2);  -&gt;  2 + 1</span></span><br><span class="line">            <span class="comment">// 2 = fb(3) = fb(2) + fb(1);  -&gt;  1 + 1   ↑</span></span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>递归它总是走到出口的时候,再向上一步一步的赋值计算后返回结果.</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>递归会涉及到性能的问题,return 的值一直出不去,要等执行到出口的时候。递归处理一些,小逻辑还是可以的,但是JavaScript里慎用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是递归？&quot;&gt;&lt;a href=&quot;#什么是递归？&quot; class=&quot;headerlink&quot; title=&quot;什么是递归？&quot;&gt;&lt;/a&gt;什么是递归？&lt;/h4&gt;&lt;p&gt;递归说白了就是，函数自己调用自己。&lt;/p&gt;
&lt;h4 id=&quot;递归主要的两个部分&quot;&gt;&lt;a href=&quot;#递归主
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js实参求乘积</title>
    <link href="https://cokesprit.gitee.io/posts/js-shican-qiu-chengji/"/>
    <id>https://cokesprit.gitee.io/posts/js-shican-qiu-chengji/</id>
    <published>2020-07-19T07:25:53.000Z</published>
    <updated>2020-07-19T09:23:03.349Z</updated>
    
    <content type="html"><![CDATA[<p> 在解题之前我们先搞懂什么是js中的形参和实参？  </p><h5 id="js中的形参和实参"><a href="#js中的形参和实参" class="headerlink" title="js中的形参和实参"></a>js中的形参和实参</h5><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 形式参数 形参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span></span>)</span>{ <span class="comment">// 里面的就是形参</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length); <span class="comment">// 形参长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">// 实参长度</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//   实际参数 实参</span></span><br><span class="line">test(实参<span class="number">1</span>,实参<span class="number">2</span>,实参<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><blockquote><ol><li>形参和实参数量可以不相等。  </li><li><span style="color:#f5871f;">arguments</span> 是一个对应于传递给函数的参数的<span style="color:#f5871f;">类数组对象</span>里面包含所有的实参!!!  </li><li>实参里面传了值的可以在函数内部修改实参的值，如果实参里面并没有传入值，也给形参赋值了，这样是没有用的。</li></ol></blockquote><h5 id="js实参求乘积"><a href="#js实参求乘积" class="headerlink" title="js实参求乘积"></a>js实参求乘积</h5><p>了解了什么实参和形参接下来就可以愉快的码代码了  </p><pre><code><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length;i++){</span><br><span class="line">    a *= <span class="built_in">arguments</span>[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在解题之前我们先搞懂什么是js中的形参和实参？  &lt;/p&gt;
&lt;h5 id=&quot;js中的形参和实参&quot;&gt;&lt;a href=&quot;#js中的形参和实参&quot; class=&quot;headerlink&quot; title=&quot;js中的形参和实参&quot;&gt;&lt;/a&gt;js中的形参和实参&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
    
      <category term="js面试题" scheme="https://cokesprit.gitee.io/tags/js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码 和 UNICODE码</title>
    <link href="https://cokesprit.gitee.io/posts/504aee57/"/>
    <id>https://cokesprit.gitee.io/posts/504aee57/</id>
    <published>2020-07-19T02:18:33.000Z</published>
    <updated>2020-09-06T03:19:33.266Z</updated>
    
    <content type="html"><![CDATA[<p>ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  </p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p> 写一个函数，接收任意一个字符串，算出字符串的总字节数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBytes</span>(<span class="params">str</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> sth = str.length; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++){</span><br><span class="line">        <span class="keyword">var</span> stc = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span>(stc &gt; <span class="number">255</span>){ </span><br><span class="line">            sth++; </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sth;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(getBytes(<span class="string">'Hello js，我们做好朋友吧！'</span>));</span><br></pre></td></tr></tbody></table></figure><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><p style="text-indent:2em;">先获取到字符串的长度,将其存入一个变量 sth ,然后利用循环判断编码是否大于 255 ,如果大于 sth++ 。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ASCII码0-127占一个byte大小，UNICODE码涵盖ASCII码 255 以后就占两个 byte大小。  &lt;/p&gt;
&lt;h4 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h4&gt;&lt;p&gt; 写一个
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>逻辑运算符</title>
    <link href="https://cokesprit.gitee.io/posts/17278be4/"/>
    <id>https://cokesprit.gitee.io/posts/17278be4/</id>
    <published>2020-07-18T12:28:03.000Z</published>
    <updated>2020-09-06T03:26:25.828Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑运算符：<br><span class="s_green">与&amp;&amp;</span>  <span class="s_green">或||</span>  <span class="s_green">非!</span></p><p>在讲这个三个之前,先来认识js当中表示假的：undefined 、null、 NaN 、0 、false 、”” ，<span class="s_green">除上述以为全部都是真</span>。  </p><h4 id="逻辑运算与：-amp-amp"><a href="#逻辑运算与：-amp-amp" class="headerlink" title="逻辑运算与：&amp;&amp;"></a>逻辑运算与：&amp;&amp;</h4><p><span class="s_red">&amp;&amp;:</span> 遇到真就会继续往前走，遇到假或者走到最后就返回当前的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> &amp;&amp; <span class="number">2</span> &amp;&amp; <span class="literal">undefined</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/17278be4/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h4 id="逻辑运算或："><a href="#逻辑运算或：" class="headerlink" title="逻辑运算或： ||"></a>逻辑运算或： ||</h4><p><span class="s_red">||:</span>遇到假就会继续往前走,直到遇到真或者走到最后返回当前的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">0</span> || <span class="literal">null</span> || <span class="number">1</span> || <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/17278be4/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="逻辑运算符非："><a href="#逻辑运算符非：" class="headerlink" title="逻辑运算符非：!"></a>逻辑运算符非：!</h4><p><span class="s_red">非就是取反</span>，如果是真取反之后就是假，如果是假取反之后就是真。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a = !<span class="literal">true</span>; <span class="comment">// true 取反 -&gt; false</span></span><br><span class="line"> <span class="built_in">console</span>.log(a); </span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> b = !<span class="number">1</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(b)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c = !c;</span><br><span class="line"><span class="comment">/*注意此时的 c 未赋值还是 undefined ,</span></span><br><span class="line"><span class="comment">  undefined取反就是真</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="built_in">console</span>.log(c); <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/posts/17278be4/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;逻辑运算符：&lt;br&gt;&lt;span class=&quot;s_green&quot;&gt;与&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&quot;s_green&quot;&gt;或||&lt;/span&gt;  &lt;span class=&quot;s_green&quot;&gt;非!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在讲这个三个之前,先来认
      
    
    </summary>
    
    
    
      <category term="js笔记" scheme="https://cokesprit.gitee.io/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客发布踩坑</title>
    <link href="https://cokesprit.gitee.io/posts/ffafe98e/"/>
    <id>https://cokesprit.gitee.io/posts/ffafe98e/</id>
    <published>2020-07-18T02:29:37.000Z</published>
    <updated>2020-07-18T05:24:04.195Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客 <strong>Username for ‘<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></strong> 验证问题<br>这时候 输入你的github邮箱账号 <span style="color:red;">（不是你的github名！！！）</span> 之后会弹出一个提示框 然后输入邮箱登录密码即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      hexo博客 **Username for &#39;https://github.com** 验证问题
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://cokesprit.gitee.io/tags/hexo/"/>
    
  </entry>
  
</feed>
